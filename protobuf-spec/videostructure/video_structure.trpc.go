// Code generated by trpc-go/trpc-go-cmdline v2.4.0. DO NOT EDIT.
// source: video_structure.proto

package videostructure

import (
	"context"
	"errors"
	"fmt"

	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/client"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/codec"
	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/http"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/server"
)

// START ======================================= Server Service Definition ======================================= START

// AITagService defines service.
type AITagService interface {
	CreateAITagTask(ctx context.Context, req *CreateVideoStructureTaskRequest, rsp *CreateVideoStructureTaskResponse) (err error) // @alias=/CreateAITagTask

	DescribeAITagTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, rsp *DescribeAITagTaskDataResponse) (err error) // @alias=/DescribeAITagTaskData

	DescribeAITagAudioTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, rsp *DescribeAITagAudioTaskDataResponse) (err error) // @alias=/DescribeAITagAudioTaskData

	DescribeAITagImageTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, rsp *DescribeAITagImageTaskDataResponse) (err error) // @alias=/DescribeAITagImageTaskData

	DescribeAITagTextTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, rsp *DescribeAITagTextTaskDataResponse) (err error) // @alias=/DescribeAITagTextTaskData

	DescribeVideoShotCover(ctx context.Context, req *DescribeVideoShotCoverRequest, rsp *DescribeVideoShotCoverResponse) (err error) // @alias=/DescribeVideoShotCover
}

func AITagService_CreateAITagTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateVideoStructureTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AITagService).CreateAITagTask(ctx, reqbody.(*CreateVideoStructureTaskRequest), rspbody.(*CreateVideoStructureTaskResponse))
	}

	rsp := &CreateVideoStructureTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AITagService_DescribeAITagTaskData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeAITagTaskDataRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AITagService).DescribeAITagTaskData(ctx, reqbody.(*DescribeAITagTaskDataRequest), rspbody.(*DescribeAITagTaskDataResponse))
	}

	rsp := &DescribeAITagTaskDataResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AITagService_DescribeAITagAudioTaskData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeAITagTaskDataRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AITagService).DescribeAITagAudioTaskData(ctx, reqbody.(*DescribeAITagTaskDataRequest), rspbody.(*DescribeAITagAudioTaskDataResponse))
	}

	rsp := &DescribeAITagAudioTaskDataResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AITagService_DescribeAITagImageTaskData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeAITagTaskDataRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AITagService).DescribeAITagImageTaskData(ctx, reqbody.(*DescribeAITagTaskDataRequest), rspbody.(*DescribeAITagImageTaskDataResponse))
	}

	rsp := &DescribeAITagImageTaskDataResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AITagService_DescribeAITagTextTaskData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeAITagTaskDataRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AITagService).DescribeAITagTextTaskData(ctx, reqbody.(*DescribeAITagTaskDataRequest), rspbody.(*DescribeAITagTextTaskDataResponse))
	}

	rsp := &DescribeAITagTextTaskDataResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AITagService_DescribeVideoShotCover_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeVideoShotCoverRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AITagService).DescribeVideoShotCover(ctx, reqbody.(*DescribeVideoShotCoverRequest), rspbody.(*DescribeVideoShotCoverResponse))
	}

	rsp := &DescribeVideoShotCoverResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// AITagServer_ServiceDesc descriptor for server.RegisterService.
var AITagServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.videostructure.AITag",
	HandlerType: ((*AITagService)(nil)),
	Methods: []server.Method{
		{
			Name: "/CreateAITagTask",
			Func: AITagService_CreateAITagTask_Handler,
		},
		{
			Name: "/DescribeAITagTaskData",
			Func: AITagService_DescribeAITagTaskData_Handler,
		},
		{
			Name: "/DescribeAITagAudioTaskData",
			Func: AITagService_DescribeAITagAudioTaskData_Handler,
		},
		{
			Name: "/DescribeAITagImageTaskData",
			Func: AITagService_DescribeAITagImageTaskData_Handler,
		},
		{
			Name: "/DescribeAITagTextTaskData",
			Func: AITagService_DescribeAITagTextTaskData_Handler,
		},
		{
			Name: "/DescribeVideoShotCover",
			Func: AITagService_DescribeVideoShotCover_Handler,
		},
		{
			Name: "/trpc.media.videostructure.AITag/CreateAITagTask",
			Func: AITagService_CreateAITagTask_Handler,
		},
		{
			Name: "/trpc.media.videostructure.AITag/DescribeAITagTaskData",
			Func: AITagService_DescribeAITagTaskData_Handler,
		},
		{
			Name: "/trpc.media.videostructure.AITag/DescribeAITagAudioTaskData",
			Func: AITagService_DescribeAITagAudioTaskData_Handler,
		},
		{
			Name: "/trpc.media.videostructure.AITag/DescribeAITagImageTaskData",
			Func: AITagService_DescribeAITagImageTaskData_Handler,
		},
		{
			Name: "/trpc.media.videostructure.AITag/DescribeAITagTextTaskData",
			Func: AITagService_DescribeAITagTextTaskData_Handler,
		},
		{
			Name: "/trpc.media.videostructure.AITag/DescribeVideoShotCover",
			Func: AITagService_DescribeVideoShotCover_Handler,
		},
	},
}

// RegisterAITagService registers service.
func RegisterAITagService(s server.Service, svr AITagService) {
	if err := s.Register(&AITagServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("AITag register error:%v", err))
	}
}

// AICatalogService defines service.
type AICatalogService interface {
	CreateAICatalogTask(ctx context.Context, req *CreateVideoStructureTaskRequest, rsp *CreateVideoStructureTaskResponse) (err error) // @alias=/CreateAICatalogTask

	DescribeAICatalogTaskData(ctx context.Context, req *DescribeAICatalogTaskDataRequest, rsp *DescribeAICatalogTaskDataResponse) (err error) // @alias=/DescribeAICatalogTaskData
}

func AICatalogService_CreateAICatalogTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateVideoStructureTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AICatalogService).CreateAICatalogTask(ctx, reqbody.(*CreateVideoStructureTaskRequest), rspbody.(*CreateVideoStructureTaskResponse))
	}

	rsp := &CreateVideoStructureTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AICatalogService_DescribeAICatalogTaskData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeAICatalogTaskDataRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AICatalogService).DescribeAICatalogTaskData(ctx, reqbody.(*DescribeAICatalogTaskDataRequest), rspbody.(*DescribeAICatalogTaskDataResponse))
	}

	rsp := &DescribeAICatalogTaskDataResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// AICatalogServer_ServiceDesc descriptor for server.RegisterService.
var AICatalogServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.videostructure.AICatalog",
	HandlerType: ((*AICatalogService)(nil)),
	Methods: []server.Method{
		{
			Name: "/CreateAICatalogTask",
			Func: AICatalogService_CreateAICatalogTask_Handler,
		},
		{
			Name: "/DescribeAICatalogTaskData",
			Func: AICatalogService_DescribeAICatalogTaskData_Handler,
		},
		{
			Name: "/trpc.media.videostructure.AICatalog/CreateAICatalogTask",
			Func: AICatalogService_CreateAICatalogTask_Handler,
		},
		{
			Name: "/trpc.media.videostructure.AICatalog/DescribeAICatalogTaskData",
			Func: AICatalogService_DescribeAICatalogTaskData_Handler,
		},
	},
}

// RegisterAICatalogService registers service.
func RegisterAICatalogService(s server.Service, svr AICatalogService) {
	if err := s.Register(&AICatalogServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("AICatalog register error:%v", err))
	}
}

// AICutService defines service.
type AICutService interface {
	CreateAICutTask(ctx context.Context, req *CreateVideoStructureTaskRequest, rsp *CreateVideoStructureTaskResponse) (err error) // @alias=/CreateAICutTask

	DescribeAICutTaskData(ctx context.Context, req *DescribeAICutTaskDataRequest, rsp *DescribeAICutTaskDataResponse) (err error) // @alias=/DescribeAICutTaskData
}

func AICutService_CreateAICutTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateVideoStructureTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AICutService).CreateAICutTask(ctx, reqbody.(*CreateVideoStructureTaskRequest), rspbody.(*CreateVideoStructureTaskResponse))
	}

	rsp := &CreateVideoStructureTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AICutService_DescribeAICutTaskData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeAICutTaskDataRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AICutService).DescribeAICutTaskData(ctx, reqbody.(*DescribeAICutTaskDataRequest), rspbody.(*DescribeAICutTaskDataResponse))
	}

	rsp := &DescribeAICutTaskDataResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// AICutServer_ServiceDesc descriptor for server.RegisterService.
var AICutServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.videostructure.AICut",
	HandlerType: ((*AICutService)(nil)),
	Methods: []server.Method{
		{
			Name: "/CreateAICutTask",
			Func: AICutService_CreateAICutTask_Handler,
		},
		{
			Name: "/DescribeAICutTaskData",
			Func: AICutService_DescribeAICutTaskData_Handler,
		},
		{
			Name: "/trpc.media.videostructure.AICut/CreateAICutTask",
			Func: AICutService_CreateAICutTask_Handler,
		},
		{
			Name: "/trpc.media.videostructure.AICut/DescribeAICutTaskData",
			Func: AICutService_DescribeAICutTaskData_Handler,
		},
	},
}

// RegisterAICutService registers service.
func RegisterAICutService(s server.Service, svr AICutService) {
	if err := s.Register(&AICutServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("AICut register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedAITag struct{}

func (s *UnimplementedAITag) CreateAITagTask(ctx context.Context, req *CreateVideoStructureTaskRequest, rsp *CreateVideoStructureTaskResponse) error {
	return errors.New("rpc CreateAITagTask of service AITag is not implemented")
}
func (s *UnimplementedAITag) DescribeAITagTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, rsp *DescribeAITagTaskDataResponse) error {
	return errors.New("rpc DescribeAITagTaskData of service AITag is not implemented")
}
func (s *UnimplementedAITag) DescribeAITagAudioTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, rsp *DescribeAITagAudioTaskDataResponse) error {
	return errors.New("rpc DescribeAITagAudioTaskData of service AITag is not implemented")
}
func (s *UnimplementedAITag) DescribeAITagImageTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, rsp *DescribeAITagImageTaskDataResponse) error {
	return errors.New("rpc DescribeAITagImageTaskData of service AITag is not implemented")
}
func (s *UnimplementedAITag) DescribeAITagTextTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, rsp *DescribeAITagTextTaskDataResponse) error {
	return errors.New("rpc DescribeAITagTextTaskData of service AITag is not implemented")
}
func (s *UnimplementedAITag) DescribeVideoShotCover(ctx context.Context, req *DescribeVideoShotCoverRequest, rsp *DescribeVideoShotCoverResponse) error {
	return errors.New("rpc DescribeVideoShotCover of service AITag is not implemented")
}

type UnimplementedAICatalog struct{}

func (s *UnimplementedAICatalog) CreateAICatalogTask(ctx context.Context, req *CreateVideoStructureTaskRequest, rsp *CreateVideoStructureTaskResponse) error {
	return errors.New("rpc CreateAICatalogTask of service AICatalog is not implemented")
}
func (s *UnimplementedAICatalog) DescribeAICatalogTaskData(ctx context.Context, req *DescribeAICatalogTaskDataRequest, rsp *DescribeAICatalogTaskDataResponse) error {
	return errors.New("rpc DescribeAICatalogTaskData of service AICatalog is not implemented")
}

type UnimplementedAICut struct{}

func (s *UnimplementedAICut) CreateAICutTask(ctx context.Context, req *CreateVideoStructureTaskRequest, rsp *CreateVideoStructureTaskResponse) error {
	return errors.New("rpc CreateAICutTask of service AICut is not implemented")
}
func (s *UnimplementedAICut) DescribeAICutTaskData(ctx context.Context, req *DescribeAICutTaskDataRequest, rsp *DescribeAICutTaskDataResponse) error {
	return errors.New("rpc DescribeAICutTaskData of service AICut is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// AITagClientProxy defines service client proxy
type AITagClientProxy interface {
	CreateAITagTask(ctx context.Context, req *CreateVideoStructureTaskRequest, opts ...client.Option) (rsp *CreateVideoStructureTaskResponse, err error) // @alias=/CreateAITagTask

	DescribeAITagTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, opts ...client.Option) (rsp *DescribeAITagTaskDataResponse, err error) // @alias=/DescribeAITagTaskData

	DescribeAITagAudioTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, opts ...client.Option) (rsp *DescribeAITagAudioTaskDataResponse, err error) // @alias=/DescribeAITagAudioTaskData

	DescribeAITagImageTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, opts ...client.Option) (rsp *DescribeAITagImageTaskDataResponse, err error) // @alias=/DescribeAITagImageTaskData

	DescribeAITagTextTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, opts ...client.Option) (rsp *DescribeAITagTextTaskDataResponse, err error) // @alias=/DescribeAITagTextTaskData

	DescribeVideoShotCover(ctx context.Context, req *DescribeVideoShotCoverRequest, opts ...client.Option) (rsp *DescribeVideoShotCoverResponse, err error) // @alias=/DescribeVideoShotCover
}

type AITagClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewAITagClientProxy = func(opts ...client.Option) AITagClientProxy {
	return &AITagClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *AITagClientProxyImpl) CreateAITagTask(ctx context.Context, req *CreateVideoStructureTaskRequest, opts ...client.Option) (*CreateVideoStructureTaskResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/CreateAITagTask")
	msg.WithCalleeServiceName(AITagServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videostructure")
	msg.WithCalleeService("AITag")
	msg.WithCalleeMethod("CreateAITagTask")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateVideoStructureTaskResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AITagClientProxyImpl) DescribeAITagTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, opts ...client.Option) (*DescribeAITagTaskDataResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeAITagTaskData")
	msg.WithCalleeServiceName(AITagServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videostructure")
	msg.WithCalleeService("AITag")
	msg.WithCalleeMethod("DescribeAITagTaskData")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeAITagTaskDataResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AITagClientProxyImpl) DescribeAITagAudioTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, opts ...client.Option) (*DescribeAITagAudioTaskDataResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeAITagAudioTaskData")
	msg.WithCalleeServiceName(AITagServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videostructure")
	msg.WithCalleeService("AITag")
	msg.WithCalleeMethod("DescribeAITagAudioTaskData")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeAITagAudioTaskDataResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AITagClientProxyImpl) DescribeAITagImageTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, opts ...client.Option) (*DescribeAITagImageTaskDataResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeAITagImageTaskData")
	msg.WithCalleeServiceName(AITagServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videostructure")
	msg.WithCalleeService("AITag")
	msg.WithCalleeMethod("DescribeAITagImageTaskData")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeAITagImageTaskDataResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AITagClientProxyImpl) DescribeAITagTextTaskData(ctx context.Context, req *DescribeAITagTaskDataRequest, opts ...client.Option) (*DescribeAITagTextTaskDataResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeAITagTextTaskData")
	msg.WithCalleeServiceName(AITagServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videostructure")
	msg.WithCalleeService("AITag")
	msg.WithCalleeMethod("DescribeAITagTextTaskData")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeAITagTextTaskDataResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AITagClientProxyImpl) DescribeVideoShotCover(ctx context.Context, req *DescribeVideoShotCoverRequest, opts ...client.Option) (*DescribeVideoShotCoverResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeVideoShotCover")
	msg.WithCalleeServiceName(AITagServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videostructure")
	msg.WithCalleeService("AITag")
	msg.WithCalleeMethod("DescribeVideoShotCover")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeVideoShotCoverResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// AICatalogClientProxy defines service client proxy
type AICatalogClientProxy interface {
	CreateAICatalogTask(ctx context.Context, req *CreateVideoStructureTaskRequest, opts ...client.Option) (rsp *CreateVideoStructureTaskResponse, err error) // @alias=/CreateAICatalogTask

	DescribeAICatalogTaskData(ctx context.Context, req *DescribeAICatalogTaskDataRequest, opts ...client.Option) (rsp *DescribeAICatalogTaskDataResponse, err error) // @alias=/DescribeAICatalogTaskData
}

type AICatalogClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewAICatalogClientProxy = func(opts ...client.Option) AICatalogClientProxy {
	return &AICatalogClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *AICatalogClientProxyImpl) CreateAICatalogTask(ctx context.Context, req *CreateVideoStructureTaskRequest, opts ...client.Option) (*CreateVideoStructureTaskResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/CreateAICatalogTask")
	msg.WithCalleeServiceName(AICatalogServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videostructure")
	msg.WithCalleeService("AICatalog")
	msg.WithCalleeMethod("CreateAICatalogTask")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateVideoStructureTaskResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AICatalogClientProxyImpl) DescribeAICatalogTaskData(ctx context.Context, req *DescribeAICatalogTaskDataRequest, opts ...client.Option) (*DescribeAICatalogTaskDataResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeAICatalogTaskData")
	msg.WithCalleeServiceName(AICatalogServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videostructure")
	msg.WithCalleeService("AICatalog")
	msg.WithCalleeMethod("DescribeAICatalogTaskData")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeAICatalogTaskDataResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// AICutClientProxy defines service client proxy
type AICutClientProxy interface {
	CreateAICutTask(ctx context.Context, req *CreateVideoStructureTaskRequest, opts ...client.Option) (rsp *CreateVideoStructureTaskResponse, err error) // @alias=/CreateAICutTask

	DescribeAICutTaskData(ctx context.Context, req *DescribeAICutTaskDataRequest, opts ...client.Option) (rsp *DescribeAICutTaskDataResponse, err error) // @alias=/DescribeAICutTaskData
}

type AICutClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewAICutClientProxy = func(opts ...client.Option) AICutClientProxy {
	return &AICutClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *AICutClientProxyImpl) CreateAICutTask(ctx context.Context, req *CreateVideoStructureTaskRequest, opts ...client.Option) (*CreateVideoStructureTaskResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/CreateAICutTask")
	msg.WithCalleeServiceName(AICutServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videostructure")
	msg.WithCalleeService("AICut")
	msg.WithCalleeMethod("CreateAICutTask")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateVideoStructureTaskResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AICutClientProxyImpl) DescribeAICutTaskData(ctx context.Context, req *DescribeAICutTaskDataRequest, opts ...client.Option) (*DescribeAICutTaskDataResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeAICutTaskData")
	msg.WithCalleeServiceName(AICutServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videostructure")
	msg.WithCalleeService("AICut")
	msg.WithCalleeMethod("DescribeAICutTaskData")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeAICutTaskDataResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
