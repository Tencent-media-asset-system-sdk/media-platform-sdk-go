// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: video_structure.proto

package videostructure

import (
	reflect "reflect"
	sync "sync"

	apicommon "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/apicommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AudioInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content        string  `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	StartTimeStamp float32 `protobuf:"fixed32,2,opt,name=StartTimeStamp,proto3" json:"StartTimeStamp,omitempty"`
	EndTimeStamp   float32 `protobuf:"fixed32,3,opt,name=EndTimeStamp,proto3" json:"EndTimeStamp,omitempty"`
	Tag            string  `protobuf:"bytes,4,opt,name=Tag,proto3" json:"Tag,omitempty"`
}

func (x *AudioInfo) Reset() {
	*x = AudioInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioInfo) ProtoMessage() {}

func (x *AudioInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioInfo.ProtoReflect.Descriptor instead.
func (*AudioInfo) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{0}
}

func (x *AudioInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AudioInfo) GetStartTimeStamp() float32 {
	if x != nil {
		return x.StartTimeStamp
	}
	return 0
}

func (x *AudioInfo) GetEndTimeStamp() float32 {
	if x != nil {
		return x.EndTimeStamp
	}
	return 0
}

func (x *AudioInfo) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type TextInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag            string  `protobuf:"bytes,1,opt,name=Tag,proto3" json:"Tag,omitempty"`
	Content        string  `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	StartTimeStamp float32 `protobuf:"fixed32,3,opt,name=StartTimeStamp,proto3" json:"StartTimeStamp,omitempty"`
	EndTimeStamp   float32 `protobuf:"fixed32,4,opt,name=EndTimeStamp,proto3" json:"EndTimeStamp,omitempty"`
}

func (x *TextInfo) Reset() {
	*x = TextInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextInfo) ProtoMessage() {}

func (x *TextInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextInfo.ProtoReflect.Descriptor instead.
func (*TextInfo) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{1}
}

func (x *TextInfo) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *TextInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TextInfo) GetStartTimeStamp() float32 {
	if x != nil {
		return x.StartTimeStamp
	}
	return 0
}

func (x *TextInfo) GetEndTimeStamp() float32 {
	if x != nil {
		return x.EndTimeStamp
	}
	return 0
}

type AppearFrameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rect       *apicommon.Rect `protobuf:"bytes,1,opt,name=Rect,proto3" json:"Rect,omitempty"`
	FrameIndex string          `protobuf:"bytes,2,opt,name=FrameIndex,proto3" json:"FrameIndex,omitempty"` // 目标出现的帧号
	Quality    float32         `protobuf:"fixed32,3,opt,name=Quality,proto3" json:"Quality,omitempty"`     //质量总分
}

func (x *AppearFrameInfo) Reset() {
	*x = AppearFrameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearFrameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearFrameInfo) ProtoMessage() {}

func (x *AppearFrameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearFrameInfo.ProtoReflect.Descriptor instead.
func (*AppearFrameInfo) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{2}
}

func (x *AppearFrameInfo) GetRect() *apicommon.Rect {
	if x != nil {
		return x.Rect
	}
	return nil
}

func (x *AppearFrameInfo) GetFrameIndex() string {
	if x != nil {
		return x.FrameIndex
	}
	return ""
}

func (x *AppearFrameInfo) GetQuality() float32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

type AppearTimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeStamp       float32            `protobuf:"fixed32,1,opt,name=StartTimeStamp,proto3" json:"StartTimeStamp,omitempty"`
	EndTimeStamp         float32            `protobuf:"fixed32,2,opt,name=EndTimeStamp,proto3" json:"EndTimeStamp,omitempty"`
	ImageMediaId         string             `protobuf:"bytes,3,opt,name=ImageMediaId,proto3" json:"ImageMediaId,omitempty"`
	Confidence           float32            `protobuf:"fixed32,4,opt,name=Confidence,proto3" json:"Confidence,omitempty"`
	StartFrameIndex      string             `protobuf:"bytes,5,opt,name=StartFrameIndex,proto3" json:"StartFrameIndex,omitempty"`
	EndFrameIndex        string             `protobuf:"bytes,6,opt,name=EndFrameIndex,proto3" json:"EndFrameIndex,omitempty"`
	DetailFrames         []*AppearFrameInfo `protobuf:"bytes,7,rep,name=DetailFrames,proto3" json:"DetailFrames,omitempty"` //目标出现的位置信息
	Expression           int32              `protobuf:"varint,8,opt,name=Expression,proto3" json:"Expression,omitempty"`
	ExpressionConfidence float32            `protobuf:"fixed32,9,opt,name=ExpressionConfidence,proto3" json:"ExpressionConfidence,omitempty"`
}

func (x *AppearTimeInfo) Reset() {
	*x = AppearTimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearTimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearTimeInfo) ProtoMessage() {}

func (x *AppearTimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearTimeInfo.ProtoReflect.Descriptor instead.
func (*AppearTimeInfo) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{3}
}

func (x *AppearTimeInfo) GetStartTimeStamp() float32 {
	if x != nil {
		return x.StartTimeStamp
	}
	return 0
}

func (x *AppearTimeInfo) GetEndTimeStamp() float32 {
	if x != nil {
		return x.EndTimeStamp
	}
	return 0
}

func (x *AppearTimeInfo) GetImageMediaId() string {
	if x != nil {
		return x.ImageMediaId
	}
	return ""
}

func (x *AppearTimeInfo) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *AppearTimeInfo) GetStartFrameIndex() string {
	if x != nil {
		return x.StartFrameIndex
	}
	return ""
}

func (x *AppearTimeInfo) GetEndFrameIndex() string {
	if x != nil {
		return x.EndFrameIndex
	}
	return ""
}

func (x *AppearTimeInfo) GetDetailFrames() []*AppearFrameInfo {
	if x != nil {
		return x.DetailFrames
	}
	return nil
}

func (x *AppearTimeInfo) GetExpression() int32 {
	if x != nil {
		return x.Expression
	}
	return 0
}

func (x *AppearTimeInfo) GetExpressionConfidence() float32 {
	if x != nil {
		return x.ExpressionConfidence
	}
	return 0
}

type AppearPostionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index         int32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	StartPosition int32 `protobuf:"varint,2,opt,name=StartPosition,proto3" json:"StartPosition,omitempty"`
	EndPosition   int32 `protobuf:"varint,3,opt,name=EndPosition,proto3" json:"EndPosition,omitempty"`
}

func (x *AppearPostionInfo) Reset() {
	*x = AppearPostionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearPostionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearPostionInfo) ProtoMessage() {}

func (x *AppearPostionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearPostionInfo.ProtoReflect.Descriptor instead.
func (*AppearPostionInfo) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{4}
}

func (x *AppearPostionInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AppearPostionInfo) GetStartPosition() int32 {
	if x != nil {
		return x.StartPosition
	}
	return 0
}

func (x *AppearPostionInfo) GetEndPosition() int32 {
	if x != nil {
		return x.EndPosition
	}
	return 0
}

type PersonTagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string               `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Job             string               `protobuf:"bytes,2,opt,name=Job,proto3" json:"Job,omitempty"`
	FirstAppearTab  string               `protobuf:"bytes,3,opt,name=FirstAppearTab,proto3" json:"FirstAppearTab,omitempty"`
	AudioAppearSet  []*AppearPostionInfo `protobuf:"bytes,4,rep,name=AudioAppearSet,proto3" json:"AudioAppearSet,omitempty"`
	TextAppearSet   []*AppearPostionInfo `protobuf:"bytes,5,rep,name=TextAppearSet,proto3" json:"TextAppearSet,omitempty"`
	VisionAppearSet []*AppearTimeInfo    `protobuf:"bytes,6,rep,name=VisionAppearSet,proto3" json:"VisionAppearSet,omitempty"`
	AppearRect      *apicommon.Rect      `protobuf:"bytes,7,opt,name=AppearRect,proto3" json:"AppearRect,omitempty"`
	Sensitive       int32                `protobuf:"varint,8,opt,name=Sensitive,proto3" json:"Sensitive,omitempty"`
	PersonID        string               `protobuf:"bytes,9,opt,name=PersonID,proto3" json:"PersonID,omitempty"`
}

func (x *PersonTagInfo) Reset() {
	*x = PersonTagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonTagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonTagInfo) ProtoMessage() {}

func (x *PersonTagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonTagInfo.ProtoReflect.Descriptor instead.
func (*PersonTagInfo) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{5}
}

func (x *PersonTagInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PersonTagInfo) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *PersonTagInfo) GetFirstAppearTab() string {
	if x != nil {
		return x.FirstAppearTab
	}
	return ""
}

func (x *PersonTagInfo) GetAudioAppearSet() []*AppearPostionInfo {
	if x != nil {
		return x.AudioAppearSet
	}
	return nil
}

func (x *PersonTagInfo) GetTextAppearSet() []*AppearPostionInfo {
	if x != nil {
		return x.TextAppearSet
	}
	return nil
}

func (x *PersonTagInfo) GetVisionAppearSet() []*AppearTimeInfo {
	if x != nil {
		return x.VisionAppearSet
	}
	return nil
}

func (x *PersonTagInfo) GetAppearRect() *apicommon.Rect {
	if x != nil {
		return x.AppearRect
	}
	return nil
}

func (x *PersonTagInfo) GetSensitive() int32 {
	if x != nil {
		return x.Sensitive
	}
	return 0
}

func (x *PersonTagInfo) GetPersonID() string {
	if x != nil {
		return x.PersonID
	}
	return ""
}

type L1ClassifiedPersonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassifyName              string                    `protobuf:"bytes,1,opt,name=ClassifyName,proto3" json:"ClassifyName,omitempty"`
	L2ClassifiedPersonInfoSet []*L2ClassifiedPersonInfo `protobuf:"bytes,2,rep,name=L2ClassifiedPersonInfoSet,proto3" json:"L2ClassifiedPersonInfoSet,omitempty"`
}

func (x *L1ClassifiedPersonInfo) Reset() {
	*x = L1ClassifiedPersonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L1ClassifiedPersonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L1ClassifiedPersonInfo) ProtoMessage() {}

func (x *L1ClassifiedPersonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L1ClassifiedPersonInfo.ProtoReflect.Descriptor instead.
func (*L1ClassifiedPersonInfo) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{6}
}

func (x *L1ClassifiedPersonInfo) GetClassifyName() string {
	if x != nil {
		return x.ClassifyName
	}
	return ""
}

func (x *L1ClassifiedPersonInfo) GetL2ClassifiedPersonInfoSet() []*L2ClassifiedPersonInfo {
	if x != nil {
		return x.L2ClassifiedPersonInfoSet
	}
	return nil
}

type L2ClassifiedPersonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassifyName string           `protobuf:"bytes,1,opt,name=ClassifyName,proto3" json:"ClassifyName,omitempty"`
	PersonSet    []*PersonTagInfo `protobuf:"bytes,2,rep,name=PersonSet,proto3" json:"PersonSet,omitempty"`
}

func (x *L2ClassifiedPersonInfo) Reset() {
	*x = L2ClassifiedPersonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2ClassifiedPersonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2ClassifiedPersonInfo) ProtoMessage() {}

func (x *L2ClassifiedPersonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2ClassifiedPersonInfo.ProtoReflect.Descriptor instead.
func (*L2ClassifiedPersonInfo) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{7}
}

func (x *L2ClassifiedPersonInfo) GetClassifyName() string {
	if x != nil {
		return x.ClassifyName
	}
	return ""
}

func (x *L2ClassifiedPersonInfo) GetPersonSet() []*PersonTagInfo {
	if x != nil {
		return x.PersonSet
	}
	return nil
}

type UnknownPerson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VisionAppearSet   []*AppearTimeInfo `protobuf:"bytes,1,rep,name=VisionAppearSet,proto3" json:"VisionAppearSet,omitempty"`
	PutLibraryAllowed bool              `protobuf:"varint,2,opt,name=PutLibraryAllowed,proto3" json:"PutLibraryAllowed,omitempty"`
	AppearRect        *apicommon.Rect   `protobuf:"bytes,3,opt,name=AppearRect,proto3" json:"AppearRect,omitempty"`
	Sensitive         int32             `protobuf:"varint,4,opt,name=Sensitive,proto3" json:"Sensitive,omitempty"`
	UnknownPersonID   string            `protobuf:"bytes,5,opt,name=UnknownPersonID,proto3" json:"UnknownPersonID,omitempty"`
}

func (x *UnknownPerson) Reset() {
	*x = UnknownPerson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnknownPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownPerson) ProtoMessage() {}

func (x *UnknownPerson) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownPerson.ProtoReflect.Descriptor instead.
func (*UnknownPerson) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{8}
}

func (x *UnknownPerson) GetVisionAppearSet() []*AppearTimeInfo {
	if x != nil {
		return x.VisionAppearSet
	}
	return nil
}

func (x *UnknownPerson) GetPutLibraryAllowed() bool {
	if x != nil {
		return x.PutLibraryAllowed
	}
	return false
}

func (x *UnknownPerson) GetAppearRect() *apicommon.Rect {
	if x != nil {
		return x.AppearRect
	}
	return nil
}

func (x *UnknownPerson) GetSensitive() int32 {
	if x != nil {
		return x.Sensitive
	}
	return 0
}

func (x *UnknownPerson) GetUnknownPersonID() string {
	if x != nil {
		return x.UnknownPersonID
	}
	return ""
}

type MultiLevelTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagName         string               `protobuf:"bytes,1,opt,name=TagName,proto3" json:"TagName,omitempty"`
	SubTagSet       []*MultiLevelTag     `protobuf:"bytes,2,rep,name=SubTagSet,proto3" json:"SubTagSet,omitempty"`
	Level           int32                `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
	FirstAppearTab  string               `protobuf:"bytes,4,opt,name=FirstAppearTab,proto3" json:"FirstAppearTab,omitempty"`
	AudioAppearSet  []*AppearPostionInfo `protobuf:"bytes,5,rep,name=AudioAppearSet,proto3" json:"AudioAppearSet,omitempty"`
	TextAppearSet   []*AppearPostionInfo `protobuf:"bytes,6,rep,name=TextAppearSet,proto3" json:"TextAppearSet,omitempty"`
	VisionAppearSet []*AppearTimeInfo    `protobuf:"bytes,7,rep,name=VisionAppearSet,proto3" json:"VisionAppearSet,omitempty"`
	Score           float64              `protobuf:"fixed64,8,opt,name=Score,proto3" json:"Score,omitempty"`
	IsSensitive     bool                 `protobuf:"varint,9,opt,name=IsSensitive,proto3" json:"IsSensitive,omitempty"`
	Rank            int32                `protobuf:"varint,10,opt,name=Rank,proto3" json:"Rank,omitempty"`
}

func (x *MultiLevelTag) Reset() {
	*x = MultiLevelTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLevelTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLevelTag) ProtoMessage() {}

func (x *MultiLevelTag) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLevelTag.ProtoReflect.Descriptor instead.
func (*MultiLevelTag) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{9}
}

func (x *MultiLevelTag) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *MultiLevelTag) GetSubTagSet() []*MultiLevelTag {
	if x != nil {
		return x.SubTagSet
	}
	return nil
}

func (x *MultiLevelTag) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MultiLevelTag) GetFirstAppearTab() string {
	if x != nil {
		return x.FirstAppearTab
	}
	return ""
}

func (x *MultiLevelTag) GetAudioAppearSet() []*AppearPostionInfo {
	if x != nil {
		return x.AudioAppearSet
	}
	return nil
}

func (x *MultiLevelTag) GetTextAppearSet() []*AppearPostionInfo {
	if x != nil {
		return x.TextAppearSet
	}
	return nil
}

func (x *MultiLevelTag) GetVisionAppearSet() []*AppearTimeInfo {
	if x != nil {
		return x.VisionAppearSet
	}
	return nil
}

func (x *MultiLevelTag) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MultiLevelTag) GetIsSensitive() bool {
	if x != nil {
		return x.IsSensitive
	}
	return false
}

func (x *MultiLevelTag) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type MajorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName                string           `protobuf:"bytes,1,opt,name=EventName,proto3" json:"EventName,omitempty"`
	EventTimeSet             []*MultiLevelTag `protobuf:"bytes,2,rep,name=EventTimeSet,proto3" json:"EventTimeSet,omitempty"`
	EventPlaceSet            []*MultiLevelTag `protobuf:"bytes,3,rep,name=EventPlaceSet,proto3" json:"EventPlaceSet,omitempty"`
	EventOrganizationSet     []*MultiLevelTag `protobuf:"bytes,4,rep,name=EventOrganizationSet,proto3" json:"EventOrganizationSet,omitempty"`
	EventPersonSet           []*PersonTagInfo `protobuf:"bytes,5,rep,name=EventPersonSet,proto3" json:"EventPersonSet,omitempty"`
	Event                    *MultiLevelTag   `protobuf:"bytes,6,opt,name=Event,proto3" json:"Event,omitempty"`
	EventVictimPositionSet   []*MultiLevelTag `protobuf:"bytes,7,rep,name=EventVictimPositionSet,proto3" json:"EventVictimPositionSet,omitempty"`
	EventCriminalPositionSet []*MultiLevelTag `protobuf:"bytes,8,rep,name=EventCriminalPositionSet,proto3" json:"EventCriminalPositionSet,omitempty"`
}

func (x *MajorEvent) Reset() {
	*x = MajorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MajorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MajorEvent) ProtoMessage() {}

func (x *MajorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MajorEvent.ProtoReflect.Descriptor instead.
func (*MajorEvent) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{10}
}

func (x *MajorEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *MajorEvent) GetEventTimeSet() []*MultiLevelTag {
	if x != nil {
		return x.EventTimeSet
	}
	return nil
}

func (x *MajorEvent) GetEventPlaceSet() []*MultiLevelTag {
	if x != nil {
		return x.EventPlaceSet
	}
	return nil
}

func (x *MajorEvent) GetEventOrganizationSet() []*MultiLevelTag {
	if x != nil {
		return x.EventOrganizationSet
	}
	return nil
}

func (x *MajorEvent) GetEventPersonSet() []*PersonTagInfo {
	if x != nil {
		return x.EventPersonSet
	}
	return nil
}

func (x *MajorEvent) GetEvent() *MultiLevelTag {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *MajorEvent) GetEventVictimPositionSet() []*MultiLevelTag {
	if x != nil {
		return x.EventVictimPositionSet
	}
	return nil
}

func (x *MajorEvent) GetEventCriminalPositionSet() []*MultiLevelTag {
	if x != nil {
		return x.EventCriminalPositionSet
	}
	return nil
}

type AILensInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                    string                    `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	ImageMediaId            string                    `protobuf:"bytes,2,opt,name=ImageMediaId,proto3" json:"ImageMediaId,omitempty"`
	StartTimeStamp          float32                   `protobuf:"fixed32,3,opt,name=StartTimeStamp,proto3" json:"StartTimeStamp,omitempty"`
	EndTimeStamp            float32                   `protobuf:"fixed32,4,opt,name=EndTimeStamp,proto3" json:"EndTimeStamp,omitempty"`
	ClassifiedPersonInfoSet []*L1ClassifiedPersonInfo `protobuf:"bytes,5,rep,name=ClassifiedPersonInfoSet,proto3" json:"ClassifiedPersonInfoSet,omitempty"`
	TextTagSet              []*MultiLevelTag          `protobuf:"bytes,6,rep,name=TextTagSet,proto3" json:"TextTagSet,omitempty"`
	FrameTagSet             []*MultiLevelTag          `protobuf:"bytes,7,rep,name=FrameTagSet,proto3" json:"FrameTagSet,omitempty"`
	Scenery                 string                    `protobuf:"bytes,8,opt,name=Scenery,proto3" json:"Scenery,omitempty"`
	FilmingAngle            string                    `protobuf:"bytes,9,opt,name=FilmingAngle,proto3" json:"FilmingAngle,omitempty"`
	ShootingMode            string                    `protobuf:"bytes,10,opt,name=ShootingMode,proto3" json:"ShootingMode,omitempty"`
	AuxiliaryTagSet         []string                  `protobuf:"bytes,11,rep,name=AuxiliaryTagSet,proto3" json:"AuxiliaryTagSet,omitempty"`
	ID                      string                    `protobuf:"bytes,12,opt,name=ID,proto3" json:"ID,omitempty"`
	Title                   string                    `protobuf:"bytes,13,opt,name=Title,proto3" json:"Title,omitempty"`
	UnknownPersonSet        []*UnknownPerson          `protobuf:"bytes,14,rep,name=UnknownPersonSet,proto3" json:"UnknownPersonSet,omitempty"`
	SceneryShot             string                    `protobuf:"bytes,15,opt,name=SceneryShot,proto3" json:"SceneryShot,omitempty"`
	ActualSound             bool                      `protobuf:"varint,16,opt,name=ActualSound,proto3" json:"ActualSound,omitempty"`
}

func (x *AILensInfo) Reset() {
	*x = AILensInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AILensInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AILensInfo) ProtoMessage() {}

func (x *AILensInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AILensInfo.ProtoReflect.Descriptor instead.
func (*AILensInfo) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{11}
}

func (x *AILensInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AILensInfo) GetImageMediaId() string {
	if x != nil {
		return x.ImageMediaId
	}
	return ""
}

func (x *AILensInfo) GetStartTimeStamp() float32 {
	if x != nil {
		return x.StartTimeStamp
	}
	return 0
}

func (x *AILensInfo) GetEndTimeStamp() float32 {
	if x != nil {
		return x.EndTimeStamp
	}
	return 0
}

func (x *AILensInfo) GetClassifiedPersonInfoSet() []*L1ClassifiedPersonInfo {
	if x != nil {
		return x.ClassifiedPersonInfoSet
	}
	return nil
}

func (x *AILensInfo) GetTextTagSet() []*MultiLevelTag {
	if x != nil {
		return x.TextTagSet
	}
	return nil
}

func (x *AILensInfo) GetFrameTagSet() []*MultiLevelTag {
	if x != nil {
		return x.FrameTagSet
	}
	return nil
}

func (x *AILensInfo) GetScenery() string {
	if x != nil {
		return x.Scenery
	}
	return ""
}

func (x *AILensInfo) GetFilmingAngle() string {
	if x != nil {
		return x.FilmingAngle
	}
	return ""
}

func (x *AILensInfo) GetShootingMode() string {
	if x != nil {
		return x.ShootingMode
	}
	return ""
}

func (x *AILensInfo) GetAuxiliaryTagSet() []string {
	if x != nil {
		return x.AuxiliaryTagSet
	}
	return nil
}

func (x *AILensInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AILensInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AILensInfo) GetUnknownPersonSet() []*UnknownPerson {
	if x != nil {
		return x.UnknownPersonSet
	}
	return nil
}

func (x *AILensInfo) GetSceneryShot() string {
	if x != nil {
		return x.SceneryShot
	}
	return ""
}

func (x *AILensInfo) GetActualSound() bool {
	if x != nil {
		return x.ActualSound
	}
	return false
}

type AISceneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                    string                    `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	ImageMediaId            string                    `protobuf:"bytes,2,opt,name=ImageMediaId,proto3" json:"ImageMediaId,omitempty"`
	StartTimeStamp          float32                   `protobuf:"fixed32,3,opt,name=StartTimeStamp,proto3" json:"StartTimeStamp,omitempty"`
	EndTimeStamp            float32                   `protobuf:"fixed32,4,opt,name=EndTimeStamp,proto3" json:"EndTimeStamp,omitempty"`
	ClassifiedPersonInfoSet []*L1ClassifiedPersonInfo `protobuf:"bytes,5,rep,name=ClassifiedPersonInfoSet,proto3" json:"ClassifiedPersonInfoSet,omitempty"`
	TextTagSet              []*MultiLevelTag          `protobuf:"bytes,6,rep,name=TextTagSet,proto3" json:"TextTagSet,omitempty"`
	FrameTagSet             []*MultiLevelTag          `protobuf:"bytes,7,rep,name=FrameTagSet,proto3" json:"FrameTagSet,omitempty"`
	FineGrained             string                    `protobuf:"bytes,8,opt,name=FineGrained,proto3" json:"FineGrained,omitempty"`
	LensIndexSet            []int32                   `protobuf:"varint,9,rep,packed,name=LensIndexSet,proto3" json:"LensIndexSet,omitempty"`
	ID                      string                    `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	UnknownPersonSet        []*UnknownPerson          `protobuf:"bytes,11,rep,name=UnknownPersonSet,proto3" json:"UnknownPersonSet,omitempty"`
	SuspiciousPersonSet     []*L1ClassifiedPersonInfo `protobuf:"bytes,12,rep,name=SuspiciousPersonSet,proto3" json:"SuspiciousPersonSet,omitempty"`
}

func (x *AISceneInfo) Reset() {
	*x = AISceneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AISceneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AISceneInfo) ProtoMessage() {}

func (x *AISceneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AISceneInfo.ProtoReflect.Descriptor instead.
func (*AISceneInfo) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{12}
}

func (x *AISceneInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AISceneInfo) GetImageMediaId() string {
	if x != nil {
		return x.ImageMediaId
	}
	return ""
}

func (x *AISceneInfo) GetStartTimeStamp() float32 {
	if x != nil {
		return x.StartTimeStamp
	}
	return 0
}

func (x *AISceneInfo) GetEndTimeStamp() float32 {
	if x != nil {
		return x.EndTimeStamp
	}
	return 0
}

func (x *AISceneInfo) GetClassifiedPersonInfoSet() []*L1ClassifiedPersonInfo {
	if x != nil {
		return x.ClassifiedPersonInfoSet
	}
	return nil
}

func (x *AISceneInfo) GetTextTagSet() []*MultiLevelTag {
	if x != nil {
		return x.TextTagSet
	}
	return nil
}

func (x *AISceneInfo) GetFrameTagSet() []*MultiLevelTag {
	if x != nil {
		return x.FrameTagSet
	}
	return nil
}

func (x *AISceneInfo) GetFineGrained() string {
	if x != nil {
		return x.FineGrained
	}
	return ""
}

func (x *AISceneInfo) GetLensIndexSet() []int32 {
	if x != nil {
		return x.LensIndexSet
	}
	return nil
}

func (x *AISceneInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AISceneInfo) GetUnknownPersonSet() []*UnknownPerson {
	if x != nil {
		return x.UnknownPersonSet
	}
	return nil
}

func (x *AISceneInfo) GetSuspiciousPersonSet() []*L1ClassifiedPersonInfo {
	if x != nil {
		return x.SuspiciousPersonSet
	}
	return nil
}

type AISnippetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                    string                    `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	ImageMediaId            string                    `protobuf:"bytes,3,opt,name=ImageMediaId,proto3" json:"ImageMediaId,omitempty"`
	StartTimeStamp          float32                   `protobuf:"fixed32,4,opt,name=StartTimeStamp,proto3" json:"StartTimeStamp,omitempty"`
	EndTimeStamp            float32                   `protobuf:"fixed32,5,opt,name=EndTimeStamp,proto3" json:"EndTimeStamp,omitempty"`
	TitleSet                []string                  `protobuf:"bytes,6,rep,name=TitleSet,proto3" json:"TitleSet,omitempty"`
	SummarySet              []string                  `protobuf:"bytes,7,rep,name=SummarySet,proto3" json:"SummarySet,omitempty"`
	HostInfoSet             []*PersonTagInfo          `protobuf:"bytes,8,rep,name=HostInfoSet,proto3" json:"HostInfoSet,omitempty"`
	ReporterInfoSet         []*PersonTagInfo          `protobuf:"bytes,9,rep,name=ReporterInfoSet,proto3" json:"ReporterInfoSet,omitempty"`
	ClassifiedPersonInfoSet []*L1ClassifiedPersonInfo `protobuf:"bytes,10,rep,name=ClassifiedPersonInfoSet,proto3" json:"ClassifiedPersonInfoSet,omitempty"`
	TextTagSet              []*MultiLevelTag          `protobuf:"bytes,11,rep,name=TextTagSet,proto3" json:"TextTagSet,omitempty"`
	FrameTagSet             []*MultiLevelTag          `protobuf:"bytes,12,rep,name=FrameTagSet,proto3" json:"FrameTagSet,omitempty"`
	SummaryTagSet           []string                  `protobuf:"bytes,13,rep,name=SummaryTagSet,proto3" json:"SummaryTagSet,omitempty"`
	SceneIndexSet           []int32                   `protobuf:"varint,14,rep,packed,name=SceneIndexSet,proto3" json:"SceneIndexSet,omitempty"`
	LensIndexSet            []int32                   `protobuf:"varint,15,rep,packed,name=LensIndexSet,proto3" json:"LensIndexSet,omitempty"`
	ID                      string                    `protobuf:"bytes,16,opt,name=ID,proto3" json:"ID,omitempty"`
	MajorEventSet           []*MajorEvent             `protobuf:"bytes,17,rep,name=MajorEventSet,proto3" json:"MajorEventSet,omitempty"`
	ShortSummarySet         []string                  `protobuf:"bytes,18,rep,name=ShortSummarySet,proto3" json:"ShortSummarySet,omitempty"`
	UnknownPersonSet        []*UnknownPerson          `protobuf:"bytes,19,rep,name=UnknownPersonSet,proto3" json:"UnknownPersonSet,omitempty"`
	SuspiciousPersonSet     []*L1ClassifiedPersonInfo `protobuf:"bytes,20,rep,name=SuspiciousPersonSet,proto3" json:"SuspiciousPersonSet,omitempty"`
}

func (x *AISnippetInfo) Reset() {
	*x = AISnippetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AISnippetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AISnippetInfo) ProtoMessage() {}

func (x *AISnippetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AISnippetInfo.ProtoReflect.Descriptor instead.
func (*AISnippetInfo) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{13}
}

func (x *AISnippetInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AISnippetInfo) GetImageMediaId() string {
	if x != nil {
		return x.ImageMediaId
	}
	return ""
}

func (x *AISnippetInfo) GetStartTimeStamp() float32 {
	if x != nil {
		return x.StartTimeStamp
	}
	return 0
}

func (x *AISnippetInfo) GetEndTimeStamp() float32 {
	if x != nil {
		return x.EndTimeStamp
	}
	return 0
}

func (x *AISnippetInfo) GetTitleSet() []string {
	if x != nil {
		return x.TitleSet
	}
	return nil
}

func (x *AISnippetInfo) GetSummarySet() []string {
	if x != nil {
		return x.SummarySet
	}
	return nil
}

func (x *AISnippetInfo) GetHostInfoSet() []*PersonTagInfo {
	if x != nil {
		return x.HostInfoSet
	}
	return nil
}

func (x *AISnippetInfo) GetReporterInfoSet() []*PersonTagInfo {
	if x != nil {
		return x.ReporterInfoSet
	}
	return nil
}

func (x *AISnippetInfo) GetClassifiedPersonInfoSet() []*L1ClassifiedPersonInfo {
	if x != nil {
		return x.ClassifiedPersonInfoSet
	}
	return nil
}

func (x *AISnippetInfo) GetTextTagSet() []*MultiLevelTag {
	if x != nil {
		return x.TextTagSet
	}
	return nil
}

func (x *AISnippetInfo) GetFrameTagSet() []*MultiLevelTag {
	if x != nil {
		return x.FrameTagSet
	}
	return nil
}

func (x *AISnippetInfo) GetSummaryTagSet() []string {
	if x != nil {
		return x.SummaryTagSet
	}
	return nil
}

func (x *AISnippetInfo) GetSceneIndexSet() []int32 {
	if x != nil {
		return x.SceneIndexSet
	}
	return nil
}

func (x *AISnippetInfo) GetLensIndexSet() []int32 {
	if x != nil {
		return x.LensIndexSet
	}
	return nil
}

func (x *AISnippetInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AISnippetInfo) GetMajorEventSet() []*MajorEvent {
	if x != nil {
		return x.MajorEventSet
	}
	return nil
}

func (x *AISnippetInfo) GetShortSummarySet() []string {
	if x != nil {
		return x.ShortSummarySet
	}
	return nil
}

func (x *AISnippetInfo) GetUnknownPersonSet() []*UnknownPerson {
	if x != nil {
		return x.UnknownPersonSet
	}
	return nil
}

func (x *AISnippetInfo) GetSuspiciousPersonSet() []*L1ClassifiedPersonInfo {
	if x != nil {
		return x.SuspiciousPersonSet
	}
	return nil
}

type AudioCaptionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeStamp float32 `protobuf:"fixed32,1,opt,name=StartTimeStamp,proto3" json:"StartTimeStamp,omitempty"`
	EndTimeStamp   float32 `protobuf:"fixed32,2,opt,name=EndTimeStamp,proto3" json:"EndTimeStamp,omitempty"`
	Content        string  `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *AudioCaptionInfo) Reset() {
	*x = AudioCaptionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioCaptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioCaptionInfo) ProtoMessage() {}

func (x *AudioCaptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioCaptionInfo.ProtoReflect.Descriptor instead.
func (*AudioCaptionInfo) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{14}
}

func (x *AudioCaptionInfo) GetStartTimeStamp() float32 {
	if x != nil {
		return x.StartTimeStamp
	}
	return 0
}

func (x *AudioCaptionInfo) GetEndTimeStamp() float32 {
	if x != nil {
		return x.EndTimeStamp
	}
	return 0
}

func (x *AudioCaptionInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ShowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                    apicommon.CategoryTagType `protobuf:"varint,1,opt,name=Type,proto3,enum=trpc.media.common.CategoryTagType" json:"Type,omitempty"`
	Date                    string                    `protobuf:"bytes,2,opt,name=Date,proto3" json:"Date,omitempty"`
	Logo                    string                    `protobuf:"bytes,3,opt,name=Logo,proto3" json:"Logo,omitempty"`
	Column                  string                    `protobuf:"bytes,4,opt,name=Column,proto3" json:"Column,omitempty"`
	Source                  string                    `protobuf:"bytes,5,opt,name=Source,proto3" json:"Source,omitempty"`
	ImageMediaId            string                    `protobuf:"bytes,6,opt,name=ImageMediaId,proto3" json:"ImageMediaId,omitempty"`
	SummarySet              []string                  `protobuf:"bytes,7,rep,name=SummarySet,proto3" json:"SummarySet,omitempty"`
	TitleSet                []string                  `protobuf:"bytes,8,rep,name=TitleSet,proto3" json:"TitleSet,omitempty"`
	AudioInfoSet            []*AudioInfo              `protobuf:"bytes,9,rep,name=AudioInfoSet,proto3" json:"AudioInfoSet,omitempty"`
	TextInfoSet             []*TextInfo               `protobuf:"bytes,10,rep,name=TextInfoSet,proto3" json:"TextInfoSet,omitempty"`
	HostInfoSet             []*PersonTagInfo          `protobuf:"bytes,11,rep,name=HostInfoSet,proto3" json:"HostInfoSet,omitempty"`
	ReporterInfoSet         []*PersonTagInfo          `protobuf:"bytes,12,rep,name=ReporterInfoSet,proto3" json:"ReporterInfoSet,omitempty"`
	ClassifiedPersonInfoSet []*L1ClassifiedPersonInfo `protobuf:"bytes,13,rep,name=ClassifiedPersonInfoSet,proto3" json:"ClassifiedPersonInfoSet,omitempty"`
	TextTagSet              []*MultiLevelTag          `protobuf:"bytes,14,rep,name=TextTagSet,proto3" json:"TextTagSet,omitempty"`
	FrameTagSet             []*MultiLevelTag          `protobuf:"bytes,15,rep,name=FrameTagSet,proto3" json:"FrameTagSet,omitempty"`
	MediaClassifierSet      []string                  `protobuf:"bytes,17,rep,name=MediaClassifierSet,proto3" json:"MediaClassifierSet,omitempty"`
	SummaryTagSet           []string                  `protobuf:"bytes,18,rep,name=SummaryTagSet,proto3" json:"SummaryTagSet,omitempty"`
	UnknownPersonSet        []*UnknownPerson          `protobuf:"bytes,19,rep,name=UnknownPersonSet,proto3" json:"UnknownPersonSet,omitempty"`
	AudioCaptionSet         []*AudioCaptionInfo       `protobuf:"bytes,20,rep,name=AudioCaptionSet,proto3" json:"AudioCaptionSet,omitempty"`
	SymbolInfoSet           []*SymbolInfo             `protobuf:"bytes,21,rep,name=SymbolInfoSet,proto3" json:"SymbolInfoSet,omitempty"` //标识检测信息集
	SuspiciousPersonSet     []*L1ClassifiedPersonInfo `protobuf:"bytes,22,rep,name=SuspiciousPersonSet,proto3" json:"SuspiciousPersonSet,omitempty"`
}

func (x *ShowInfo) Reset() {
	*x = ShowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowInfo) ProtoMessage() {}

func (x *ShowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowInfo.ProtoReflect.Descriptor instead.
func (*ShowInfo) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{15}
}

func (x *ShowInfo) GetType() apicommon.CategoryTagType {
	if x != nil {
		return x.Type
	}
	return apicommon.CategoryTagType_CATEGORY_TAG_TYPE_OTHER
}

func (x *ShowInfo) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ShowInfo) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ShowInfo) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *ShowInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ShowInfo) GetImageMediaId() string {
	if x != nil {
		return x.ImageMediaId
	}
	return ""
}

func (x *ShowInfo) GetSummarySet() []string {
	if x != nil {
		return x.SummarySet
	}
	return nil
}

func (x *ShowInfo) GetTitleSet() []string {
	if x != nil {
		return x.TitleSet
	}
	return nil
}

func (x *ShowInfo) GetAudioInfoSet() []*AudioInfo {
	if x != nil {
		return x.AudioInfoSet
	}
	return nil
}

func (x *ShowInfo) GetTextInfoSet() []*TextInfo {
	if x != nil {
		return x.TextInfoSet
	}
	return nil
}

func (x *ShowInfo) GetHostInfoSet() []*PersonTagInfo {
	if x != nil {
		return x.HostInfoSet
	}
	return nil
}

func (x *ShowInfo) GetReporterInfoSet() []*PersonTagInfo {
	if x != nil {
		return x.ReporterInfoSet
	}
	return nil
}

func (x *ShowInfo) GetClassifiedPersonInfoSet() []*L1ClassifiedPersonInfo {
	if x != nil {
		return x.ClassifiedPersonInfoSet
	}
	return nil
}

func (x *ShowInfo) GetTextTagSet() []*MultiLevelTag {
	if x != nil {
		return x.TextTagSet
	}
	return nil
}

func (x *ShowInfo) GetFrameTagSet() []*MultiLevelTag {
	if x != nil {
		return x.FrameTagSet
	}
	return nil
}

func (x *ShowInfo) GetMediaClassifierSet() []string {
	if x != nil {
		return x.MediaClassifierSet
	}
	return nil
}

func (x *ShowInfo) GetSummaryTagSet() []string {
	if x != nil {
		return x.SummaryTagSet
	}
	return nil
}

func (x *ShowInfo) GetUnknownPersonSet() []*UnknownPerson {
	if x != nil {
		return x.UnknownPersonSet
	}
	return nil
}

func (x *ShowInfo) GetAudioCaptionSet() []*AudioCaptionInfo {
	if x != nil {
		return x.AudioCaptionSet
	}
	return nil
}

func (x *ShowInfo) GetSymbolInfoSet() []*SymbolInfo {
	if x != nil {
		return x.SymbolInfoSet
	}
	return nil
}

func (x *ShowInfo) GetSuspiciousPersonSet() []*L1ClassifiedPersonInfo {
	if x != nil {
		return x.SuspiciousPersonSet
	}
	return nil
}

type ImageOcr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content    string          `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	AppearRect *apicommon.Rect `protobuf:"bytes,2,opt,name=AppearRect,proto3" json:"AppearRect,omitempty"`
}

func (x *ImageOcr) Reset() {
	*x = ImageOcr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageOcr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageOcr) ProtoMessage() {}

func (x *ImageOcr) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageOcr.ProtoReflect.Descriptor instead.
func (*ImageOcr) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{16}
}

func (x *ImageOcr) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ImageOcr) GetAppearRect() *apicommon.Rect {
	if x != nil {
		return x.AppearRect
	}
	return nil
}

type ImageLogo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logo       string          `protobuf:"bytes,1,opt,name=Logo,proto3" json:"Logo,omitempty"`
	AppearRect *apicommon.Rect `protobuf:"bytes,2,opt,name=AppearRect,proto3" json:"AppearRect,omitempty"`
}

func (x *ImageLogo) Reset() {
	*x = ImageLogo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageLogo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageLogo) ProtoMessage() {}

func (x *ImageLogo) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageLogo.ProtoReflect.Descriptor instead.
func (*ImageLogo) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{17}
}

func (x *ImageLogo) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ImageLogo) GetAppearRect() *apicommon.Rect {
	if x != nil {
		return x.AppearRect
	}
	return nil
}

type AITagTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowInfo *ShowInfo `protobuf:"bytes,1,opt,name=ShowInfo,proto3" json:"ShowInfo,omitempty"`
}

func (x *AITagTaskData) Reset() {
	*x = AITagTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AITagTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AITagTaskData) ProtoMessage() {}

func (x *AITagTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AITagTaskData.ProtoReflect.Descriptor instead.
func (*AITagTaskData) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{18}
}

func (x *AITagTaskData) GetShowInfo() *ShowInfo {
	if x != nil {
		return x.ShowInfo
	}
	return nil
}

type AITagAudioTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioInfoSet    []*AudioInfo        `protobuf:"bytes,1,rep,name=AudioInfoSet,proto3" json:"AudioInfoSet,omitempty"`
	TextTagSet      []*MultiLevelTag    `protobuf:"bytes,2,rep,name=TextTagSet,proto3" json:"TextTagSet,omitempty"`
	AudioCaptionSet []*AudioCaptionInfo `protobuf:"bytes,3,rep,name=AudioCaptionSet,proto3" json:"AudioCaptionSet,omitempty"`
}

func (x *AITagAudioTaskData) Reset() {
	*x = AITagAudioTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AITagAudioTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AITagAudioTaskData) ProtoMessage() {}

func (x *AITagAudioTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AITagAudioTaskData.ProtoReflect.Descriptor instead.
func (*AITagAudioTaskData) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{19}
}

func (x *AITagAudioTaskData) GetAudioInfoSet() []*AudioInfo {
	if x != nil {
		return x.AudioInfoSet
	}
	return nil
}

func (x *AITagAudioTaskData) GetTextTagSet() []*MultiLevelTag {
	if x != nil {
		return x.TextTagSet
	}
	return nil
}

func (x *AITagAudioTaskData) GetAudioCaptionSet() []*AudioCaptionInfo {
	if x != nil {
		return x.AudioCaptionSet
	}
	return nil
}

type AITagTextTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content    string           `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	Summary    string           `protobuf:"bytes,2,opt,name=Summary,proto3" json:"Summary,omitempty"`
	TextTagSet []*MultiLevelTag `protobuf:"bytes,3,rep,name=TextTagSet,proto3" json:"TextTagSet,omitempty"`
}

func (x *AITagTextTaskData) Reset() {
	*x = AITagTextTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AITagTextTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AITagTextTaskData) ProtoMessage() {}

func (x *AITagTextTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AITagTextTaskData.ProtoReflect.Descriptor instead.
func (*AITagTextTaskData) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{20}
}

func (x *AITagTextTaskData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AITagTextTaskData) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *AITagTextTaskData) GetTextTagSet() []*MultiLevelTag {
	if x != nil {
		return x.TextTagSet
	}
	return nil
}

type AITagImageTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OcrSet                  []*ImageOcr               `protobuf:"bytes,1,rep,name=OcrSet,proto3" json:"OcrSet,omitempty"`
	FrameTagSet             []*MultiLevelTag          `protobuf:"bytes,2,rep,name=FrameTagSet,proto3" json:"FrameTagSet,omitempty"`
	ClassifiedPersonInfoSet []*L1ClassifiedPersonInfo `protobuf:"bytes,3,rep,name=ClassifiedPersonInfoSet,proto3" json:"ClassifiedPersonInfoSet,omitempty"`
	TvLogo                  *ImageLogo                `protobuf:"bytes,4,opt,name=TvLogo,proto3" json:"TvLogo,omitempty"`
	SourceLogo              *ImageLogo                `protobuf:"bytes,5,opt,name=SourceLogo,proto3" json:"SourceLogo,omitempty"`
	UnknownPersonSet        []*UnknownPerson          `protobuf:"bytes,6,rep,name=UnknownPersonSet,proto3" json:"UnknownPersonSet,omitempty"`
	SymbolInfoSet           []*SymbolInfo             `protobuf:"bytes,7,rep,name=SymbolInfoSet,proto3" json:"SymbolInfoSet,omitempty"`
	SuspiciousPersonSet     []*L1ClassifiedPersonInfo `protobuf:"bytes,8,rep,name=SuspiciousPersonSet,proto3" json:"SuspiciousPersonSet,omitempty"`
}

func (x *AITagImageTaskData) Reset() {
	*x = AITagImageTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AITagImageTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AITagImageTaskData) ProtoMessage() {}

func (x *AITagImageTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AITagImageTaskData.ProtoReflect.Descriptor instead.
func (*AITagImageTaskData) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{21}
}

func (x *AITagImageTaskData) GetOcrSet() []*ImageOcr {
	if x != nil {
		return x.OcrSet
	}
	return nil
}

func (x *AITagImageTaskData) GetFrameTagSet() []*MultiLevelTag {
	if x != nil {
		return x.FrameTagSet
	}
	return nil
}

func (x *AITagImageTaskData) GetClassifiedPersonInfoSet() []*L1ClassifiedPersonInfo {
	if x != nil {
		return x.ClassifiedPersonInfoSet
	}
	return nil
}

func (x *AITagImageTaskData) GetTvLogo() *ImageLogo {
	if x != nil {
		return x.TvLogo
	}
	return nil
}

func (x *AITagImageTaskData) GetSourceLogo() *ImageLogo {
	if x != nil {
		return x.SourceLogo
	}
	return nil
}

func (x *AITagImageTaskData) GetUnknownPersonSet() []*UnknownPerson {
	if x != nil {
		return x.UnknownPersonSet
	}
	return nil
}

func (x *AITagImageTaskData) GetSymbolInfoSet() []*SymbolInfo {
	if x != nil {
		return x.SymbolInfoSet
	}
	return nil
}

func (x *AITagImageTaskData) GetSuspiciousPersonSet() []*L1ClassifiedPersonInfo {
	if x != nil {
		return x.SuspiciousPersonSet
	}
	return nil
}

type AICatalogTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowInfo       *ShowInfo        `protobuf:"bytes,1,opt,name=ShowInfo,proto3" json:"ShowInfo,omitempty"`
	SnippetInfoSet []*AISnippetInfo `protobuf:"bytes,2,rep,name=SnippetInfoSet,proto3" json:"SnippetInfoSet,omitempty"`
	SceneInfoSet   []*AISceneInfo   `protobuf:"bytes,3,rep,name=SceneInfoSet,proto3" json:"SceneInfoSet,omitempty"`
	LensInfoSet    []*AILensInfo    `protobuf:"bytes,4,rep,name=LensInfoSet,proto3" json:"LensInfoSet,omitempty"`
}

func (x *AICatalogTaskData) Reset() {
	*x = AICatalogTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AICatalogTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AICatalogTaskData) ProtoMessage() {}

func (x *AICatalogTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AICatalogTaskData.ProtoReflect.Descriptor instead.
func (*AICatalogTaskData) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{22}
}

func (x *AICatalogTaskData) GetShowInfo() *ShowInfo {
	if x != nil {
		return x.ShowInfo
	}
	return nil
}

func (x *AICatalogTaskData) GetSnippetInfoSet() []*AISnippetInfo {
	if x != nil {
		return x.SnippetInfoSet
	}
	return nil
}

func (x *AICatalogTaskData) GetSceneInfoSet() []*AISceneInfo {
	if x != nil {
		return x.SceneInfoSet
	}
	return nil
}

func (x *AICatalogTaskData) GetLensInfoSet() []*AILensInfo {
	if x != nil {
		return x.LensInfoSet
	}
	return nil
}

type AICutTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowInfo       *ShowInfo        `protobuf:"bytes,1,opt,name=ShowInfo,proto3" json:"ShowInfo,omitempty"`
	SnippetInfoSet []*AISnippetInfo `protobuf:"bytes,2,rep,name=SnippetInfoSet,proto3" json:"SnippetInfoSet,omitempty"`
}

func (x *AICutTaskData) Reset() {
	*x = AICutTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AICutTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AICutTaskData) ProtoMessage() {}

func (x *AICutTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AICutTaskData.ProtoReflect.Descriptor instead.
func (*AICutTaskData) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{23}
}

func (x *AICutTaskData) GetShowInfo() *ShowInfo {
	if x != nil {
		return x.ShowInfo
	}
	return nil
}

func (x *AICutTaskData) GetSnippetInfoSet() []*AISnippetInfo {
	if x != nil {
		return x.SnippetInfoSet
	}
	return nil
}

type CreateVideoStructureTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId     string `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	TaskName    string `protobuf:"bytes,4,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	CallbackURL string `protobuf:"bytes,5,opt,name=CallbackURL,proto3" json:"CallbackURL,omitempty"`
}

func (x *CreateVideoStructureTaskRequest) Reset() {
	*x = CreateVideoStructureTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVideoStructureTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoStructureTaskRequest) ProtoMessage() {}

func (x *CreateVideoStructureTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoStructureTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateVideoStructureTaskRequest) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{24}
}

func (x *CreateVideoStructureTaskRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *CreateVideoStructureTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *CreateVideoStructureTaskRequest) GetCallbackURL() string {
	if x != nil {
		return x.CallbackURL
	}
	return ""
}

type CreateVideoStructureTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,2,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *CreateVideoStructureTaskResponse) Reset() {
	*x = CreateVideoStructureTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVideoStructureTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoStructureTaskResponse) ProtoMessage() {}

func (x *CreateVideoStructureTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoStructureTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateVideoStructureTaskResponse) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{25}
}

func (x *CreateVideoStructureTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type DescribeAITagTaskDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *DescribeAITagTaskDataRequest) Reset() {
	*x = DescribeAITagTaskDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAITagTaskDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAITagTaskDataRequest) ProtoMessage() {}

func (x *DescribeAITagTaskDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAITagTaskDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeAITagTaskDataRequest) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{26}
}

func (x *DescribeAITagTaskDataRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type DescribeVideoShotCoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId        string  `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	StartTimeStamp float32 `protobuf:"fixed32,2,opt,name=StartTimeStamp,proto3" json:"StartTimeStamp,omitempty"`
	EndTimeStamp   float32 `protobuf:"fixed32,3,opt,name=EndTimeStamp,proto3" json:"EndTimeStamp,omitempty"`
}

func (x *DescribeVideoShotCoverRequest) Reset() {
	*x = DescribeVideoShotCoverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVideoShotCoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVideoShotCoverRequest) ProtoMessage() {}

func (x *DescribeVideoShotCoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVideoShotCoverRequest.ProtoReflect.Descriptor instead.
func (*DescribeVideoShotCoverRequest) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{27}
}

func (x *DescribeVideoShotCoverRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *DescribeVideoShotCoverRequest) GetStartTimeStamp() float32 {
	if x != nil {
		return x.StartTimeStamp
	}
	return 0
}

func (x *DescribeVideoShotCoverRequest) GetEndTimeStamp() float32 {
	if x != nil {
		return x.EndTimeStamp
	}
	return 0
}

type DescribeVideoShotCoverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskInfo *apicommon.TaskInfo `protobuf:"bytes,1,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
	CoverId  string              `protobuf:"bytes,2,opt,name=CoverId,proto3" json:"CoverId,omitempty"`
	CoverUrl string              `protobuf:"bytes,3,opt,name=CoverUrl,proto3" json:"CoverUrl,omitempty"`
}

func (x *DescribeVideoShotCoverResponse) Reset() {
	*x = DescribeVideoShotCoverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVideoShotCoverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVideoShotCoverResponse) ProtoMessage() {}

func (x *DescribeVideoShotCoverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVideoShotCoverResponse.ProtoReflect.Descriptor instead.
func (*DescribeVideoShotCoverResponse) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{28}
}

func (x *DescribeVideoShotCoverResponse) GetTaskInfo() *apicommon.TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

func (x *DescribeVideoShotCoverResponse) GetCoverId() string {
	if x != nil {
		return x.CoverId
	}
	return ""
}

func (x *DescribeVideoShotCoverResponse) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

type DescribeAITagTaskDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskData *AITagTaskData      `protobuf:"bytes,1,opt,name=TaskData,proto3" json:"TaskData,omitempty"`
	TaskInfo *apicommon.TaskInfo `protobuf:"bytes,2,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
}

func (x *DescribeAITagTaskDataResponse) Reset() {
	*x = DescribeAITagTaskDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAITagTaskDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAITagTaskDataResponse) ProtoMessage() {}

func (x *DescribeAITagTaskDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAITagTaskDataResponse.ProtoReflect.Descriptor instead.
func (*DescribeAITagTaskDataResponse) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{29}
}

func (x *DescribeAITagTaskDataResponse) GetTaskData() *AITagTaskData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *DescribeAITagTaskDataResponse) GetTaskInfo() *apicommon.TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

type DescribeAITagImageTaskDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskData *AITagImageTaskData `protobuf:"bytes,1,opt,name=TaskData,proto3" json:"TaskData,omitempty"`
	TaskInfo *apicommon.TaskInfo `protobuf:"bytes,2,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
}

func (x *DescribeAITagImageTaskDataResponse) Reset() {
	*x = DescribeAITagImageTaskDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAITagImageTaskDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAITagImageTaskDataResponse) ProtoMessage() {}

func (x *DescribeAITagImageTaskDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAITagImageTaskDataResponse.ProtoReflect.Descriptor instead.
func (*DescribeAITagImageTaskDataResponse) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{30}
}

func (x *DescribeAITagImageTaskDataResponse) GetTaskData() *AITagImageTaskData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *DescribeAITagImageTaskDataResponse) GetTaskInfo() *apicommon.TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

type DescribeAITagAudioTaskDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskData *AITagAudioTaskData `protobuf:"bytes,1,opt,name=TaskData,proto3" json:"TaskData,omitempty"`
	TaskInfo *apicommon.TaskInfo `protobuf:"bytes,2,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
}

func (x *DescribeAITagAudioTaskDataResponse) Reset() {
	*x = DescribeAITagAudioTaskDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAITagAudioTaskDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAITagAudioTaskDataResponse) ProtoMessage() {}

func (x *DescribeAITagAudioTaskDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAITagAudioTaskDataResponse.ProtoReflect.Descriptor instead.
func (*DescribeAITagAudioTaskDataResponse) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{31}
}

func (x *DescribeAITagAudioTaskDataResponse) GetTaskData() *AITagAudioTaskData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *DescribeAITagAudioTaskDataResponse) GetTaskInfo() *apicommon.TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

type DescribeAITagTextTaskDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskData *AITagTextTaskData  `protobuf:"bytes,1,opt,name=TaskData,proto3" json:"TaskData,omitempty"`
	TaskInfo *apicommon.TaskInfo `protobuf:"bytes,2,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
}

func (x *DescribeAITagTextTaskDataResponse) Reset() {
	*x = DescribeAITagTextTaskDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAITagTextTaskDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAITagTextTaskDataResponse) ProtoMessage() {}

func (x *DescribeAITagTextTaskDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAITagTextTaskDataResponse.ProtoReflect.Descriptor instead.
func (*DescribeAITagTextTaskDataResponse) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{32}
}

func (x *DescribeAITagTextTaskDataResponse) GetTaskData() *AITagTextTaskData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *DescribeAITagTextTaskDataResponse) GetTaskInfo() *apicommon.TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

type DescribeAICatalogTaskDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	OutputMode uint32 `protobuf:"varint,2,opt,name=OutputMode,proto3" json:"OutputMode,omitempty"`
}

func (x *DescribeAICatalogTaskDataRequest) Reset() {
	*x = DescribeAICatalogTaskDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAICatalogTaskDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAICatalogTaskDataRequest) ProtoMessage() {}

func (x *DescribeAICatalogTaskDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAICatalogTaskDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeAICatalogTaskDataRequest) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{33}
}

func (x *DescribeAICatalogTaskDataRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DescribeAICatalogTaskDataRequest) GetOutputMode() uint32 {
	if x != nil {
		return x.OutputMode
	}
	return 0
}

type DescribeAICatalogTaskDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskData *AICatalogTaskData  `protobuf:"bytes,1,opt,name=TaskData,proto3" json:"TaskData,omitempty"`
	TaskInfo *apicommon.TaskInfo `protobuf:"bytes,2,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
}

func (x *DescribeAICatalogTaskDataResponse) Reset() {
	*x = DescribeAICatalogTaskDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAICatalogTaskDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAICatalogTaskDataResponse) ProtoMessage() {}

func (x *DescribeAICatalogTaskDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAICatalogTaskDataResponse.ProtoReflect.Descriptor instead.
func (*DescribeAICatalogTaskDataResponse) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{34}
}

func (x *DescribeAICatalogTaskDataResponse) GetTaskData() *AICatalogTaskData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *DescribeAICatalogTaskDataResponse) GetTaskInfo() *apicommon.TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

type DescribeAICutTaskDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *DescribeAICutTaskDataRequest) Reset() {
	*x = DescribeAICutTaskDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAICutTaskDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAICutTaskDataRequest) ProtoMessage() {}

func (x *DescribeAICutTaskDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAICutTaskDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeAICutTaskDataRequest) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{35}
}

func (x *DescribeAICutTaskDataRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type DescribeAICutTaskDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskData *AICutTaskData      `protobuf:"bytes,1,opt,name=TaskData,proto3" json:"TaskData,omitempty"`
	TaskInfo *apicommon.TaskInfo `protobuf:"bytes,2,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
}

func (x *DescribeAICutTaskDataResponse) Reset() {
	*x = DescribeAICutTaskDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAICutTaskDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAICutTaskDataResponse) ProtoMessage() {}

func (x *DescribeAICutTaskDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAICutTaskDataResponse.ProtoReflect.Descriptor instead.
func (*DescribeAICutTaskDataResponse) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{36}
}

func (x *DescribeAICutTaskDataResponse) GetTaskData() *AICutTaskData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *DescribeAICutTaskDataResponse) GetTaskInfo() *apicommon.TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

type SymbolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string            `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                     //标识名称，如：中国国旗
	Type           string            `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`                     //标识类型名称，如：旗帜标识
	StartTime      float32           `protobuf:"fixed32,3,opt,name=StartTime,proto3" json:"StartTime,omitempty"`         //标识检测开始时间
	EndTime        float32           `protobuf:"fixed32,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"`             //标识检测结束时间
	Positions      []*SymbolPosition `protobuf:"bytes,5,rep,name=Positions,proto3" json:"Positions,omitempty"`           //标识出现的位置数据集
	FirstAppearTab string            `protobuf:"bytes,6,opt,name=FirstAppearTab,proto3" json:"FirstAppearTab,omitempty"` //点击标签时的跳转信息，固定值为：VisionTab
}

func (x *SymbolInfo) Reset() {
	*x = SymbolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolInfo) ProtoMessage() {}

func (x *SymbolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolInfo.ProtoReflect.Descriptor instead.
func (*SymbolInfo) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{37}
}

func (x *SymbolInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SymbolInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SymbolInfo) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SymbolInfo) GetEndTime() float32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SymbolInfo) GetPositions() []*SymbolPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *SymbolInfo) GetFirstAppearTab() string {
	if x != nil {
		return x.FirstAppearTab
	}
	return ""
}

type SymbolPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Confidence float32          `protobuf:"fixed32,1,opt,name=Confidence,proto3" json:"Confidence,omitempty"` //该图像识别成为该标签的置信度
	FrameIndex int32            `protobuf:"varint,2,opt,name=FrameIndex,proto3" json:"FrameIndex,omitempty"`  //标识出现的帧号
	TimeStamp  float32          `protobuf:"fixed32,3,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`   //标识出现的时间戳
	Position   *apicommon.Rectf `protobuf:"bytes,4,opt,name=Position,proto3" json:"Position,omitempty"`       //标识在图像中出现的位置
}

func (x *SymbolPosition) Reset() {
	*x = SymbolPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_structure_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolPosition) ProtoMessage() {}

func (x *SymbolPosition) ProtoReflect() protoreflect.Message {
	mi := &file_video_structure_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolPosition.ProtoReflect.Descriptor instead.
func (*SymbolPosition) Descriptor() ([]byte, []int) {
	return file_video_structure_proto_rawDescGZIP(), []int{38}
}

func (x *SymbolPosition) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *SymbolPosition) GetFrameIndex() int32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

func (x *SymbolPosition) GetTimeStamp() float32 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *SymbolPosition) GetPosition() *apicommon.Rectf {
	if x != nil {
		return x.Position
	}
	return nil
}

var File_video_structure_proto protoreflect.FileDescriptor

var file_video_structure_proto_rawDesc = []byte{
	0x0a, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x83, 0x01, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x78, 0x0a, 0x0f, 0x41,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b,
	0x0a, 0x04, 0x52, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x04, 0x52, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x94, 0x03, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x6e, 0x64, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4e, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61,
	0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x71, 0x0a, 0x11,
	0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xcf, 0x03, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x61, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x61, 0x62, 0x12,
	0x54, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x53, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x53, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x74, 0x41, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x53, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x50,
	0x6f, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x54, 0x65, 0x78, 0x74,
	0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x53, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x0f, 0x56, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x53, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x56,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x53, 0x65, 0x74, 0x12, 0x37,
	0x0a, 0x0a, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x52, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x41, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x44, 0x22, 0xad, 0x01, 0x0a, 0x16, 0x4c, 0x31, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x6f, 0x0a, 0x19, 0x4c, 0x32, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x4c, 0x32, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x19, 0x4c, 0x32, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65,
	0x74, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x4c, 0x32, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x46, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x0d, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0f, 0x56, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x53, 0x65, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x50, 0x75, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x50, 0x75, 0x74, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x37, 0x0a,
	0x0a, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x52, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xfa,
	0x03, 0x0a, 0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x09, 0x53, 0x75, 0x62, 0x54, 0x61, 0x67, 0x53,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x61, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x61, 0x62,
	0x12, 0x54, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x53,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x41, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x53, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x74, 0x41, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x53, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x50, 0x6f, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x54, 0x65, 0x78,
	0x74, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x53, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x0f, 0x56, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x53, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x53, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x53, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x80, 0x05, 0x0a, 0x0a,
	0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x12, 0x4e, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x5c, 0x0a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x14,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x54,
	0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x52,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56,
	0x69, 0x63, 0x74, 0x69, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67,
	0x52, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x64, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x54, 0x61, 0x67, 0x52, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x22, 0xdf,
	0x05, 0x0a, 0x0a, 0x41, 0x49, 0x4c, 0x65, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a,
	0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x6b, 0x0a, 0x17, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c,
	0x31, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x48,
	0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x54, 0x65,
	0x78, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x61,
	0x67, 0x53, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x67,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69,
	0x61, 0x72, 0x79, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x10, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x53, 0x68, 0x6f, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x53, 0x68, 0x6f, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x22, 0xa5, 0x05, 0x0a, 0x0b, 0x41, 0x49, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x6b, 0x0a, 0x17, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x4c, 0x31, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65,
	0x74, 0x12, 0x48, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x52,
	0x0a, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x0b, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x65, 0x47,
	0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x69,
	0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x65, 0x6e,
	0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0c, 0x4c, 0x65, 0x6e, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x54, 0x0a,
	0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x52, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x12, 0x63, 0x0a, 0x13, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75,
	0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x31, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x13, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x22, 0xa4, 0x08, 0x0a, 0x0d, 0x41, 0x49, 0x53,
	0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x48, 0x6f,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x6b, 0x0a, 0x17, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x31, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x54,
	0x61, 0x67, 0x53, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65,
	0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67,
	0x52, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61, 0x67,
	0x53, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x65, 0x6e,
	0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0c, 0x4c, 0x65, 0x6e, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x4b, 0x0a,
	0x0d, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x4d, 0x61, 0x6a,
	0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x65, 0x74, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x53, 0x65, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x63, 0x0a, 0x13, 0x53, 0x75,
	0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x4c, 0x31, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x53, 0x75, 0x73, 0x70,
	0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x22,
	0x78, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xe3, 0x09, 0x0a, 0x08, 0x53, 0x68,
	0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74,
	0x12, 0x45, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x54, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x54,
	0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x54,
	0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x6b, 0x0a, 0x17, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x31, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61, 0x67, 0x53,
	0x65, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54,
	0x61, 0x67, 0x52, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x12, 0x4a,
	0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x0b, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74,
	0x12, 0x54, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x52, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x4b, 0x0a,
	0x0d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x63, 0x0a, 0x13, 0x53, 0x75,
	0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x4c, 0x31, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x53, 0x75, 0x73, 0x70,
	0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x22,
	0x5d, 0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x63, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x63, 0x74, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x52, 0x65, 0x63, 0x74, 0x22, 0x58,
	0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4c,
	0x6f, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x12,
	0x37, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x52, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x41, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x52, 0x65, 0x63, 0x74, 0x22, 0x50, 0x0a, 0x0d, 0x41, 0x49, 0x54, 0x61,
	0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x08, 0x53, 0x68, 0x6f,
	0x77, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xff, 0x01, 0x0a, 0x12, 0x41,
	0x49, 0x54, 0x61, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x48, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x54,
	0x65, 0x78, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x54,
	0x61, 0x67, 0x53, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x22, 0x91, 0x01, 0x0a,
	0x11, 0x41, 0x49, 0x54, 0x61, 0x67, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61,
	0x67, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74,
	0x22, 0x96, 0x05, 0x0a, 0x12, 0x41, 0x49, 0x54, 0x61, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x06, 0x4f, 0x63, 0x72, 0x53, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x63, 0x72, 0x52, 0x06, 0x4f, 0x63,
	0x72, 0x53, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x67,
	0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x54, 0x61, 0x67, 0x52, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74,
	0x12, 0x6b, 0x0a, 0x17, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x31,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x3c, 0x0a,
	0x06, 0x54, 0x76, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c,
	0x6f, 0x67, 0x6f, 0x52, 0x06, 0x54, 0x76, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x44, 0x0a, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x6f, 0x12, 0x54, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x65, 0x74, 0x12, 0x63, 0x0a, 0x13, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f,
	0x75, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4c, 0x31,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x53, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x22, 0xbb, 0x02, 0x0a, 0x11, 0x41, 0x49,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x50, 0x0a, 0x0e, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x47,
	0x0a, 0x0b, 0x4c, 0x65, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x41, 0x49, 0x4c, 0x65, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x4c, 0x65, 0x6e, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x0d, 0x41, 0x49, 0x43, 0x75,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x08, 0x53, 0x68, 0x6f,
	0x77, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x0e, 0x53, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41,
	0x49, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x53, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x22, 0x79, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x22, 0x3a, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41,
	0x49, 0x54, 0x61, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x6f,
	0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x8f, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x55, 0x72, 0x6c, 0x22, 0x9e, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x49, 0x54, 0x61, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x54, 0x61, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa8, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x41, 0x49, 0x54, 0x61, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x54, 0x61,
	0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xa8, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49,
	0x54, 0x61, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x54, 0x61, 0x67, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa6, 0x01, 0x0a,
	0x21, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x54, 0x61, 0x67, 0x54, 0x65,
	0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x41, 0x49, 0x54, 0x61, 0x67, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5a, 0x0a, 0x20, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x41, 0x49, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x22, 0xa6, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x37, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x36, 0x0a, 0x1c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x43, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41,
	0x49, 0x43, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x41, 0x49, 0x43, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x08, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xdd, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x61, 0x62, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x54, 0x61, 0x62, 0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x66,
	0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xf4, 0x06, 0x0a, 0x05, 0x41,
	0x49, 0x54, 0x61, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x49, 0x54, 0x61, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49,
	0x54, 0x61, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x41, 0x49, 0x54, 0x61, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x54, 0x61, 0x67, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x94,
	0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x54, 0x61, 0x67,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x49, 0x54, 0x61, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x54, 0x61, 0x67,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x49, 0x54, 0x61, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x54, 0x61, 0x67, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x49, 0x54, 0x61, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a,
	0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x54, 0x61, 0x67, 0x54, 0x65,
	0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41,
	0x49, 0x54, 0x61, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x54, 0x61, 0x67, 0x54, 0x65, 0x78,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x38, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xb5, 0x02, 0x0a, 0x09, 0x41, 0x49, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12,
	0x8e, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x49, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x96, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x41, 0x49, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x41, 0x49, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa1, 0x02, 0x0a, 0x05, 0x41, 0x49,
	0x43, 0x75, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x49,
	0x43, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x8a, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x43,
	0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41,
	0x49, 0x43, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x43, 0x75, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x5e, 0x5a,
	0x5c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x65, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2d,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_structure_proto_rawDescOnce sync.Once
	file_video_structure_proto_rawDescData = file_video_structure_proto_rawDesc
)

func file_video_structure_proto_rawDescGZIP() []byte {
	file_video_structure_proto_rawDescOnce.Do(func() {
		file_video_structure_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_structure_proto_rawDescData)
	})
	return file_video_structure_proto_rawDescData
}

var file_video_structure_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_video_structure_proto_goTypes = []interface{}{
	(*AudioInfo)(nil),                          // 0: trpc.media.videostructure.AudioInfo
	(*TextInfo)(nil),                           // 1: trpc.media.videostructure.TextInfo
	(*AppearFrameInfo)(nil),                    // 2: trpc.media.videostructure.AppearFrameInfo
	(*AppearTimeInfo)(nil),                     // 3: trpc.media.videostructure.AppearTimeInfo
	(*AppearPostionInfo)(nil),                  // 4: trpc.media.videostructure.AppearPostionInfo
	(*PersonTagInfo)(nil),                      // 5: trpc.media.videostructure.PersonTagInfo
	(*L1ClassifiedPersonInfo)(nil),             // 6: trpc.media.videostructure.L1ClassifiedPersonInfo
	(*L2ClassifiedPersonInfo)(nil),             // 7: trpc.media.videostructure.L2ClassifiedPersonInfo
	(*UnknownPerson)(nil),                      // 8: trpc.media.videostructure.UnknownPerson
	(*MultiLevelTag)(nil),                      // 9: trpc.media.videostructure.MultiLevelTag
	(*MajorEvent)(nil),                         // 10: trpc.media.videostructure.MajorEvent
	(*AILensInfo)(nil),                         // 11: trpc.media.videostructure.AILensInfo
	(*AISceneInfo)(nil),                        // 12: trpc.media.videostructure.AISceneInfo
	(*AISnippetInfo)(nil),                      // 13: trpc.media.videostructure.AISnippetInfo
	(*AudioCaptionInfo)(nil),                   // 14: trpc.media.videostructure.AudioCaptionInfo
	(*ShowInfo)(nil),                           // 15: trpc.media.videostructure.ShowInfo
	(*ImageOcr)(nil),                           // 16: trpc.media.videostructure.ImageOcr
	(*ImageLogo)(nil),                          // 17: trpc.media.videostructure.ImageLogo
	(*AITagTaskData)(nil),                      // 18: trpc.media.videostructure.AITagTaskData
	(*AITagAudioTaskData)(nil),                 // 19: trpc.media.videostructure.AITagAudioTaskData
	(*AITagTextTaskData)(nil),                  // 20: trpc.media.videostructure.AITagTextTaskData
	(*AITagImageTaskData)(nil),                 // 21: trpc.media.videostructure.AITagImageTaskData
	(*AICatalogTaskData)(nil),                  // 22: trpc.media.videostructure.AICatalogTaskData
	(*AICutTaskData)(nil),                      // 23: trpc.media.videostructure.AICutTaskData
	(*CreateVideoStructureTaskRequest)(nil),    // 24: trpc.media.videostructure.CreateVideoStructureTaskRequest
	(*CreateVideoStructureTaskResponse)(nil),   // 25: trpc.media.videostructure.CreateVideoStructureTaskResponse
	(*DescribeAITagTaskDataRequest)(nil),       // 26: trpc.media.videostructure.DescribeAITagTaskDataRequest
	(*DescribeVideoShotCoverRequest)(nil),      // 27: trpc.media.videostructure.DescribeVideoShotCoverRequest
	(*DescribeVideoShotCoverResponse)(nil),     // 28: trpc.media.videostructure.DescribeVideoShotCoverResponse
	(*DescribeAITagTaskDataResponse)(nil),      // 29: trpc.media.videostructure.DescribeAITagTaskDataResponse
	(*DescribeAITagImageTaskDataResponse)(nil), // 30: trpc.media.videostructure.DescribeAITagImageTaskDataResponse
	(*DescribeAITagAudioTaskDataResponse)(nil), // 31: trpc.media.videostructure.DescribeAITagAudioTaskDataResponse
	(*DescribeAITagTextTaskDataResponse)(nil),  // 32: trpc.media.videostructure.DescribeAITagTextTaskDataResponse
	(*DescribeAICatalogTaskDataRequest)(nil),   // 33: trpc.media.videostructure.DescribeAICatalogTaskDataRequest
	(*DescribeAICatalogTaskDataResponse)(nil),  // 34: trpc.media.videostructure.DescribeAICatalogTaskDataResponse
	(*DescribeAICutTaskDataRequest)(nil),       // 35: trpc.media.videostructure.DescribeAICutTaskDataRequest
	(*DescribeAICutTaskDataResponse)(nil),      // 36: trpc.media.videostructure.DescribeAICutTaskDataResponse
	(*SymbolInfo)(nil),                         // 37: trpc.media.videostructure.SymbolInfo
	(*SymbolPosition)(nil),                     // 38: trpc.media.videostructure.SymbolPosition
	(*apicommon.Rect)(nil),                     // 39: trpc.media.common.Rect
	(apicommon.CategoryTagType)(0),             // 40: trpc.media.common.CategoryTagType
	(*apicommon.TaskInfo)(nil),                 // 41: trpc.media.common.TaskInfo
	(*apicommon.Rectf)(nil),                    // 42: trpc.media.common.Rectf
}
var file_video_structure_proto_depIdxs = []int32{
	39, // 0: trpc.media.videostructure.AppearFrameInfo.Rect:type_name -> trpc.media.common.Rect
	2,  // 1: trpc.media.videostructure.AppearTimeInfo.DetailFrames:type_name -> trpc.media.videostructure.AppearFrameInfo
	4,  // 2: trpc.media.videostructure.PersonTagInfo.AudioAppearSet:type_name -> trpc.media.videostructure.AppearPostionInfo
	4,  // 3: trpc.media.videostructure.PersonTagInfo.TextAppearSet:type_name -> trpc.media.videostructure.AppearPostionInfo
	3,  // 4: trpc.media.videostructure.PersonTagInfo.VisionAppearSet:type_name -> trpc.media.videostructure.AppearTimeInfo
	39, // 5: trpc.media.videostructure.PersonTagInfo.AppearRect:type_name -> trpc.media.common.Rect
	7,  // 6: trpc.media.videostructure.L1ClassifiedPersonInfo.L2ClassifiedPersonInfoSet:type_name -> trpc.media.videostructure.L2ClassifiedPersonInfo
	5,  // 7: trpc.media.videostructure.L2ClassifiedPersonInfo.PersonSet:type_name -> trpc.media.videostructure.PersonTagInfo
	3,  // 8: trpc.media.videostructure.UnknownPerson.VisionAppearSet:type_name -> trpc.media.videostructure.AppearTimeInfo
	39, // 9: trpc.media.videostructure.UnknownPerson.AppearRect:type_name -> trpc.media.common.Rect
	9,  // 10: trpc.media.videostructure.MultiLevelTag.SubTagSet:type_name -> trpc.media.videostructure.MultiLevelTag
	4,  // 11: trpc.media.videostructure.MultiLevelTag.AudioAppearSet:type_name -> trpc.media.videostructure.AppearPostionInfo
	4,  // 12: trpc.media.videostructure.MultiLevelTag.TextAppearSet:type_name -> trpc.media.videostructure.AppearPostionInfo
	3,  // 13: trpc.media.videostructure.MultiLevelTag.VisionAppearSet:type_name -> trpc.media.videostructure.AppearTimeInfo
	9,  // 14: trpc.media.videostructure.MajorEvent.EventTimeSet:type_name -> trpc.media.videostructure.MultiLevelTag
	9,  // 15: trpc.media.videostructure.MajorEvent.EventPlaceSet:type_name -> trpc.media.videostructure.MultiLevelTag
	9,  // 16: trpc.media.videostructure.MajorEvent.EventOrganizationSet:type_name -> trpc.media.videostructure.MultiLevelTag
	5,  // 17: trpc.media.videostructure.MajorEvent.EventPersonSet:type_name -> trpc.media.videostructure.PersonTagInfo
	9,  // 18: trpc.media.videostructure.MajorEvent.Event:type_name -> trpc.media.videostructure.MultiLevelTag
	9,  // 19: trpc.media.videostructure.MajorEvent.EventVictimPositionSet:type_name -> trpc.media.videostructure.MultiLevelTag
	9,  // 20: trpc.media.videostructure.MajorEvent.EventCriminalPositionSet:type_name -> trpc.media.videostructure.MultiLevelTag
	6,  // 21: trpc.media.videostructure.AILensInfo.ClassifiedPersonInfoSet:type_name -> trpc.media.videostructure.L1ClassifiedPersonInfo
	9,  // 22: trpc.media.videostructure.AILensInfo.TextTagSet:type_name -> trpc.media.videostructure.MultiLevelTag
	9,  // 23: trpc.media.videostructure.AILensInfo.FrameTagSet:type_name -> trpc.media.videostructure.MultiLevelTag
	8,  // 24: trpc.media.videostructure.AILensInfo.UnknownPersonSet:type_name -> trpc.media.videostructure.UnknownPerson
	6,  // 25: trpc.media.videostructure.AISceneInfo.ClassifiedPersonInfoSet:type_name -> trpc.media.videostructure.L1ClassifiedPersonInfo
	9,  // 26: trpc.media.videostructure.AISceneInfo.TextTagSet:type_name -> trpc.media.videostructure.MultiLevelTag
	9,  // 27: trpc.media.videostructure.AISceneInfo.FrameTagSet:type_name -> trpc.media.videostructure.MultiLevelTag
	8,  // 28: trpc.media.videostructure.AISceneInfo.UnknownPersonSet:type_name -> trpc.media.videostructure.UnknownPerson
	6,  // 29: trpc.media.videostructure.AISceneInfo.SuspiciousPersonSet:type_name -> trpc.media.videostructure.L1ClassifiedPersonInfo
	5,  // 30: trpc.media.videostructure.AISnippetInfo.HostInfoSet:type_name -> trpc.media.videostructure.PersonTagInfo
	5,  // 31: trpc.media.videostructure.AISnippetInfo.ReporterInfoSet:type_name -> trpc.media.videostructure.PersonTagInfo
	6,  // 32: trpc.media.videostructure.AISnippetInfo.ClassifiedPersonInfoSet:type_name -> trpc.media.videostructure.L1ClassifiedPersonInfo
	9,  // 33: trpc.media.videostructure.AISnippetInfo.TextTagSet:type_name -> trpc.media.videostructure.MultiLevelTag
	9,  // 34: trpc.media.videostructure.AISnippetInfo.FrameTagSet:type_name -> trpc.media.videostructure.MultiLevelTag
	10, // 35: trpc.media.videostructure.AISnippetInfo.MajorEventSet:type_name -> trpc.media.videostructure.MajorEvent
	8,  // 36: trpc.media.videostructure.AISnippetInfo.UnknownPersonSet:type_name -> trpc.media.videostructure.UnknownPerson
	6,  // 37: trpc.media.videostructure.AISnippetInfo.SuspiciousPersonSet:type_name -> trpc.media.videostructure.L1ClassifiedPersonInfo
	40, // 38: trpc.media.videostructure.ShowInfo.Type:type_name -> trpc.media.common.CategoryTagType
	0,  // 39: trpc.media.videostructure.ShowInfo.AudioInfoSet:type_name -> trpc.media.videostructure.AudioInfo
	1,  // 40: trpc.media.videostructure.ShowInfo.TextInfoSet:type_name -> trpc.media.videostructure.TextInfo
	5,  // 41: trpc.media.videostructure.ShowInfo.HostInfoSet:type_name -> trpc.media.videostructure.PersonTagInfo
	5,  // 42: trpc.media.videostructure.ShowInfo.ReporterInfoSet:type_name -> trpc.media.videostructure.PersonTagInfo
	6,  // 43: trpc.media.videostructure.ShowInfo.ClassifiedPersonInfoSet:type_name -> trpc.media.videostructure.L1ClassifiedPersonInfo
	9,  // 44: trpc.media.videostructure.ShowInfo.TextTagSet:type_name -> trpc.media.videostructure.MultiLevelTag
	9,  // 45: trpc.media.videostructure.ShowInfo.FrameTagSet:type_name -> trpc.media.videostructure.MultiLevelTag
	8,  // 46: trpc.media.videostructure.ShowInfo.UnknownPersonSet:type_name -> trpc.media.videostructure.UnknownPerson
	14, // 47: trpc.media.videostructure.ShowInfo.AudioCaptionSet:type_name -> trpc.media.videostructure.AudioCaptionInfo
	37, // 48: trpc.media.videostructure.ShowInfo.SymbolInfoSet:type_name -> trpc.media.videostructure.SymbolInfo
	6,  // 49: trpc.media.videostructure.ShowInfo.SuspiciousPersonSet:type_name -> trpc.media.videostructure.L1ClassifiedPersonInfo
	39, // 50: trpc.media.videostructure.ImageOcr.AppearRect:type_name -> trpc.media.common.Rect
	39, // 51: trpc.media.videostructure.ImageLogo.AppearRect:type_name -> trpc.media.common.Rect
	15, // 52: trpc.media.videostructure.AITagTaskData.ShowInfo:type_name -> trpc.media.videostructure.ShowInfo
	0,  // 53: trpc.media.videostructure.AITagAudioTaskData.AudioInfoSet:type_name -> trpc.media.videostructure.AudioInfo
	9,  // 54: trpc.media.videostructure.AITagAudioTaskData.TextTagSet:type_name -> trpc.media.videostructure.MultiLevelTag
	14, // 55: trpc.media.videostructure.AITagAudioTaskData.AudioCaptionSet:type_name -> trpc.media.videostructure.AudioCaptionInfo
	9,  // 56: trpc.media.videostructure.AITagTextTaskData.TextTagSet:type_name -> trpc.media.videostructure.MultiLevelTag
	16, // 57: trpc.media.videostructure.AITagImageTaskData.OcrSet:type_name -> trpc.media.videostructure.ImageOcr
	9,  // 58: trpc.media.videostructure.AITagImageTaskData.FrameTagSet:type_name -> trpc.media.videostructure.MultiLevelTag
	6,  // 59: trpc.media.videostructure.AITagImageTaskData.ClassifiedPersonInfoSet:type_name -> trpc.media.videostructure.L1ClassifiedPersonInfo
	17, // 60: trpc.media.videostructure.AITagImageTaskData.TvLogo:type_name -> trpc.media.videostructure.ImageLogo
	17, // 61: trpc.media.videostructure.AITagImageTaskData.SourceLogo:type_name -> trpc.media.videostructure.ImageLogo
	8,  // 62: trpc.media.videostructure.AITagImageTaskData.UnknownPersonSet:type_name -> trpc.media.videostructure.UnknownPerson
	37, // 63: trpc.media.videostructure.AITagImageTaskData.SymbolInfoSet:type_name -> trpc.media.videostructure.SymbolInfo
	6,  // 64: trpc.media.videostructure.AITagImageTaskData.SuspiciousPersonSet:type_name -> trpc.media.videostructure.L1ClassifiedPersonInfo
	15, // 65: trpc.media.videostructure.AICatalogTaskData.ShowInfo:type_name -> trpc.media.videostructure.ShowInfo
	13, // 66: trpc.media.videostructure.AICatalogTaskData.SnippetInfoSet:type_name -> trpc.media.videostructure.AISnippetInfo
	12, // 67: trpc.media.videostructure.AICatalogTaskData.SceneInfoSet:type_name -> trpc.media.videostructure.AISceneInfo
	11, // 68: trpc.media.videostructure.AICatalogTaskData.LensInfoSet:type_name -> trpc.media.videostructure.AILensInfo
	15, // 69: trpc.media.videostructure.AICutTaskData.ShowInfo:type_name -> trpc.media.videostructure.ShowInfo
	13, // 70: trpc.media.videostructure.AICutTaskData.SnippetInfoSet:type_name -> trpc.media.videostructure.AISnippetInfo
	41, // 71: trpc.media.videostructure.DescribeVideoShotCoverResponse.TaskInfo:type_name -> trpc.media.common.TaskInfo
	18, // 72: trpc.media.videostructure.DescribeAITagTaskDataResponse.TaskData:type_name -> trpc.media.videostructure.AITagTaskData
	41, // 73: trpc.media.videostructure.DescribeAITagTaskDataResponse.TaskInfo:type_name -> trpc.media.common.TaskInfo
	21, // 74: trpc.media.videostructure.DescribeAITagImageTaskDataResponse.TaskData:type_name -> trpc.media.videostructure.AITagImageTaskData
	41, // 75: trpc.media.videostructure.DescribeAITagImageTaskDataResponse.TaskInfo:type_name -> trpc.media.common.TaskInfo
	19, // 76: trpc.media.videostructure.DescribeAITagAudioTaskDataResponse.TaskData:type_name -> trpc.media.videostructure.AITagAudioTaskData
	41, // 77: trpc.media.videostructure.DescribeAITagAudioTaskDataResponse.TaskInfo:type_name -> trpc.media.common.TaskInfo
	20, // 78: trpc.media.videostructure.DescribeAITagTextTaskDataResponse.TaskData:type_name -> trpc.media.videostructure.AITagTextTaskData
	41, // 79: trpc.media.videostructure.DescribeAITagTextTaskDataResponse.TaskInfo:type_name -> trpc.media.common.TaskInfo
	22, // 80: trpc.media.videostructure.DescribeAICatalogTaskDataResponse.TaskData:type_name -> trpc.media.videostructure.AICatalogTaskData
	41, // 81: trpc.media.videostructure.DescribeAICatalogTaskDataResponse.TaskInfo:type_name -> trpc.media.common.TaskInfo
	23, // 82: trpc.media.videostructure.DescribeAICutTaskDataResponse.TaskData:type_name -> trpc.media.videostructure.AICutTaskData
	41, // 83: trpc.media.videostructure.DescribeAICutTaskDataResponse.TaskInfo:type_name -> trpc.media.common.TaskInfo
	38, // 84: trpc.media.videostructure.SymbolInfo.Positions:type_name -> trpc.media.videostructure.SymbolPosition
	42, // 85: trpc.media.videostructure.SymbolPosition.Position:type_name -> trpc.media.common.Rectf
	24, // 86: trpc.media.videostructure.AITag.CreateAITagTask:input_type -> trpc.media.videostructure.CreateVideoStructureTaskRequest
	26, // 87: trpc.media.videostructure.AITag.DescribeAITagTaskData:input_type -> trpc.media.videostructure.DescribeAITagTaskDataRequest
	26, // 88: trpc.media.videostructure.AITag.DescribeAITagAudioTaskData:input_type -> trpc.media.videostructure.DescribeAITagTaskDataRequest
	26, // 89: trpc.media.videostructure.AITag.DescribeAITagImageTaskData:input_type -> trpc.media.videostructure.DescribeAITagTaskDataRequest
	26, // 90: trpc.media.videostructure.AITag.DescribeAITagTextTaskData:input_type -> trpc.media.videostructure.DescribeAITagTaskDataRequest
	27, // 91: trpc.media.videostructure.AITag.DescribeVideoShotCover:input_type -> trpc.media.videostructure.DescribeVideoShotCoverRequest
	24, // 92: trpc.media.videostructure.AICatalog.CreateAICatalogTask:input_type -> trpc.media.videostructure.CreateVideoStructureTaskRequest
	33, // 93: trpc.media.videostructure.AICatalog.DescribeAICatalogTaskData:input_type -> trpc.media.videostructure.DescribeAICatalogTaskDataRequest
	24, // 94: trpc.media.videostructure.AICut.CreateAICutTask:input_type -> trpc.media.videostructure.CreateVideoStructureTaskRequest
	35, // 95: trpc.media.videostructure.AICut.DescribeAICutTaskData:input_type -> trpc.media.videostructure.DescribeAICutTaskDataRequest
	25, // 96: trpc.media.videostructure.AITag.CreateAITagTask:output_type -> trpc.media.videostructure.CreateVideoStructureTaskResponse
	29, // 97: trpc.media.videostructure.AITag.DescribeAITagTaskData:output_type -> trpc.media.videostructure.DescribeAITagTaskDataResponse
	31, // 98: trpc.media.videostructure.AITag.DescribeAITagAudioTaskData:output_type -> trpc.media.videostructure.DescribeAITagAudioTaskDataResponse
	30, // 99: trpc.media.videostructure.AITag.DescribeAITagImageTaskData:output_type -> trpc.media.videostructure.DescribeAITagImageTaskDataResponse
	32, // 100: trpc.media.videostructure.AITag.DescribeAITagTextTaskData:output_type -> trpc.media.videostructure.DescribeAITagTextTaskDataResponse
	28, // 101: trpc.media.videostructure.AITag.DescribeVideoShotCover:output_type -> trpc.media.videostructure.DescribeVideoShotCoverResponse
	25, // 102: trpc.media.videostructure.AICatalog.CreateAICatalogTask:output_type -> trpc.media.videostructure.CreateVideoStructureTaskResponse
	34, // 103: trpc.media.videostructure.AICatalog.DescribeAICatalogTaskData:output_type -> trpc.media.videostructure.DescribeAICatalogTaskDataResponse
	25, // 104: trpc.media.videostructure.AICut.CreateAICutTask:output_type -> trpc.media.videostructure.CreateVideoStructureTaskResponse
	36, // 105: trpc.media.videostructure.AICut.DescribeAICutTaskData:output_type -> trpc.media.videostructure.DescribeAICutTaskDataResponse
	96, // [96:106] is the sub-list for method output_type
	86, // [86:96] is the sub-list for method input_type
	86, // [86:86] is the sub-list for extension type_name
	86, // [86:86] is the sub-list for extension extendee
	0,  // [0:86] is the sub-list for field type_name
}

func init() { file_video_structure_proto_init() }
func file_video_structure_proto_init() {
	if File_video_structure_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_structure_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearFrameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearTimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearPostionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonTagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L1ClassifiedPersonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2ClassifiedPersonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnknownPerson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiLevelTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MajorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AILensInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AISceneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AISnippetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioCaptionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageOcr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageLogo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AITagTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AITagAudioTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AITagTextTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AITagImageTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AICatalogTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AICutTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVideoStructureTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVideoStructureTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAITagTaskDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVideoShotCoverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVideoShotCoverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAITagTaskDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAITagImageTaskDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAITagAudioTaskDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAITagTextTaskDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAICatalogTaskDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAICatalogTaskDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAICutTaskDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAICutTaskDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_structure_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_structure_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_video_structure_proto_goTypes,
		DependencyIndexes: file_video_structure_proto_depIdxs,
		MessageInfos:      file_video_structure_proto_msgTypes,
	}.Build()
	File_video_structure_proto = out.File
	file_video_structure_proto_rawDesc = nil
	file_video_structure_proto_goTypes = nil
	file_video_structure_proto_depIdxs = nil
}
