// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: workflow_template.proto

package workflowtemplate

import (
	reflect "reflect"
	sync "sync"

	apicommon "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/apicommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 操作状态
type WorkflowTemplateOperateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowTemplateId string                     `protobuf:"bytes,1,opt,name=WorkflowTemplateId,proto3" json:"WorkflowTemplateId,omitempty"` // 模板Id
	OperateResponse    *apicommon.OperateResponse `protobuf:"bytes,2,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`       // 操作结果
}

func (x *WorkflowTemplateOperateResponse) Reset() {
	*x = WorkflowTemplateOperateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowTemplateOperateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTemplateOperateResponse) ProtoMessage() {}

func (x *WorkflowTemplateOperateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTemplateOperateResponse.ProtoReflect.Descriptor instead.
func (*WorkflowTemplateOperateResponse) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{0}
}

func (x *WorkflowTemplateOperateResponse) GetWorkflowTemplateId() string {
	if x != nil {
		return x.WorkflowTemplateId
	}
	return ""
}

func (x *WorkflowTemplateOperateResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

// 模板元信息
type WorkflowTemplateMetaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowTemplateName        string              `protobuf:"bytes,1,opt,name=WorkflowTemplateName,proto3" json:"WorkflowTemplateName,omitempty"`               // 工作流模板名称
	MediaType                   apicommon.MediaType `protobuf:"varint,2,opt,name=MediaType,proto3,enum=trpc.media.common.MediaType" json:"MediaType,omitempty"`   // 资源类型
	WorkflowTemplateDescription string              `protobuf:"bytes,3,opt,name=WorkflowTemplateDescription,proto3" json:"WorkflowTemplateDescription,omitempty"` // 工作流模板描述信息
	IsDefaultProcess            bool                `protobuf:"varint,4,opt,name=IsDefaultProcess,proto3" json:"IsDefaultProcess,omitempty"`                      // 是否为缺省流程
}

func (x *WorkflowTemplateMetaInfo) Reset() {
	*x = WorkflowTemplateMetaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowTemplateMetaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTemplateMetaInfo) ProtoMessage() {}

func (x *WorkflowTemplateMetaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTemplateMetaInfo.ProtoReflect.Descriptor instead.
func (*WorkflowTemplateMetaInfo) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{1}
}

func (x *WorkflowTemplateMetaInfo) GetWorkflowTemplateName() string {
	if x != nil {
		return x.WorkflowTemplateName
	}
	return ""
}

func (x *WorkflowTemplateMetaInfo) GetMediaType() apicommon.MediaType {
	if x != nil {
		return x.MediaType
	}
	return apicommon.MediaType_MEDIA_TYPE_OTHER
}

func (x *WorkflowTemplateMetaInfo) GetWorkflowTemplateDescription() string {
	if x != nil {
		return x.WorkflowTemplateDescription
	}
	return ""
}

func (x *WorkflowTemplateMetaInfo) GetIsDefaultProcess() bool {
	if x != nil {
		return x.IsDefaultProcess
	}
	return false
}

// 模板信息
type WorkflowTemplateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowTemplateMetaInfo *WorkflowTemplateMetaInfo   `protobuf:"bytes,1,opt,name=WorkflowTemplateMetaInfo,proto3" json:"WorkflowTemplateMetaInfo,omitempty"` // 模板元信息
	WorkflowTemplateContent  *apicommon.WorkflowTemplate `protobuf:"bytes,2,opt,name=WorkflowTemplateContent,proto3" json:"WorkflowTemplateContent,omitempty"`   // 工作流模板的内容
	DomainGroupInfo          *apicommon.DomainGroupInfo  `protobuf:"bytes,3,opt,name=DomainGroupInfo,proto3" json:"DomainGroupInfo,omitempty"`                   // 群组信息: 私有/公共/群组
}

func (x *WorkflowTemplateInfo) Reset() {
	*x = WorkflowTemplateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowTemplateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTemplateInfo) ProtoMessage() {}

func (x *WorkflowTemplateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTemplateInfo.ProtoReflect.Descriptor instead.
func (*WorkflowTemplateInfo) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{2}
}

func (x *WorkflowTemplateInfo) GetWorkflowTemplateMetaInfo() *WorkflowTemplateMetaInfo {
	if x != nil {
		return x.WorkflowTemplateMetaInfo
	}
	return nil
}

func (x *WorkflowTemplateInfo) GetWorkflowTemplateContent() *apicommon.WorkflowTemplate {
	if x != nil {
		return x.WorkflowTemplateContent
	}
	return nil
}

func (x *WorkflowTemplateInfo) GetDomainGroupInfo() *apicommon.DomainGroupInfo {
	if x != nil {
		return x.DomainGroupInfo
	}
	return nil
}

// ====================================== 创建模板 ======================================
type CreateWorkflowTemplatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowTemplateInfoSet []*WorkflowTemplateInfo `protobuf:"bytes,1,rep,name=WorkflowTemplateInfoSet,proto3" json:"WorkflowTemplateInfoSet,omitempty"`
}

func (x *CreateWorkflowTemplatesRequest) Reset() {
	*x = CreateWorkflowTemplatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkflowTemplatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkflowTemplatesRequest) ProtoMessage() {}

func (x *CreateWorkflowTemplatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkflowTemplatesRequest.ProtoReflect.Descriptor instead.
func (*CreateWorkflowTemplatesRequest) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{3}
}

func (x *CreateWorkflowTemplatesRequest) GetWorkflowTemplateInfoSet() []*WorkflowTemplateInfo {
	if x != nil {
		return x.WorkflowTemplateInfoSet
	}
	return nil
}

type CreateWorkflowTemplatesOperateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowTemplateName string                     `protobuf:"bytes,1,opt,name=WorkflowTemplateName,proto3" json:"WorkflowTemplateName,omitempty"` // 工作流模板名称
	WorkflowTemplateId   string                     `protobuf:"bytes,2,opt,name=WorkflowTemplateId,proto3" json:"WorkflowTemplateId,omitempty"`     // 模板Id
	OperateResponse      *apicommon.OperateResponse `protobuf:"bytes,3,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`           // 模板的操作结果
}

func (x *CreateWorkflowTemplatesOperateResponse) Reset() {
	*x = CreateWorkflowTemplatesOperateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkflowTemplatesOperateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkflowTemplatesOperateResponse) ProtoMessage() {}

func (x *CreateWorkflowTemplatesOperateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkflowTemplatesOperateResponse.ProtoReflect.Descriptor instead.
func (*CreateWorkflowTemplatesOperateResponse) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{4}
}

func (x *CreateWorkflowTemplatesOperateResponse) GetWorkflowTemplateName() string {
	if x != nil {
		return x.WorkflowTemplateName
	}
	return ""
}

func (x *CreateWorkflowTemplatesOperateResponse) GetWorkflowTemplateId() string {
	if x != nil {
		return x.WorkflowTemplateId
	}
	return ""
}

func (x *CreateWorkflowTemplatesOperateResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

type CreateWorkflowTemplatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowTemplateOperateResponseSet []*CreateWorkflowTemplatesOperateResponse `protobuf:"bytes,1,rep,name=WorkflowTemplateOperateResponseSet,proto3" json:"WorkflowTemplateOperateResponseSet,omitempty"`
}

func (x *CreateWorkflowTemplatesResponse) Reset() {
	*x = CreateWorkflowTemplatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkflowTemplatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkflowTemplatesResponse) ProtoMessage() {}

func (x *CreateWorkflowTemplatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkflowTemplatesResponse.ProtoReflect.Descriptor instead.
func (*CreateWorkflowTemplatesResponse) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{5}
}

func (x *CreateWorkflowTemplatesResponse) GetWorkflowTemplateOperateResponseSet() []*CreateWorkflowTemplatesOperateResponse {
	if x != nil {
		return x.WorkflowTemplateOperateResponseSet
	}
	return nil
}

// ====================================== 查询模板 ======================================
type DescribeWorkflowTemplatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber uint32              `protobuf:"varint,1,opt,name=PageNumber,proto3" json:"PageNumber,omitempty"` // 分页Id
	PageSize   uint32              `protobuf:"varint,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"`     // 分页的大小
	FilterSet  []*apicommon.Filter `protobuf:"bytes,3,rep,name=FilterSet,proto3" json:"FilterSet,omitempty"`    // 过滤条件
	SorterSet  []*apicommon.Sorter `protobuf:"bytes,4,rep,name=SorterSet,proto3" json:"SorterSet,omitempty"`    // 排序条件
}

func (x *DescribeWorkflowTemplatesRequest) Reset() {
	*x = DescribeWorkflowTemplatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeWorkflowTemplatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeWorkflowTemplatesRequest) ProtoMessage() {}

func (x *DescribeWorkflowTemplatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeWorkflowTemplatesRequest.ProtoReflect.Descriptor instead.
func (*DescribeWorkflowTemplatesRequest) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{6}
}

func (x *DescribeWorkflowTemplatesRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *DescribeWorkflowTemplatesRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribeWorkflowTemplatesRequest) GetFilterSet() []*apicommon.Filter {
	if x != nil {
		return x.FilterSet
	}
	return nil
}

func (x *DescribeWorkflowTemplatesRequest) GetSorterSet() []*apicommon.Sorter {
	if x != nil {
		return x.SorterSet
	}
	return nil
}

type WorkflowTemplateObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowTemplateId         string                           `protobuf:"bytes,1,opt,name=WorkflowTemplateId,proto3" json:"WorkflowTemplateId,omitempty"`                                                        // 模板Id
	WorkflowTemplateStatus     apicommon.WorkflowTemplateStatus `protobuf:"varint,2,opt,name=WorkflowTemplateStatus,proto3,enum=trpc.media.common.WorkflowTemplateStatus" json:"WorkflowTemplateStatus,omitempty"` // 模板状态
	WorkflowTemplateInfo       *WorkflowTemplateInfo            `protobuf:"bytes,3,opt,name=WorkflowTemplateInfo,proto3" json:"WorkflowTemplateInfo,omitempty"`                                                    // 模板信息
	CreateUserInfo             *apicommon.UserInfo              `protobuf:"bytes,4,opt,name=CreateUserInfo,proto3" json:"CreateUserInfo,omitempty"`                                                                // 模板的创建者信息
	ModifyUserInfo             *apicommon.UserInfo              `protobuf:"bytes,5,opt,name=ModifyUserInfo,proto3" json:"ModifyUserInfo,omitempty"`                                                                // 模板的修改者信息
	WorkflowTemplateCreateTime string                           `protobuf:"bytes,6,opt,name=WorkflowTemplateCreateTime,proto3" json:"WorkflowTemplateCreateTime,omitempty"`                                        // 模板创建时间
	WorkflowTemplateModifyTime string                           `protobuf:"bytes,7,opt,name=WorkflowTemplateModifyTime,proto3" json:"WorkflowTemplateModifyTime,omitempty"`                                        // 模板修改时间
}

func (x *WorkflowTemplateObject) Reset() {
	*x = WorkflowTemplateObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowTemplateObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTemplateObject) ProtoMessage() {}

func (x *WorkflowTemplateObject) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTemplateObject.ProtoReflect.Descriptor instead.
func (*WorkflowTemplateObject) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{7}
}

func (x *WorkflowTemplateObject) GetWorkflowTemplateId() string {
	if x != nil {
		return x.WorkflowTemplateId
	}
	return ""
}

func (x *WorkflowTemplateObject) GetWorkflowTemplateStatus() apicommon.WorkflowTemplateStatus {
	if x != nil {
		return x.WorkflowTemplateStatus
	}
	return apicommon.WorkflowTemplateStatus_WORKFLOW_TEMPLATE_STATUS_INIT
}

func (x *WorkflowTemplateObject) GetWorkflowTemplateInfo() *WorkflowTemplateInfo {
	if x != nil {
		return x.WorkflowTemplateInfo
	}
	return nil
}

func (x *WorkflowTemplateObject) GetCreateUserInfo() *apicommon.UserInfo {
	if x != nil {
		return x.CreateUserInfo
	}
	return nil
}

func (x *WorkflowTemplateObject) GetModifyUserInfo() *apicommon.UserInfo {
	if x != nil {
		return x.ModifyUserInfo
	}
	return nil
}

func (x *WorkflowTemplateObject) GetWorkflowTemplateCreateTime() string {
	if x != nil {
		return x.WorkflowTemplateCreateTime
	}
	return ""
}

func (x *WorkflowTemplateObject) GetWorkflowTemplateModifyTime() string {
	if x != nil {
		return x.WorkflowTemplateModifyTime
	}
	return ""
}

type DescribeWorkflowTemplatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse           *apicommon.OperateResponse `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
	WorkflowTemplateObjectSet []*WorkflowTemplateObject  `protobuf:"bytes,2,rep,name=WorkflowTemplateObjectSet,proto3" json:"WorkflowTemplateObjectSet,omitempty"` // 返回的模板信息
	TotalCount                uint32                     `protobuf:"varint,3,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`                              // 返回的模板个数
}

func (x *DescribeWorkflowTemplatesResponse) Reset() {
	*x = DescribeWorkflowTemplatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeWorkflowTemplatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeWorkflowTemplatesResponse) ProtoMessage() {}

func (x *DescribeWorkflowTemplatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeWorkflowTemplatesResponse.ProtoReflect.Descriptor instead.
func (*DescribeWorkflowTemplatesResponse) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{8}
}

func (x *DescribeWorkflowTemplatesResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

func (x *DescribeWorkflowTemplatesResponse) GetWorkflowTemplateObjectSet() []*WorkflowTemplateObject {
	if x != nil {
		return x.WorkflowTemplateObjectSet
	}
	return nil
}

func (x *DescribeWorkflowTemplatesResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// ====================================== 查询模板详情 ======================================
type DescribeWorkflowTemplateDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowTemplateIdSet []string `protobuf:"bytes,1,rep,name=WorkflowTemplateIdSet,proto3" json:"WorkflowTemplateIdSet,omitempty"` // 模板Id
}

func (x *DescribeWorkflowTemplateDetailsRequest) Reset() {
	*x = DescribeWorkflowTemplateDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeWorkflowTemplateDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeWorkflowTemplateDetailsRequest) ProtoMessage() {}

func (x *DescribeWorkflowTemplateDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeWorkflowTemplateDetailsRequest.ProtoReflect.Descriptor instead.
func (*DescribeWorkflowTemplateDetailsRequest) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{9}
}

func (x *DescribeWorkflowTemplateDetailsRequest) GetWorkflowTemplateIdSet() []string {
	if x != nil {
		return x.WorkflowTemplateIdSet
	}
	return nil
}

type DescribeWorkflowTemplateDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse           *apicommon.OperateResponse `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
	WorkflowTemplateObjectSet []*WorkflowTemplateObject  `protobuf:"bytes,2,rep,name=WorkflowTemplateObjectSet,proto3" json:"WorkflowTemplateObjectSet,omitempty"` // 返回的模板信息
	TotalCount                uint32                     `protobuf:"varint,3,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`                              // 返回的模板个数
}

func (x *DescribeWorkflowTemplateDetailsResponse) Reset() {
	*x = DescribeWorkflowTemplateDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeWorkflowTemplateDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeWorkflowTemplateDetailsResponse) ProtoMessage() {}

func (x *DescribeWorkflowTemplateDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeWorkflowTemplateDetailsResponse.ProtoReflect.Descriptor instead.
func (*DescribeWorkflowTemplateDetailsResponse) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{10}
}

func (x *DescribeWorkflowTemplateDetailsResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

func (x *DescribeWorkflowTemplateDetailsResponse) GetWorkflowTemplateObjectSet() []*WorkflowTemplateObject {
	if x != nil {
		return x.WorkflowTemplateObjectSet
	}
	return nil
}

func (x *DescribeWorkflowTemplateDetailsResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// ====================================== 删除模板 ======================================
type DeleteWorkflowTemplatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleter *apicommon.Deleter `protobuf:"bytes,1,opt,name=Deleter,proto3" json:"Deleter,omitempty"` //删除类型
}

func (x *DeleteWorkflowTemplatesRequest) Reset() {
	*x = DeleteWorkflowTemplatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowTemplatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowTemplatesRequest) ProtoMessage() {}

func (x *DeleteWorkflowTemplatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowTemplatesRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowTemplatesRequest) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteWorkflowTemplatesRequest) GetDeleter() *apicommon.Deleter {
	if x != nil {
		return x.Deleter
	}
	return nil
}

type DeleteWorkflowTemplatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowTemplateOperateResponseSet []*WorkflowTemplateOperateResponse `protobuf:"bytes,1,rep,name=WorkflowTemplateOperateResponseSet,proto3" json:"WorkflowTemplateOperateResponseSet,omitempty"`
}

func (x *DeleteWorkflowTemplatesResponse) Reset() {
	*x = DeleteWorkflowTemplatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkflowTemplatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkflowTemplatesResponse) ProtoMessage() {}

func (x *DeleteWorkflowTemplatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkflowTemplatesResponse.ProtoReflect.Descriptor instead.
func (*DeleteWorkflowTemplatesResponse) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteWorkflowTemplatesResponse) GetWorkflowTemplateOperateResponseSet() []*WorkflowTemplateOperateResponse {
	if x != nil {
		return x.WorkflowTemplateOperateResponseSet
	}
	return nil
}

// ====================================== 修改模板 ======================================
type ModifyWorkflowTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowTemplateId     string                           `protobuf:"bytes,1,opt,name=WorkflowTemplateId,proto3" json:"WorkflowTemplateId,omitempty"`                                                        // 模板Id
	WorkflowTemplateStatus apicommon.WorkflowTemplateStatus `protobuf:"varint,2,opt,name=WorkflowTemplateStatus,proto3,enum=trpc.media.common.WorkflowTemplateStatus" json:"WorkflowTemplateStatus,omitempty"` // 修改后模板状态
	WorkflowTemplateInfo   *WorkflowTemplateInfo            `protobuf:"bytes,3,opt,name=WorkflowTemplateInfo,proto3" json:"WorkflowTemplateInfo,omitempty"`                                                    // 修改后模板信息
	EmptyReplace           bool                             `protobuf:"varint,4,opt,name=EmptyReplace,proto3" json:"EmptyReplace,omitempty"`                                                                   // 是否进行空值替换
}

func (x *ModifyWorkflowTemplateRequest) Reset() {
	*x = ModifyWorkflowTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyWorkflowTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyWorkflowTemplateRequest) ProtoMessage() {}

func (x *ModifyWorkflowTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyWorkflowTemplateRequest.ProtoReflect.Descriptor instead.
func (*ModifyWorkflowTemplateRequest) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{13}
}

func (x *ModifyWorkflowTemplateRequest) GetWorkflowTemplateId() string {
	if x != nil {
		return x.WorkflowTemplateId
	}
	return ""
}

func (x *ModifyWorkflowTemplateRequest) GetWorkflowTemplateStatus() apicommon.WorkflowTemplateStatus {
	if x != nil {
		return x.WorkflowTemplateStatus
	}
	return apicommon.WorkflowTemplateStatus_WORKFLOW_TEMPLATE_STATUS_INIT
}

func (x *ModifyWorkflowTemplateRequest) GetWorkflowTemplateInfo() *WorkflowTemplateInfo {
	if x != nil {
		return x.WorkflowTemplateInfo
	}
	return nil
}

func (x *ModifyWorkflowTemplateRequest) GetEmptyReplace() bool {
	if x != nil {
		return x.EmptyReplace
	}
	return false
}

type ModifyWorkflowTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse *apicommon.OperateResponse `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
}

func (x *ModifyWorkflowTemplateResponse) Reset() {
	*x = ModifyWorkflowTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyWorkflowTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyWorkflowTemplateResponse) ProtoMessage() {}

func (x *ModifyWorkflowTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyWorkflowTemplateResponse.ProtoReflect.Descriptor instead.
func (*ModifyWorkflowTemplateResponse) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{14}
}

func (x *ModifyWorkflowTemplateResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

// ====================================== 查询可用的模板组件 ======================================
type DescribeAvailableWorkflowTemplateComponentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowTemplateId string              `protobuf:"bytes,1,opt,name=WorkflowTemplateId,proto3" json:"WorkflowTemplateId,omitempty"`                 // 要查询的模板Id
	MediaType          apicommon.MediaType `protobuf:"varint,2,opt,name=MediaType,proto3,enum=trpc.media.common.MediaType" json:"MediaType,omitempty"` // 要查询的资源类型，1.0用这个查询
}

func (x *DescribeAvailableWorkflowTemplateComponentsRequest) Reset() {
	*x = DescribeAvailableWorkflowTemplateComponentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAvailableWorkflowTemplateComponentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAvailableWorkflowTemplateComponentsRequest) ProtoMessage() {}

func (x *DescribeAvailableWorkflowTemplateComponentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAvailableWorkflowTemplateComponentsRequest.ProtoReflect.Descriptor instead.
func (*DescribeAvailableWorkflowTemplateComponentsRequest) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{15}
}

func (x *DescribeAvailableWorkflowTemplateComponentsRequest) GetWorkflowTemplateId() string {
	if x != nil {
		return x.WorkflowTemplateId
	}
	return ""
}

func (x *DescribeAvailableWorkflowTemplateComponentsRequest) GetMediaType() apicommon.MediaType {
	if x != nil {
		return x.MediaType
	}
	return apicommon.MediaType_MEDIA_TYPE_OTHER
}

type DescribeAvailableWorkflowTemplateComponentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse *apicommon.OperateResponse `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
	TaskTemplateSet []*apicommon.TaskTemplate  `protobuf:"bytes,2,rep,name=TaskTemplateSet,proto3" json:"TaskTemplateSet,omitempty"` // 返回的可用组件信息
	TotalCount      uint32                     `protobuf:"varint,3,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`          // 返回的可用ApiModule的个数
}

func (x *DescribeAvailableWorkflowTemplateComponentsResponse) Reset() {
	*x = DescribeAvailableWorkflowTemplateComponentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_template_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAvailableWorkflowTemplateComponentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAvailableWorkflowTemplateComponentsResponse) ProtoMessage() {}

func (x *DescribeAvailableWorkflowTemplateComponentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_template_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAvailableWorkflowTemplateComponentsResponse.ProtoReflect.Descriptor instead.
func (*DescribeAvailableWorkflowTemplateComponentsResponse) Descriptor() ([]byte, []int) {
	return file_workflow_template_proto_rawDescGZIP(), []int{16}
}

func (x *DescribeAvailableWorkflowTemplateComponentsResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

func (x *DescribeAvailableWorkflowTemplateComponentsResponse) GetTaskTemplateSet() []*apicommon.TaskTemplate {
	if x != nil {
		return x.TaskTemplateSet
	}
	return nil
}

func (x *DescribeAvailableWorkflowTemplateComponentsResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_workflow_template_proto protoreflect.FileDescriptor

var file_workflow_template_proto_rawDesc = []byte{
	0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x1f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x32, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x40, 0x0a, 0x1b, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x49,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22,
	0xb6, 0x02, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x71, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x17, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x17, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x17, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x22, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x22, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x22,
	0xd0, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x53, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x22, 0x9c, 0x04, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x61, 0x0a,
	0x16, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x16, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x65, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3e, 0x0a, 0x1a, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x84, 0x02, 0x0a, 0x21, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x19, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x19, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x26, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x53, 0x65, 0x74, 0x22, 0x8a, 0x02, 0x0a, 0x27, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x71, 0x0a, 0x19, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x19, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x72, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x22, 0xb0, 0x01,
	0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x8c, 0x01, 0x0a, 0x22, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x22, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74,
	0x22, 0xbd, 0x02, 0x0a, 0x1d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x61, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x16, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x65, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x22, 0x6e, 0x0a, 0x1e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa0, 0x01, 0x0a, 0x32, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x33, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x32, 0xf3, 0x07, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x9a, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3d,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xac, 0x01,
	0x0a, 0x1f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x43, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x94, 0x01, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3a,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xd0, 0x01, 0x0a, 0x2b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x60, 0x5a, 0x5e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x2d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_workflow_template_proto_rawDescOnce sync.Once
	file_workflow_template_proto_rawDescData = file_workflow_template_proto_rawDesc
)

func file_workflow_template_proto_rawDescGZIP() []byte {
	file_workflow_template_proto_rawDescOnce.Do(func() {
		file_workflow_template_proto_rawDescData = protoimpl.X.CompressGZIP(file_workflow_template_proto_rawDescData)
	})
	return file_workflow_template_proto_rawDescData
}

var file_workflow_template_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_workflow_template_proto_goTypes = []interface{}{
	(*WorkflowTemplateOperateResponse)(nil),                     // 0: trpc.media.workflowtemplate.WorkflowTemplateOperateResponse
	(*WorkflowTemplateMetaInfo)(nil),                            // 1: trpc.media.workflowtemplate.WorkflowTemplateMetaInfo
	(*WorkflowTemplateInfo)(nil),                                // 2: trpc.media.workflowtemplate.WorkflowTemplateInfo
	(*CreateWorkflowTemplatesRequest)(nil),                      // 3: trpc.media.workflowtemplate.CreateWorkflowTemplatesRequest
	(*CreateWorkflowTemplatesOperateResponse)(nil),              // 4: trpc.media.workflowtemplate.CreateWorkflowTemplatesOperateResponse
	(*CreateWorkflowTemplatesResponse)(nil),                     // 5: trpc.media.workflowtemplate.CreateWorkflowTemplatesResponse
	(*DescribeWorkflowTemplatesRequest)(nil),                    // 6: trpc.media.workflowtemplate.DescribeWorkflowTemplatesRequest
	(*WorkflowTemplateObject)(nil),                              // 7: trpc.media.workflowtemplate.WorkflowTemplateObject
	(*DescribeWorkflowTemplatesResponse)(nil),                   // 8: trpc.media.workflowtemplate.DescribeWorkflowTemplatesResponse
	(*DescribeWorkflowTemplateDetailsRequest)(nil),              // 9: trpc.media.workflowtemplate.DescribeWorkflowTemplateDetailsRequest
	(*DescribeWorkflowTemplateDetailsResponse)(nil),             // 10: trpc.media.workflowtemplate.DescribeWorkflowTemplateDetailsResponse
	(*DeleteWorkflowTemplatesRequest)(nil),                      // 11: trpc.media.workflowtemplate.DeleteWorkflowTemplatesRequest
	(*DeleteWorkflowTemplatesResponse)(nil),                     // 12: trpc.media.workflowtemplate.DeleteWorkflowTemplatesResponse
	(*ModifyWorkflowTemplateRequest)(nil),                       // 13: trpc.media.workflowtemplate.ModifyWorkflowTemplateRequest
	(*ModifyWorkflowTemplateResponse)(nil),                      // 14: trpc.media.workflowtemplate.ModifyWorkflowTemplateResponse
	(*DescribeAvailableWorkflowTemplateComponentsRequest)(nil),  // 15: trpc.media.workflowtemplate.DescribeAvailableWorkflowTemplateComponentsRequest
	(*DescribeAvailableWorkflowTemplateComponentsResponse)(nil), // 16: trpc.media.workflowtemplate.DescribeAvailableWorkflowTemplateComponentsResponse
	(*apicommon.OperateResponse)(nil),                           // 17: trpc.media.common.OperateResponse
	(apicommon.MediaType)(0),                                    // 18: trpc.media.common.MediaType
	(*apicommon.WorkflowTemplate)(nil),                          // 19: trpc.media.common.WorkflowTemplate
	(*apicommon.DomainGroupInfo)(nil),                           // 20: trpc.media.common.DomainGroupInfo
	(*apicommon.Filter)(nil),                                    // 21: trpc.media.common.Filter
	(*apicommon.Sorter)(nil),                                    // 22: trpc.media.common.Sorter
	(apicommon.WorkflowTemplateStatus)(0),                       // 23: trpc.media.common.WorkflowTemplateStatus
	(*apicommon.UserInfo)(nil),                                  // 24: trpc.media.common.UserInfo
	(*apicommon.Deleter)(nil),                                   // 25: trpc.media.common.Deleter
	(*apicommon.TaskTemplate)(nil),                              // 26: trpc.media.common.TaskTemplate
}
var file_workflow_template_proto_depIdxs = []int32{
	17, // 0: trpc.media.workflowtemplate.WorkflowTemplateOperateResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	18, // 1: trpc.media.workflowtemplate.WorkflowTemplateMetaInfo.MediaType:type_name -> trpc.media.common.MediaType
	1,  // 2: trpc.media.workflowtemplate.WorkflowTemplateInfo.WorkflowTemplateMetaInfo:type_name -> trpc.media.workflowtemplate.WorkflowTemplateMetaInfo
	19, // 3: trpc.media.workflowtemplate.WorkflowTemplateInfo.WorkflowTemplateContent:type_name -> trpc.media.common.WorkflowTemplate
	20, // 4: trpc.media.workflowtemplate.WorkflowTemplateInfo.DomainGroupInfo:type_name -> trpc.media.common.DomainGroupInfo
	2,  // 5: trpc.media.workflowtemplate.CreateWorkflowTemplatesRequest.WorkflowTemplateInfoSet:type_name -> trpc.media.workflowtemplate.WorkflowTemplateInfo
	17, // 6: trpc.media.workflowtemplate.CreateWorkflowTemplatesOperateResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	4,  // 7: trpc.media.workflowtemplate.CreateWorkflowTemplatesResponse.WorkflowTemplateOperateResponseSet:type_name -> trpc.media.workflowtemplate.CreateWorkflowTemplatesOperateResponse
	21, // 8: trpc.media.workflowtemplate.DescribeWorkflowTemplatesRequest.FilterSet:type_name -> trpc.media.common.Filter
	22, // 9: trpc.media.workflowtemplate.DescribeWorkflowTemplatesRequest.SorterSet:type_name -> trpc.media.common.Sorter
	23, // 10: trpc.media.workflowtemplate.WorkflowTemplateObject.WorkflowTemplateStatus:type_name -> trpc.media.common.WorkflowTemplateStatus
	2,  // 11: trpc.media.workflowtemplate.WorkflowTemplateObject.WorkflowTemplateInfo:type_name -> trpc.media.workflowtemplate.WorkflowTemplateInfo
	24, // 12: trpc.media.workflowtemplate.WorkflowTemplateObject.CreateUserInfo:type_name -> trpc.media.common.UserInfo
	24, // 13: trpc.media.workflowtemplate.WorkflowTemplateObject.ModifyUserInfo:type_name -> trpc.media.common.UserInfo
	17, // 14: trpc.media.workflowtemplate.DescribeWorkflowTemplatesResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	7,  // 15: trpc.media.workflowtemplate.DescribeWorkflowTemplatesResponse.WorkflowTemplateObjectSet:type_name -> trpc.media.workflowtemplate.WorkflowTemplateObject
	17, // 16: trpc.media.workflowtemplate.DescribeWorkflowTemplateDetailsResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	7,  // 17: trpc.media.workflowtemplate.DescribeWorkflowTemplateDetailsResponse.WorkflowTemplateObjectSet:type_name -> trpc.media.workflowtemplate.WorkflowTemplateObject
	25, // 18: trpc.media.workflowtemplate.DeleteWorkflowTemplatesRequest.Deleter:type_name -> trpc.media.common.Deleter
	0,  // 19: trpc.media.workflowtemplate.DeleteWorkflowTemplatesResponse.WorkflowTemplateOperateResponseSet:type_name -> trpc.media.workflowtemplate.WorkflowTemplateOperateResponse
	23, // 20: trpc.media.workflowtemplate.ModifyWorkflowTemplateRequest.WorkflowTemplateStatus:type_name -> trpc.media.common.WorkflowTemplateStatus
	2,  // 21: trpc.media.workflowtemplate.ModifyWorkflowTemplateRequest.WorkflowTemplateInfo:type_name -> trpc.media.workflowtemplate.WorkflowTemplateInfo
	17, // 22: trpc.media.workflowtemplate.ModifyWorkflowTemplateResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	18, // 23: trpc.media.workflowtemplate.DescribeAvailableWorkflowTemplateComponentsRequest.MediaType:type_name -> trpc.media.common.MediaType
	17, // 24: trpc.media.workflowtemplate.DescribeAvailableWorkflowTemplateComponentsResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	26, // 25: trpc.media.workflowtemplate.DescribeAvailableWorkflowTemplateComponentsResponse.TaskTemplateSet:type_name -> trpc.media.common.TaskTemplate
	3,  // 26: trpc.media.workflowtemplate.WorkflowTemplate.CreateWorkflowTemplates:input_type -> trpc.media.workflowtemplate.CreateWorkflowTemplatesRequest
	6,  // 27: trpc.media.workflowtemplate.WorkflowTemplate.DescribeWorkflowTemplates:input_type -> trpc.media.workflowtemplate.DescribeWorkflowTemplatesRequest
	9,  // 28: trpc.media.workflowtemplate.WorkflowTemplate.DescribeWorkflowTemplateDetails:input_type -> trpc.media.workflowtemplate.DescribeWorkflowTemplateDetailsRequest
	11, // 29: trpc.media.workflowtemplate.WorkflowTemplate.DeleteWorkflowTemplates:input_type -> trpc.media.workflowtemplate.DeleteWorkflowTemplatesRequest
	13, // 30: trpc.media.workflowtemplate.WorkflowTemplate.ModifyWorkflowTemplate:input_type -> trpc.media.workflowtemplate.ModifyWorkflowTemplateRequest
	15, // 31: trpc.media.workflowtemplate.WorkflowTemplate.DescribeAvailableWorkflowTemplateComponents:input_type -> trpc.media.workflowtemplate.DescribeAvailableWorkflowTemplateComponentsRequest
	5,  // 32: trpc.media.workflowtemplate.WorkflowTemplate.CreateWorkflowTemplates:output_type -> trpc.media.workflowtemplate.CreateWorkflowTemplatesResponse
	8,  // 33: trpc.media.workflowtemplate.WorkflowTemplate.DescribeWorkflowTemplates:output_type -> trpc.media.workflowtemplate.DescribeWorkflowTemplatesResponse
	10, // 34: trpc.media.workflowtemplate.WorkflowTemplate.DescribeWorkflowTemplateDetails:output_type -> trpc.media.workflowtemplate.DescribeWorkflowTemplateDetailsResponse
	12, // 35: trpc.media.workflowtemplate.WorkflowTemplate.DeleteWorkflowTemplates:output_type -> trpc.media.workflowtemplate.DeleteWorkflowTemplatesResponse
	14, // 36: trpc.media.workflowtemplate.WorkflowTemplate.ModifyWorkflowTemplate:output_type -> trpc.media.workflowtemplate.ModifyWorkflowTemplateResponse
	16, // 37: trpc.media.workflowtemplate.WorkflowTemplate.DescribeAvailableWorkflowTemplateComponents:output_type -> trpc.media.workflowtemplate.DescribeAvailableWorkflowTemplateComponentsResponse
	32, // [32:38] is the sub-list for method output_type
	26, // [26:32] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_workflow_template_proto_init() }
func file_workflow_template_proto_init() {
	if File_workflow_template_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_workflow_template_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowTemplateOperateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowTemplateMetaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowTemplateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkflowTemplatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkflowTemplatesOperateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkflowTemplatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeWorkflowTemplatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowTemplateObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeWorkflowTemplatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeWorkflowTemplateDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeWorkflowTemplateDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowTemplatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkflowTemplatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyWorkflowTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyWorkflowTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAvailableWorkflowTemplateComponentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_template_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAvailableWorkflowTemplateComponentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workflow_template_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workflow_template_proto_goTypes,
		DependencyIndexes: file_workflow_template_proto_depIdxs,
		MessageInfos:      file_workflow_template_proto_msgTypes,
	}.Build()
	File_workflow_template_proto = out.File
	file_workflow_template_proto_rawDesc = nil
	file_workflow_template_proto_goTypes = nil
	file_workflow_template_proto_depIdxs = nil
}
