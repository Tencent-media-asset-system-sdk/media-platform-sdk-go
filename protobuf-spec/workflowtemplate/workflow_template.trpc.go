// Code generated by trpc-go/trpc-go-cmdline v2.2.18. DO NOT EDIT.
// source: workflow_template.proto

package workflowtemplate

import (
	"context"
	"errors"
	"fmt"

	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/client"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/codec"
	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/http"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/server"
)

// START ======================================= Server Service Definition ======================================= START

// WorkflowTemplateService defines service.
type WorkflowTemplateService interface {
	// CreateWorkflowTemplates 工作流模板管理
	CreateWorkflowTemplates(ctx context.Context, req *CreateWorkflowTemplatesRequest, rsp *CreateWorkflowTemplatesResponse) (err error) // @alias=/CreateWorkflowTemplates

	DescribeWorkflowTemplates(ctx context.Context, req *DescribeWorkflowTemplatesRequest, rsp *DescribeWorkflowTemplatesResponse) (err error) // @alias=/DescribeWorkflowTemplates

	DescribeWorkflowTemplateDetails(ctx context.Context, req *DescribeWorkflowTemplateDetailsRequest, rsp *DescribeWorkflowTemplateDetailsResponse) (err error) // @alias=/DescribeWorkflowTemplateDetails

	DeleteWorkflowTemplates(ctx context.Context, req *DeleteWorkflowTemplatesRequest, rsp *DeleteWorkflowTemplatesResponse) (err error) // @alias=/DeleteWorkflowTemplates

	ModifyWorkflowTemplate(ctx context.Context, req *ModifyWorkflowTemplateRequest, rsp *ModifyWorkflowTemplateResponse) (err error) // @alias=/ModifyWorkflowTemplate

	DescribeAvailableWorkflowTemplateComponents(ctx context.Context, req *DescribeAvailableWorkflowTemplateComponentsRequest, rsp *DescribeAvailableWorkflowTemplateComponentsResponse) (err error) // @alias=/DescribeAvailableWorkflowTemplateComponents
}

func WorkflowTemplateService_CreateWorkflowTemplates_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateWorkflowTemplatesRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(WorkflowTemplateService).CreateWorkflowTemplates(ctx, reqbody.(*CreateWorkflowTemplatesRequest), rspbody.(*CreateWorkflowTemplatesResponse))
	}

	rsp := &CreateWorkflowTemplatesResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func WorkflowTemplateService_DescribeWorkflowTemplates_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeWorkflowTemplatesRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(WorkflowTemplateService).DescribeWorkflowTemplates(ctx, reqbody.(*DescribeWorkflowTemplatesRequest), rspbody.(*DescribeWorkflowTemplatesResponse))
	}

	rsp := &DescribeWorkflowTemplatesResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func WorkflowTemplateService_DescribeWorkflowTemplateDetails_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeWorkflowTemplateDetailsRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(WorkflowTemplateService).DescribeWorkflowTemplateDetails(ctx, reqbody.(*DescribeWorkflowTemplateDetailsRequest), rspbody.(*DescribeWorkflowTemplateDetailsResponse))
	}

	rsp := &DescribeWorkflowTemplateDetailsResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func WorkflowTemplateService_DeleteWorkflowTemplates_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DeleteWorkflowTemplatesRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(WorkflowTemplateService).DeleteWorkflowTemplates(ctx, reqbody.(*DeleteWorkflowTemplatesRequest), rspbody.(*DeleteWorkflowTemplatesResponse))
	}

	rsp := &DeleteWorkflowTemplatesResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func WorkflowTemplateService_ModifyWorkflowTemplate_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ModifyWorkflowTemplateRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(WorkflowTemplateService).ModifyWorkflowTemplate(ctx, reqbody.(*ModifyWorkflowTemplateRequest), rspbody.(*ModifyWorkflowTemplateResponse))
	}

	rsp := &ModifyWorkflowTemplateResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func WorkflowTemplateService_DescribeAvailableWorkflowTemplateComponents_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeAvailableWorkflowTemplateComponentsRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(WorkflowTemplateService).DescribeAvailableWorkflowTemplateComponents(ctx, reqbody.(*DescribeAvailableWorkflowTemplateComponentsRequest), rspbody.(*DescribeAvailableWorkflowTemplateComponentsResponse))
	}

	rsp := &DescribeAvailableWorkflowTemplateComponentsResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// WorkflowTemplateServer_ServiceDesc descriptor for server.RegisterService.
var WorkflowTemplateServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.workflowtemplate.WorkflowTemplate",
	HandlerType: ((*WorkflowTemplateService)(nil)),
	Methods: []server.Method{
		{
			Name: "/CreateWorkflowTemplates",
			Func: WorkflowTemplateService_CreateWorkflowTemplates_Handler,
		},
		{
			Name: "/DescribeWorkflowTemplates",
			Func: WorkflowTemplateService_DescribeWorkflowTemplates_Handler,
		},
		{
			Name: "/DescribeWorkflowTemplateDetails",
			Func: WorkflowTemplateService_DescribeWorkflowTemplateDetails_Handler,
		},
		{
			Name: "/DeleteWorkflowTemplates",
			Func: WorkflowTemplateService_DeleteWorkflowTemplates_Handler,
		},
		{
			Name: "/ModifyWorkflowTemplate",
			Func: WorkflowTemplateService_ModifyWorkflowTemplate_Handler,
		},
		{
			Name: "/DescribeAvailableWorkflowTemplateComponents",
			Func: WorkflowTemplateService_DescribeAvailableWorkflowTemplateComponents_Handler,
		},
		{
			Name: "/trpc.media.workflowtemplate.WorkflowTemplate/CreateWorkflowTemplates",
			Func: WorkflowTemplateService_CreateWorkflowTemplates_Handler,
		},
		{
			Name: "/trpc.media.workflowtemplate.WorkflowTemplate/DescribeWorkflowTemplates",
			Func: WorkflowTemplateService_DescribeWorkflowTemplates_Handler,
		},
		{
			Name: "/trpc.media.workflowtemplate.WorkflowTemplate/DescribeWorkflowTemplateDetails",
			Func: WorkflowTemplateService_DescribeWorkflowTemplateDetails_Handler,
		},
		{
			Name: "/trpc.media.workflowtemplate.WorkflowTemplate/DeleteWorkflowTemplates",
			Func: WorkflowTemplateService_DeleteWorkflowTemplates_Handler,
		},
		{
			Name: "/trpc.media.workflowtemplate.WorkflowTemplate/ModifyWorkflowTemplate",
			Func: WorkflowTemplateService_ModifyWorkflowTemplate_Handler,
		},
		{
			Name: "/trpc.media.workflowtemplate.WorkflowTemplate/DescribeAvailableWorkflowTemplateComponents",
			Func: WorkflowTemplateService_DescribeAvailableWorkflowTemplateComponents_Handler,
		},
	},
}

// RegisterWorkflowTemplateService registers service.
func RegisterWorkflowTemplateService(s server.Service, svr WorkflowTemplateService) {
	if err := s.Register(&WorkflowTemplateServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("WorkflowTemplate register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedWorkflowTemplate struct{}

// CreateWorkflowTemplates 工作流模板管理
func (s *UnimplementedWorkflowTemplate) CreateWorkflowTemplates(ctx context.Context, req *CreateWorkflowTemplatesRequest, rsp *CreateWorkflowTemplatesResponse) error {
	return errors.New("rpc CreateWorkflowTemplates of service WorkflowTemplate is not implemented")
}
func (s *UnimplementedWorkflowTemplate) DescribeWorkflowTemplates(ctx context.Context, req *DescribeWorkflowTemplatesRequest, rsp *DescribeWorkflowTemplatesResponse) error {
	return errors.New("rpc DescribeWorkflowTemplates of service WorkflowTemplate is not implemented")
}
func (s *UnimplementedWorkflowTemplate) DescribeWorkflowTemplateDetails(ctx context.Context, req *DescribeWorkflowTemplateDetailsRequest, rsp *DescribeWorkflowTemplateDetailsResponse) error {
	return errors.New("rpc DescribeWorkflowTemplateDetails of service WorkflowTemplate is not implemented")
}
func (s *UnimplementedWorkflowTemplate) DeleteWorkflowTemplates(ctx context.Context, req *DeleteWorkflowTemplatesRequest, rsp *DeleteWorkflowTemplatesResponse) error {
	return errors.New("rpc DeleteWorkflowTemplates of service WorkflowTemplate is not implemented")
}
func (s *UnimplementedWorkflowTemplate) ModifyWorkflowTemplate(ctx context.Context, req *ModifyWorkflowTemplateRequest, rsp *ModifyWorkflowTemplateResponse) error {
	return errors.New("rpc ModifyWorkflowTemplate of service WorkflowTemplate is not implemented")
}
func (s *UnimplementedWorkflowTemplate) DescribeAvailableWorkflowTemplateComponents(ctx context.Context, req *DescribeAvailableWorkflowTemplateComponentsRequest, rsp *DescribeAvailableWorkflowTemplateComponentsResponse) error {
	return errors.New("rpc DescribeAvailableWorkflowTemplateComponents of service WorkflowTemplate is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// WorkflowTemplateClientProxy defines service client proxy
type WorkflowTemplateClientProxy interface {
	// CreateWorkflowTemplates 工作流模板管理
	CreateWorkflowTemplates(ctx context.Context, req *CreateWorkflowTemplatesRequest, opts ...client.Option) (rsp *CreateWorkflowTemplatesResponse, err error) // @alias=/CreateWorkflowTemplates

	DescribeWorkflowTemplates(ctx context.Context, req *DescribeWorkflowTemplatesRequest, opts ...client.Option) (rsp *DescribeWorkflowTemplatesResponse, err error) // @alias=/DescribeWorkflowTemplates

	DescribeWorkflowTemplateDetails(ctx context.Context, req *DescribeWorkflowTemplateDetailsRequest, opts ...client.Option) (rsp *DescribeWorkflowTemplateDetailsResponse, err error) // @alias=/DescribeWorkflowTemplateDetails

	DeleteWorkflowTemplates(ctx context.Context, req *DeleteWorkflowTemplatesRequest, opts ...client.Option) (rsp *DeleteWorkflowTemplatesResponse, err error) // @alias=/DeleteWorkflowTemplates

	ModifyWorkflowTemplate(ctx context.Context, req *ModifyWorkflowTemplateRequest, opts ...client.Option) (rsp *ModifyWorkflowTemplateResponse, err error) // @alias=/ModifyWorkflowTemplate

	DescribeAvailableWorkflowTemplateComponents(ctx context.Context, req *DescribeAvailableWorkflowTemplateComponentsRequest, opts ...client.Option) (rsp *DescribeAvailableWorkflowTemplateComponentsResponse, err error) // @alias=/DescribeAvailableWorkflowTemplateComponents
}

type WorkflowTemplateClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewWorkflowTemplateClientProxy = func(opts ...client.Option) WorkflowTemplateClientProxy {
	return &WorkflowTemplateClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *WorkflowTemplateClientProxyImpl) CreateWorkflowTemplates(ctx context.Context, req *CreateWorkflowTemplatesRequest, opts ...client.Option) (*CreateWorkflowTemplatesResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/CreateWorkflowTemplates")
	msg.WithCalleeServiceName(WorkflowTemplateServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("workflowtemplate")
	msg.WithCalleeService("WorkflowTemplate")
	msg.WithCalleeMethod("CreateWorkflowTemplates")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateWorkflowTemplatesResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *WorkflowTemplateClientProxyImpl) DescribeWorkflowTemplates(ctx context.Context, req *DescribeWorkflowTemplatesRequest, opts ...client.Option) (*DescribeWorkflowTemplatesResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeWorkflowTemplates")
	msg.WithCalleeServiceName(WorkflowTemplateServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("workflowtemplate")
	msg.WithCalleeService("WorkflowTemplate")
	msg.WithCalleeMethod("DescribeWorkflowTemplates")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeWorkflowTemplatesResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *WorkflowTemplateClientProxyImpl) DescribeWorkflowTemplateDetails(ctx context.Context, req *DescribeWorkflowTemplateDetailsRequest, opts ...client.Option) (*DescribeWorkflowTemplateDetailsResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeWorkflowTemplateDetails")
	msg.WithCalleeServiceName(WorkflowTemplateServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("workflowtemplate")
	msg.WithCalleeService("WorkflowTemplate")
	msg.WithCalleeMethod("DescribeWorkflowTemplateDetails")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeWorkflowTemplateDetailsResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *WorkflowTemplateClientProxyImpl) DeleteWorkflowTemplates(ctx context.Context, req *DeleteWorkflowTemplatesRequest, opts ...client.Option) (*DeleteWorkflowTemplatesResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DeleteWorkflowTemplates")
	msg.WithCalleeServiceName(WorkflowTemplateServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("workflowtemplate")
	msg.WithCalleeService("WorkflowTemplate")
	msg.WithCalleeMethod("DeleteWorkflowTemplates")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DeleteWorkflowTemplatesResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *WorkflowTemplateClientProxyImpl) ModifyWorkflowTemplate(ctx context.Context, req *ModifyWorkflowTemplateRequest, opts ...client.Option) (*ModifyWorkflowTemplateResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/ModifyWorkflowTemplate")
	msg.WithCalleeServiceName(WorkflowTemplateServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("workflowtemplate")
	msg.WithCalleeService("WorkflowTemplate")
	msg.WithCalleeMethod("ModifyWorkflowTemplate")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ModifyWorkflowTemplateResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *WorkflowTemplateClientProxyImpl) DescribeAvailableWorkflowTemplateComponents(ctx context.Context, req *DescribeAvailableWorkflowTemplateComponentsRequest, opts ...client.Option) (*DescribeAvailableWorkflowTemplateComponentsResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeAvailableWorkflowTemplateComponents")
	msg.WithCalleeServiceName(WorkflowTemplateServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("workflowtemplate")
	msg.WithCalleeService("WorkflowTemplate")
	msg.WithCalleeMethod("DescribeAvailableWorkflowTemplateComponents")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeAvailableWorkflowTemplateComponentsResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
