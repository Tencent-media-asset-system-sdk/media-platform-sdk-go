// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: video_quality_evaluation.proto

package videoquality

import (
	reflect "reflect"
	sync "sync"

	apicommon "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/apicommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoDefectInfo_VideoDefectType int32

const (
	VideoDefectInfo_kUnknown        VideoDefectInfo_VideoDefectType = 0  // 预留不使用
	VideoDefectInfo_kSnowNoise      VideoDefectInfo_VideoDefectType = 1  // 雪花噪点
	VideoDefectInfo_kColorBar       VideoDefectInfo_VideoDefectType = 2  // 彩条
	VideoDefectInfo_kMosaic         VideoDefectInfo_VideoDefectType = 3  // 马赛克
	VideoDefectInfo_kBlackBorder    VideoDefectInfo_VideoDefectType = 4  // 黑边
	VideoDefectInfo_kWhiteBorder    VideoDefectInfo_VideoDefectType = 5  // 白边
	VideoDefectInfo_kFrostingBorder VideoDefectInfo_VideoDefectType = 6  // 毛玻璃边
	VideoDefectInfo_kShaking        VideoDefectInfo_VideoDefectType = 7  // 画面抖动
	VideoDefectInfo_kStatic         VideoDefectInfo_VideoDefectType = 8  // 画面静止
	VideoDefectInfo_kUnderExposure  VideoDefectInfo_VideoDefectType = 9  // 欠曝光
	VideoDefectInfo_kOverExposure   VideoDefectInfo_VideoDefectType = 10 // 过曝光
	VideoDefectInfo_kNoiseImage     VideoDefectInfo_VideoDefectType = 11 // 噪声图像
	VideoDefectInfo_kBlurImage      VideoDefectInfo_VideoDefectType = 12 // 模糊图像
	VideoDefectInfo_kBarCode        VideoDefectInfo_VideoDefectType = 13 // 条形码
	VideoDefectInfo_kQrCode         VideoDefectInfo_VideoDefectType = 14 // 二维码
	VideoDefectInfo_kHuaPing        VideoDefectInfo_VideoDefectType = 15 // 花屏
	VideoDefectInfo_kPureImage      VideoDefectInfo_VideoDefectType = 16 // 纯色屏
	VideoDefectInfo_kWxCode         VideoDefectInfo_VideoDefectType = 17 // 微信码
	VideoDefectInfo_kSizeVariant    VideoDefectInfo_VideoDefectType = 18 // 画幅变化
)

// Enum value maps for VideoDefectInfo_VideoDefectType.
var (
	VideoDefectInfo_VideoDefectType_name = map[int32]string{
		0:  "kUnknown",
		1:  "kSnowNoise",
		2:  "kColorBar",
		3:  "kMosaic",
		4:  "kBlackBorder",
		5:  "kWhiteBorder",
		6:  "kFrostingBorder",
		7:  "kShaking",
		8:  "kStatic",
		9:  "kUnderExposure",
		10: "kOverExposure",
		11: "kNoiseImage",
		12: "kBlurImage",
		13: "kBarCode",
		14: "kQrCode",
		15: "kHuaPing",
		16: "kPureImage",
		17: "kWxCode",
		18: "kSizeVariant",
	}
	VideoDefectInfo_VideoDefectType_value = map[string]int32{
		"kUnknown":        0,
		"kSnowNoise":      1,
		"kColorBar":       2,
		"kMosaic":         3,
		"kBlackBorder":    4,
		"kWhiteBorder":    5,
		"kFrostingBorder": 6,
		"kShaking":        7,
		"kStatic":         8,
		"kUnderExposure":  9,
		"kOverExposure":   10,
		"kNoiseImage":     11,
		"kBlurImage":      12,
		"kBarCode":        13,
		"kQrCode":         14,
		"kHuaPing":        15,
		"kPureImage":      16,
		"kWxCode":         17,
		"kSizeVariant":    18,
	}
)

func (x VideoDefectInfo_VideoDefectType) Enum() *VideoDefectInfo_VideoDefectType {
	p := new(VideoDefectInfo_VideoDefectType)
	*p = x
	return p
}

func (x VideoDefectInfo_VideoDefectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoDefectInfo_VideoDefectType) Descriptor() protoreflect.EnumDescriptor {
	return file_video_quality_evaluation_proto_enumTypes[0].Descriptor()
}

func (VideoDefectInfo_VideoDefectType) Type() protoreflect.EnumType {
	return &file_video_quality_evaluation_proto_enumTypes[0]
}

func (x VideoDefectInfo_VideoDefectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoDefectInfo_VideoDefectType.Descriptor instead.
func (VideoDefectInfo_VideoDefectType) EnumDescriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{8, 0}
}

type AudioDefectInfo_AudioDefectType int32

const (
	AudioDefectInfo_kUnknown    AudioDefectInfo_AudioDefectType = 0  // 预留不使用
	AudioDefectInfo_kVolumeMute AudioDefectInfo_AudioDefectType = 19 // 静音
	AudioDefectInfo_kVolumeLow  AudioDefectInfo_AudioDefectType = 20 // 低音
	AudioDefectInfo_kVolumeHigh AudioDefectInfo_AudioDefectType = 21 // 高音
	AudioDefectInfo_kNoVolume   AudioDefectInfo_AudioDefectType = 22 // 无音轨
)

// Enum value maps for AudioDefectInfo_AudioDefectType.
var (
	AudioDefectInfo_AudioDefectType_name = map[int32]string{
		0:  "kUnknown",
		19: "kVolumeMute",
		20: "kVolumeLow",
		21: "kVolumeHigh",
		22: "kNoVolume",
	}
	AudioDefectInfo_AudioDefectType_value = map[string]int32{
		"kUnknown":    0,
		"kVolumeMute": 19,
		"kVolumeLow":  20,
		"kVolumeHigh": 21,
		"kNoVolume":   22,
	}
)

func (x AudioDefectInfo_AudioDefectType) Enum() *AudioDefectInfo_AudioDefectType {
	p := new(AudioDefectInfo_AudioDefectType)
	*p = x
	return p
}

func (x AudioDefectInfo_AudioDefectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioDefectInfo_AudioDefectType) Descriptor() protoreflect.EnumDescriptor {
	return file_video_quality_evaluation_proto_enumTypes[1].Descriptor()
}

func (AudioDefectInfo_AudioDefectType) Type() protoreflect.EnumType {
	return &file_video_quality_evaluation_proto_enumTypes[1]
}

func (x AudioDefectInfo_AudioDefectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioDefectInfo_AudioDefectType.Descriptor instead.
func (AudioDefectInfo_AudioDefectType) EnumDescriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{9, 0}
}

type CreateVideoQualityEvaluationTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId     string `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	TaskName    string `protobuf:"bytes,4,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	CallbackURL string `protobuf:"bytes,5,opt,name=CallbackURL,proto3" json:"CallbackURL,omitempty"`
}

func (x *CreateVideoQualityEvaluationTaskRequest) Reset() {
	*x = CreateVideoQualityEvaluationTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_quality_evaluation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVideoQualityEvaluationTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoQualityEvaluationTaskRequest) ProtoMessage() {}

func (x *CreateVideoQualityEvaluationTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_quality_evaluation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoQualityEvaluationTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateVideoQualityEvaluationTaskRequest) Descriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVideoQualityEvaluationTaskRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *CreateVideoQualityEvaluationTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *CreateVideoQualityEvaluationTaskRequest) GetCallbackURL() string {
	if x != nil {
		return x.CallbackURL
	}
	return ""
}

type CreateVideoQualityEvaluationTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *CreateVideoQualityEvaluationTaskResponse) Reset() {
	*x = CreateVideoQualityEvaluationTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_quality_evaluation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVideoQualityEvaluationTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoQualityEvaluationTaskResponse) ProtoMessage() {}

func (x *CreateVideoQualityEvaluationTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_quality_evaluation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoQualityEvaluationTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateVideoQualityEvaluationTaskResponse) Descriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVideoQualityEvaluationTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type VideoDefectLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefectType         VideoDefectInfo_VideoDefectType `protobuf:"varint,1,opt,name=DefectType,proto3,enum=trpc.media.videoquality.VideoDefectInfo_VideoDefectType" json:"DefectType,omitempty"`
	LowerDurationLimit uint32                          `protobuf:"varint,2,opt,name=LowerDurationLimit,proto3" json:"LowerDurationLimit,omitempty"`
}

func (x *VideoDefectLimit) Reset() {
	*x = VideoDefectLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_quality_evaluation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoDefectLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoDefectLimit) ProtoMessage() {}

func (x *VideoDefectLimit) ProtoReflect() protoreflect.Message {
	mi := &file_video_quality_evaluation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoDefectLimit.ProtoReflect.Descriptor instead.
func (*VideoDefectLimit) Descriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{2}
}

func (x *VideoDefectLimit) GetDefectType() VideoDefectInfo_VideoDefectType {
	if x != nil {
		return x.DefectType
	}
	return VideoDefectInfo_kUnknown
}

func (x *VideoDefectLimit) GetLowerDurationLimit() uint32 {
	if x != nil {
		return x.LowerDurationLimit
	}
	return 0
}

type AudioDefectLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefectType         AudioDefectInfo_AudioDefectType `protobuf:"varint,1,opt,name=DefectType,proto3,enum=trpc.media.videoquality.AudioDefectInfo_AudioDefectType" json:"DefectType,omitempty"`
	LowerDurationLimit uint32                          `protobuf:"varint,2,opt,name=LowerDurationLimit,proto3" json:"LowerDurationLimit,omitempty"`
}

func (x *AudioDefectLimit) Reset() {
	*x = AudioDefectLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_quality_evaluation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioDefectLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioDefectLimit) ProtoMessage() {}

func (x *AudioDefectLimit) ProtoReflect() protoreflect.Message {
	mi := &file_video_quality_evaluation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioDefectLimit.ProtoReflect.Descriptor instead.
func (*AudioDefectLimit) Descriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{3}
}

func (x *AudioDefectLimit) GetDefectType() AudioDefectInfo_AudioDefectType {
	if x != nil {
		return x.DefectType
	}
	return AudioDefectInfo_kUnknown
}

func (x *AudioDefectLimit) GetLowerDurationLimit() uint32 {
	if x != nil {
		return x.LowerDurationLimit
	}
	return 0
}

type DescribeVideoQualityLimitListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=RequestId,proto3" json:"RequestId,omitempty"`
	ProjectId uint32 `protobuf:"varint,2,opt,name=ProjectId,proto3" json:"ProjectId,omitempty"`
}

func (x *DescribeVideoQualityLimitListRequest) Reset() {
	*x = DescribeVideoQualityLimitListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_quality_evaluation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVideoQualityLimitListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVideoQualityLimitListRequest) ProtoMessage() {}

func (x *DescribeVideoQualityLimitListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_quality_evaluation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVideoQualityLimitListRequest.ProtoReflect.Descriptor instead.
func (*DescribeVideoQualityLimitListRequest) Descriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{4}
}

func (x *DescribeVideoQualityLimitListRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DescribeVideoQualityLimitListRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

type DescribeVideoQualityLimitListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoDefectLimitList []*VideoDefectLimit `protobuf:"bytes,2,rep,name=VideoDefectLimitList,proto3" json:"VideoDefectLimitList,omitempty"`
	AudioDefectLimitList []*AudioDefectLimit `protobuf:"bytes,3,rep,name=AudioDefectLimitList,proto3" json:"AudioDefectLimitList,omitempty"`
}

func (x *DescribeVideoQualityLimitListResponse) Reset() {
	*x = DescribeVideoQualityLimitListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_quality_evaluation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVideoQualityLimitListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVideoQualityLimitListResponse) ProtoMessage() {}

func (x *DescribeVideoQualityLimitListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_quality_evaluation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVideoQualityLimitListResponse.ProtoReflect.Descriptor instead.
func (*DescribeVideoQualityLimitListResponse) Descriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{5}
}

func (x *DescribeVideoQualityLimitListResponse) GetVideoDefectLimitList() []*VideoDefectLimit {
	if x != nil {
		return x.VideoDefectLimitList
	}
	return nil
}

func (x *DescribeVideoQualityLimitListResponse) GetAudioDefectLimitList() []*AudioDefectLimit {
	if x != nil {
		return x.AudioDefectLimitList
	}
	return nil
}

type DescribeVideoQualityEvaluationTaskDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId               string              `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	VideoDefectLimitList []*VideoDefectLimit `protobuf:"bytes,6,rep,name=VideoDefectLimitList,proto3" json:"VideoDefectLimitList,omitempty"`
	AudioDefectLimitList []*AudioDefectLimit `protobuf:"bytes,7,rep,name=AudioDefectLimitList,proto3" json:"AudioDefectLimitList,omitempty"`
}

func (x *DescribeVideoQualityEvaluationTaskDataRequest) Reset() {
	*x = DescribeVideoQualityEvaluationTaskDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_quality_evaluation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVideoQualityEvaluationTaskDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVideoQualityEvaluationTaskDataRequest) ProtoMessage() {}

func (x *DescribeVideoQualityEvaluationTaskDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_quality_evaluation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVideoQualityEvaluationTaskDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeVideoQualityEvaluationTaskDataRequest) Descriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{6}
}

func (x *DescribeVideoQualityEvaluationTaskDataRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DescribeVideoQualityEvaluationTaskDataRequest) GetVideoDefectLimitList() []*VideoDefectLimit {
	if x != nil {
		return x.VideoDefectLimitList
	}
	return nil
}

func (x *DescribeVideoQualityEvaluationTaskDataRequest) GetAudioDefectLimitList() []*AudioDefectLimit {
	if x != nil {
		return x.AudioDefectLimitList
	}
	return nil
}

type AppearTimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeStamp float32 `protobuf:"fixed32,1,opt,name=StartTimeStamp,proto3" json:"StartTimeStamp,omitempty"`
	EndTimeStamp   float32 `protobuf:"fixed32,2,opt,name=EndTimeStamp,proto3" json:"EndTimeStamp,omitempty"`
}

func (x *AppearTimeInfo) Reset() {
	*x = AppearTimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_quality_evaluation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearTimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearTimeInfo) ProtoMessage() {}

func (x *AppearTimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_quality_evaluation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearTimeInfo.ProtoReflect.Descriptor instead.
func (*AppearTimeInfo) Descriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{7}
}

func (x *AppearTimeInfo) GetStartTimeStamp() float32 {
	if x != nil {
		return x.StartTimeStamp
	}
	return 0
}

func (x *AppearTimeInfo) GetEndTimeStamp() float32 {
	if x != nil {
		return x.EndTimeStamp
	}
	return 0
}

type VideoDefectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefectType VideoDefectInfo_VideoDefectType `protobuf:"varint,1,opt,name=DefectType,proto3,enum=trpc.media.videoquality.VideoDefectInfo_VideoDefectType" json:"DefectType,omitempty"`
	DefectInfo []*AppearTimeInfo               `protobuf:"bytes,2,rep,name=DefectInfo,proto3" json:"DefectInfo,omitempty"`
}

func (x *VideoDefectInfo) Reset() {
	*x = VideoDefectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_quality_evaluation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoDefectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoDefectInfo) ProtoMessage() {}

func (x *VideoDefectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_quality_evaluation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoDefectInfo.ProtoReflect.Descriptor instead.
func (*VideoDefectInfo) Descriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{8}
}

func (x *VideoDefectInfo) GetDefectType() VideoDefectInfo_VideoDefectType {
	if x != nil {
		return x.DefectType
	}
	return VideoDefectInfo_kUnknown
}

func (x *VideoDefectInfo) GetDefectInfo() []*AppearTimeInfo {
	if x != nil {
		return x.DefectInfo
	}
	return nil
}

type AudioDefectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefectType AudioDefectInfo_AudioDefectType `protobuf:"varint,1,opt,name=DefectType,proto3,enum=trpc.media.videoquality.AudioDefectInfo_AudioDefectType" json:"DefectType,omitempty"`
	DefectInfo []*AppearTimeInfo               `protobuf:"bytes,2,rep,name=DefectInfo,proto3" json:"DefectInfo,omitempty"`
}

func (x *AudioDefectInfo) Reset() {
	*x = AudioDefectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_quality_evaluation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioDefectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioDefectInfo) ProtoMessage() {}

func (x *AudioDefectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_quality_evaluation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioDefectInfo.ProtoReflect.Descriptor instead.
func (*AudioDefectInfo) Descriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{9}
}

func (x *AudioDefectInfo) GetDefectType() AudioDefectInfo_AudioDefectType {
	if x != nil {
		return x.DefectType
	}
	return AudioDefectInfo_kUnknown
}

func (x *AudioDefectInfo) GetDefectInfo() []*AppearTimeInfo {
	if x != nil {
		return x.DefectInfo
	}
	return nil
}

type QualityEvaluationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoDefectInfoList []*VideoDefectInfo `protobuf:"bytes,1,rep,name=VideoDefectInfoList,proto3" json:"VideoDefectInfoList,omitempty"` // 视频缺陷信息列表
	AudioDefectInfoList []*AudioDefectInfo `protobuf:"bytes,2,rep,name=AudioDefectInfoList,proto3" json:"AudioDefectInfoList,omitempty"` // 音频缺陷信息列表
	VideoQualityScore   float32            `protobuf:"fixed32,3,opt,name=VideoQualityScore,proto3" json:"VideoQualityScore,omitempty"`   // 视频质量分
}

func (x *QualityEvaluationInfo) Reset() {
	*x = QualityEvaluationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_quality_evaluation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityEvaluationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityEvaluationInfo) ProtoMessage() {}

func (x *QualityEvaluationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_quality_evaluation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityEvaluationInfo.ProtoReflect.Descriptor instead.
func (*QualityEvaluationInfo) Descriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{10}
}

func (x *QualityEvaluationInfo) GetVideoDefectInfoList() []*VideoDefectInfo {
	if x != nil {
		return x.VideoDefectInfoList
	}
	return nil
}

func (x *QualityEvaluationInfo) GetAudioDefectInfoList() []*AudioDefectInfo {
	if x != nil {
		return x.AudioDefectInfoList
	}
	return nil
}

func (x *QualityEvaluationInfo) GetVideoQualityScore() float32 {
	if x != nil {
		return x.VideoQualityScore
	}
	return 0
}

type LiveVideoQualityScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoQualityScore     float32         `protobuf:"fixed32,1,opt,name=VideoQualityScore,proto3" json:"VideoQualityScore,omitempty"`
	VideoQualityScoreTime *AppearTimeInfo `protobuf:"bytes,2,opt,name=VideoQualityScoreTime,proto3" json:"VideoQualityScoreTime,omitempty"`
}

func (x *LiveVideoQualityScore) Reset() {
	*x = LiveVideoQualityScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_quality_evaluation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveVideoQualityScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveVideoQualityScore) ProtoMessage() {}

func (x *LiveVideoQualityScore) ProtoReflect() protoreflect.Message {
	mi := &file_video_quality_evaluation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveVideoQualityScore.ProtoReflect.Descriptor instead.
func (*LiveVideoQualityScore) Descriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{11}
}

func (x *LiveVideoQualityScore) GetVideoQualityScore() float32 {
	if x != nil {
		return x.VideoQualityScore
	}
	return 0
}

func (x *LiveVideoQualityScore) GetVideoQualityScoreTime() *AppearTimeInfo {
	if x != nil {
		return x.VideoQualityScoreTime
	}
	return nil
}

type LiveQualityEvaluationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoDefectInfoList   []*VideoDefectInfo       `protobuf:"bytes,1,rep,name=VideoDefectInfoList,proto3" json:"VideoDefectInfoList,omitempty"`     // 视频缺陷信息列表
	AudioDefectInfoList   []*AudioDefectInfo       `protobuf:"bytes,2,rep,name=AudioDefectInfoList,proto3" json:"AudioDefectInfoList,omitempty"`     // 音频缺陷信息列表
	VideoQualityScoreList []*LiveVideoQualityScore `protobuf:"bytes,3,rep,name=VideoQualityScoreList,proto3" json:"VideoQualityScoreList,omitempty"` // 质检分列表
	LiveStreamURL         string                   `protobuf:"bytes,4,opt,name=LiveStreamURL,proto3" json:"LiveStreamURL,omitempty"`                 // 直播流地址
	CurrentTime           int64                    `protobuf:"varint,5,opt,name=CurrentTime,proto3" json:"CurrentTime,omitempty"`                    // 当前消息的时间
}

func (x *LiveQualityEvaluationInfo) Reset() {
	*x = LiveQualityEvaluationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_quality_evaluation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveQualityEvaluationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveQualityEvaluationInfo) ProtoMessage() {}

func (x *LiveQualityEvaluationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_quality_evaluation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveQualityEvaluationInfo.ProtoReflect.Descriptor instead.
func (*LiveQualityEvaluationInfo) Descriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{12}
}

func (x *LiveQualityEvaluationInfo) GetVideoDefectInfoList() []*VideoDefectInfo {
	if x != nil {
		return x.VideoDefectInfoList
	}
	return nil
}

func (x *LiveQualityEvaluationInfo) GetAudioDefectInfoList() []*AudioDefectInfo {
	if x != nil {
		return x.AudioDefectInfoList
	}
	return nil
}

func (x *LiveQualityEvaluationInfo) GetVideoQualityScoreList() []*LiveVideoQualityScore {
	if x != nil {
		return x.VideoQualityScoreList
	}
	return nil
}

func (x *LiveQualityEvaluationInfo) GetLiveStreamURL() string {
	if x != nil {
		return x.LiveStreamURL
	}
	return ""
}

func (x *LiveQualityEvaluationInfo) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

type DescribeVideoQualityEvaluationTaskDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskInfo *apicommon.TaskInfo    `protobuf:"bytes,2,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
	TaskData *QualityEvaluationInfo `protobuf:"bytes,4,opt,name=TaskData,proto3" json:"TaskData,omitempty"`
}

func (x *DescribeVideoQualityEvaluationTaskDataResponse) Reset() {
	*x = DescribeVideoQualityEvaluationTaskDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_quality_evaluation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVideoQualityEvaluationTaskDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVideoQualityEvaluationTaskDataResponse) ProtoMessage() {}

func (x *DescribeVideoQualityEvaluationTaskDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_quality_evaluation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVideoQualityEvaluationTaskDataResponse.ProtoReflect.Descriptor instead.
func (*DescribeVideoQualityEvaluationTaskDataResponse) Descriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{13}
}

func (x *DescribeVideoQualityEvaluationTaskDataResponse) GetTaskInfo() *apicommon.TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

func (x *DescribeVideoQualityEvaluationTaskDataResponse) GetTaskData() *QualityEvaluationInfo {
	if x != nil {
		return x.TaskData
	}
	return nil
}

type DescribeLiveVideoQualityEvaluationTaskDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskInfo *apicommon.TaskInfo        `protobuf:"bytes,2,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
	TaskData *LiveQualityEvaluationInfo `protobuf:"bytes,4,opt,name=TaskData,proto3" json:"TaskData,omitempty"`
}

func (x *DescribeLiveVideoQualityEvaluationTaskDataResponse) Reset() {
	*x = DescribeLiveVideoQualityEvaluationTaskDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_quality_evaluation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeLiveVideoQualityEvaluationTaskDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeLiveVideoQualityEvaluationTaskDataResponse) ProtoMessage() {}

func (x *DescribeLiveVideoQualityEvaluationTaskDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_quality_evaluation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeLiveVideoQualityEvaluationTaskDataResponse.ProtoReflect.Descriptor instead.
func (*DescribeLiveVideoQualityEvaluationTaskDataResponse) Descriptor() ([]byte, []int) {
	return file_video_quality_evaluation_proto_rawDescGZIP(), []int{14}
}

func (x *DescribeLiveVideoQualityEvaluationTaskDataResponse) GetTaskInfo() *apicommon.TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

func (x *DescribeLiveVideoQualityEvaluationTaskDataResponse) GetTaskData() *LiveQualityEvaluationInfo {
	if x != nil {
		return x.TaskData
	}
	return nil
}

var File_video_quality_evaluation_proto protoreflect.FileDescriptor

var file_video_quality_evaluation_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x17, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x22, 0x42, 0x0a, 0x28, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0x9c, 0x01, 0x0a, 0x10, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9c,
	0x01, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x62, 0x0a,
	0x24, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x22, 0xe5, 0x01, 0x0a, 0x25, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x14, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x14, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x14, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x2d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x14, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x14, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x5d, 0x0a, 0x14, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x14, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x5c, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xf6, 0x03, 0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a,
	0x0a, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbf, 0x02, 0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x53, 0x6e, 0x6f,
	0x77, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x42, 0x61, 0x72, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x4d, 0x6f, 0x73, 0x61,
	0x69, 0x63, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x46, 0x72, 0x6f,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x06, 0x12, 0x0c, 0x0a,
	0x08, 0x6b, 0x53, 0x68, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d,
	0x6b, 0x4f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x10, 0x0a, 0x12,
	0x0f, 0x0a, 0x0b, 0x6b, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x0b,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x42, 0x6c, 0x75, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x0c,
	0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x42, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x0d, 0x12, 0x0b,
	0x0a, 0x07, 0x6b, 0x51, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x6b,
	0x48, 0x75, 0x61, 0x50, 0x69, 0x6e, 0x67, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x50, 0x75,
	0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x57, 0x78,
	0x43, 0x6f, 0x64, 0x65, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x10, 0x12, 0x22, 0x96, 0x02, 0x0a, 0x0f, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x0a,
	0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x38, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x60, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x75, 0x74, 0x65, 0x10,
	0x13, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x6f, 0x77, 0x10,
	0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x4e, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10,
	0x16, 0x22, 0xfd, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x13, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0xa4, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x5d, 0x0a, 0x15, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x15, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x03, 0x0a, 0x19, 0x4c, 0x69, 0x76,
	0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44,
	0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x5a, 0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x66, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44,
	0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x44, 0x65, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x64,
	0x0a, 0x15, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x15, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb5, 0x01, 0x0a,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xbd, 0x01, 0x0a, 0x32, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x32, 0xe3, 0x05, 0x0a, 0x16, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0xa7, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x40, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x26, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x2a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c,
	0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x5c, 0x5a, 0x5a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x2d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_quality_evaluation_proto_rawDescOnce sync.Once
	file_video_quality_evaluation_proto_rawDescData = file_video_quality_evaluation_proto_rawDesc
)

func file_video_quality_evaluation_proto_rawDescGZIP() []byte {
	file_video_quality_evaluation_proto_rawDescOnce.Do(func() {
		file_video_quality_evaluation_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_quality_evaluation_proto_rawDescData)
	})
	return file_video_quality_evaluation_proto_rawDescData
}

var file_video_quality_evaluation_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_video_quality_evaluation_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_video_quality_evaluation_proto_goTypes = []interface{}{
	(VideoDefectInfo_VideoDefectType)(0),                       // 0: trpc.media.videoquality.VideoDefectInfo.VideoDefectType
	(AudioDefectInfo_AudioDefectType)(0),                       // 1: trpc.media.videoquality.AudioDefectInfo.AudioDefectType
	(*CreateVideoQualityEvaluationTaskRequest)(nil),            // 2: trpc.media.videoquality.CreateVideoQualityEvaluationTaskRequest
	(*CreateVideoQualityEvaluationTaskResponse)(nil),           // 3: trpc.media.videoquality.CreateVideoQualityEvaluationTaskResponse
	(*VideoDefectLimit)(nil),                                   // 4: trpc.media.videoquality.VideoDefectLimit
	(*AudioDefectLimit)(nil),                                   // 5: trpc.media.videoquality.AudioDefectLimit
	(*DescribeVideoQualityLimitListRequest)(nil),               // 6: trpc.media.videoquality.DescribeVideoQualityLimitListRequest
	(*DescribeVideoQualityLimitListResponse)(nil),              // 7: trpc.media.videoquality.DescribeVideoQualityLimitListResponse
	(*DescribeVideoQualityEvaluationTaskDataRequest)(nil),      // 8: trpc.media.videoquality.DescribeVideoQualityEvaluationTaskDataRequest
	(*AppearTimeInfo)(nil),                                     // 9: trpc.media.videoquality.AppearTimeInfo
	(*VideoDefectInfo)(nil),                                    // 10: trpc.media.videoquality.VideoDefectInfo
	(*AudioDefectInfo)(nil),                                    // 11: trpc.media.videoquality.AudioDefectInfo
	(*QualityEvaluationInfo)(nil),                              // 12: trpc.media.videoquality.QualityEvaluationInfo
	(*LiveVideoQualityScore)(nil),                              // 13: trpc.media.videoquality.LiveVideoQualityScore
	(*LiveQualityEvaluationInfo)(nil),                          // 14: trpc.media.videoquality.LiveQualityEvaluationInfo
	(*DescribeVideoQualityEvaluationTaskDataResponse)(nil),     // 15: trpc.media.videoquality.DescribeVideoQualityEvaluationTaskDataResponse
	(*DescribeLiveVideoQualityEvaluationTaskDataResponse)(nil), // 16: trpc.media.videoquality.DescribeLiveVideoQualityEvaluationTaskDataResponse
	(*apicommon.TaskInfo)(nil),                                 // 17: trpc.media.common.TaskInfo
}
var file_video_quality_evaluation_proto_depIdxs = []int32{
	0,  // 0: trpc.media.videoquality.VideoDefectLimit.DefectType:type_name -> trpc.media.videoquality.VideoDefectInfo.VideoDefectType
	1,  // 1: trpc.media.videoquality.AudioDefectLimit.DefectType:type_name -> trpc.media.videoquality.AudioDefectInfo.AudioDefectType
	4,  // 2: trpc.media.videoquality.DescribeVideoQualityLimitListResponse.VideoDefectLimitList:type_name -> trpc.media.videoquality.VideoDefectLimit
	5,  // 3: trpc.media.videoquality.DescribeVideoQualityLimitListResponse.AudioDefectLimitList:type_name -> trpc.media.videoquality.AudioDefectLimit
	4,  // 4: trpc.media.videoquality.DescribeVideoQualityEvaluationTaskDataRequest.VideoDefectLimitList:type_name -> trpc.media.videoquality.VideoDefectLimit
	5,  // 5: trpc.media.videoquality.DescribeVideoQualityEvaluationTaskDataRequest.AudioDefectLimitList:type_name -> trpc.media.videoquality.AudioDefectLimit
	0,  // 6: trpc.media.videoquality.VideoDefectInfo.DefectType:type_name -> trpc.media.videoquality.VideoDefectInfo.VideoDefectType
	9,  // 7: trpc.media.videoquality.VideoDefectInfo.DefectInfo:type_name -> trpc.media.videoquality.AppearTimeInfo
	1,  // 8: trpc.media.videoquality.AudioDefectInfo.DefectType:type_name -> trpc.media.videoquality.AudioDefectInfo.AudioDefectType
	9,  // 9: trpc.media.videoquality.AudioDefectInfo.DefectInfo:type_name -> trpc.media.videoquality.AppearTimeInfo
	10, // 10: trpc.media.videoquality.QualityEvaluationInfo.VideoDefectInfoList:type_name -> trpc.media.videoquality.VideoDefectInfo
	11, // 11: trpc.media.videoquality.QualityEvaluationInfo.AudioDefectInfoList:type_name -> trpc.media.videoquality.AudioDefectInfo
	9,  // 12: trpc.media.videoquality.LiveVideoQualityScore.VideoQualityScoreTime:type_name -> trpc.media.videoquality.AppearTimeInfo
	10, // 13: trpc.media.videoquality.LiveQualityEvaluationInfo.VideoDefectInfoList:type_name -> trpc.media.videoquality.VideoDefectInfo
	11, // 14: trpc.media.videoquality.LiveQualityEvaluationInfo.AudioDefectInfoList:type_name -> trpc.media.videoquality.AudioDefectInfo
	13, // 15: trpc.media.videoquality.LiveQualityEvaluationInfo.VideoQualityScoreList:type_name -> trpc.media.videoquality.LiveVideoQualityScore
	17, // 16: trpc.media.videoquality.DescribeVideoQualityEvaluationTaskDataResponse.TaskInfo:type_name -> trpc.media.common.TaskInfo
	12, // 17: trpc.media.videoquality.DescribeVideoQualityEvaluationTaskDataResponse.TaskData:type_name -> trpc.media.videoquality.QualityEvaluationInfo
	17, // 18: trpc.media.videoquality.DescribeLiveVideoQualityEvaluationTaskDataResponse.TaskInfo:type_name -> trpc.media.common.TaskInfo
	14, // 19: trpc.media.videoquality.DescribeLiveVideoQualityEvaluationTaskDataResponse.TaskData:type_name -> trpc.media.videoquality.LiveQualityEvaluationInfo
	2,  // 20: trpc.media.videoquality.VideoQualityEvaluation.CreateVideoQualityEvaluationTask:input_type -> trpc.media.videoquality.CreateVideoQualityEvaluationTaskRequest
	8,  // 21: trpc.media.videoquality.VideoQualityEvaluation.DescribeVideoQualityEvaluationTaskData:input_type -> trpc.media.videoquality.DescribeVideoQualityEvaluationTaskDataRequest
	8,  // 22: trpc.media.videoquality.VideoQualityEvaluation.DescribeLiveVideoQualityEvaluationTaskData:input_type -> trpc.media.videoquality.DescribeVideoQualityEvaluationTaskDataRequest
	6,  // 23: trpc.media.videoquality.VideoQualityEvaluation.DescribeVideoQualityLimitList:input_type -> trpc.media.videoquality.DescribeVideoQualityLimitListRequest
	3,  // 24: trpc.media.videoquality.VideoQualityEvaluation.CreateVideoQualityEvaluationTask:output_type -> trpc.media.videoquality.CreateVideoQualityEvaluationTaskResponse
	15, // 25: trpc.media.videoquality.VideoQualityEvaluation.DescribeVideoQualityEvaluationTaskData:output_type -> trpc.media.videoquality.DescribeVideoQualityEvaluationTaskDataResponse
	16, // 26: trpc.media.videoquality.VideoQualityEvaluation.DescribeLiveVideoQualityEvaluationTaskData:output_type -> trpc.media.videoquality.DescribeLiveVideoQualityEvaluationTaskDataResponse
	7,  // 27: trpc.media.videoquality.VideoQualityEvaluation.DescribeVideoQualityLimitList:output_type -> trpc.media.videoquality.DescribeVideoQualityLimitListResponse
	24, // [24:28] is the sub-list for method output_type
	20, // [20:24] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_video_quality_evaluation_proto_init() }
func file_video_quality_evaluation_proto_init() {
	if File_video_quality_evaluation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_quality_evaluation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVideoQualityEvaluationTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_quality_evaluation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVideoQualityEvaluationTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_quality_evaluation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoDefectLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_quality_evaluation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioDefectLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_quality_evaluation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVideoQualityLimitListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_quality_evaluation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVideoQualityLimitListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_quality_evaluation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVideoQualityEvaluationTaskDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_quality_evaluation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearTimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_quality_evaluation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoDefectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_quality_evaluation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioDefectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_quality_evaluation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityEvaluationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_quality_evaluation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveVideoQualityScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_quality_evaluation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveQualityEvaluationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_quality_evaluation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVideoQualityEvaluationTaskDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_quality_evaluation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeLiveVideoQualityEvaluationTaskDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_quality_evaluation_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_video_quality_evaluation_proto_goTypes,
		DependencyIndexes: file_video_quality_evaluation_proto_depIdxs,
		EnumInfos:         file_video_quality_evaluation_proto_enumTypes,
		MessageInfos:      file_video_quality_evaluation_proto_msgTypes,
	}.Build()
	File_video_quality_evaluation_proto = out.File
	file_video_quality_evaluation_proto_rawDesc = nil
	file_video_quality_evaluation_proto_goTypes = nil
	file_video_quality_evaluation_proto_depIdxs = nil
}
