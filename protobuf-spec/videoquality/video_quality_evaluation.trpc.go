// Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
// source: video_quality_evaluation.proto

package videoquality

import (
	"context"
	"fmt"

	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock"
	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/http"

	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/client"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/codec"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/server"
)

/* ************************************ Service Definition ************************************ */

// VideoQualityEvaluationService defines service
type VideoQualityEvaluationService interface {
	CreateVideoQualityEvaluationTask(ctx context.Context, req *CreateVideoQualityEvaluationTaskRequest, rsp *CreateVideoQualityEvaluationTaskResponse) (err error) // @alias=/CreateVideoQualityEvaluationTask

	DescribeVideoQualityEvaluationTaskData(ctx context.Context, req *DescribeVideoQualityEvaluationTaskDataRequest, rsp *DescribeVideoQualityEvaluationTaskDataResponse) (err error) // @alias=/DescribeVideoQualityEvaluationTaskData

	DescribeLiveVideoQualityEvaluationTaskData(ctx context.Context, req *DescribeVideoQualityEvaluationTaskDataRequest, rsp *DescribeLiveVideoQualityEvaluationTaskDataResponse) (err error) // @alias=/DescribeLiveVideoQualityEvaluationTaskData

	DescribeVideoQualityLimitList(ctx context.Context, req *DescribeVideoQualityLimitListRequest, rsp *DescribeVideoQualityLimitListResponse) (err error) // @alias=/DescribeVideoQualityLimitList
}

func VideoQualityEvaluationService_CreateVideoQualityEvaluationTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &CreateVideoQualityEvaluationTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(VideoQualityEvaluationService).CreateVideoQualityEvaluationTask(ctx, reqbody.(*CreateVideoQualityEvaluationTaskRequest), rspbody.(*CreateVideoQualityEvaluationTaskResponse))
	}

	rsp := &CreateVideoQualityEvaluationTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func VideoQualityEvaluationService_DescribeVideoQualityEvaluationTaskData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &DescribeVideoQualityEvaluationTaskDataRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(VideoQualityEvaluationService).DescribeVideoQualityEvaluationTaskData(ctx, reqbody.(*DescribeVideoQualityEvaluationTaskDataRequest), rspbody.(*DescribeVideoQualityEvaluationTaskDataResponse))
	}

	rsp := &DescribeVideoQualityEvaluationTaskDataResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func VideoQualityEvaluationService_DescribeLiveVideoQualityEvaluationTaskData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &DescribeVideoQualityEvaluationTaskDataRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(VideoQualityEvaluationService).DescribeLiveVideoQualityEvaluationTaskData(ctx, reqbody.(*DescribeVideoQualityEvaluationTaskDataRequest), rspbody.(*DescribeLiveVideoQualityEvaluationTaskDataResponse))
	}

	rsp := &DescribeLiveVideoQualityEvaluationTaskDataResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func VideoQualityEvaluationService_DescribeVideoQualityLimitList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &DescribeVideoQualityLimitListRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(VideoQualityEvaluationService).DescribeVideoQualityLimitList(ctx, reqbody.(*DescribeVideoQualityLimitListRequest), rspbody.(*DescribeVideoQualityLimitListResponse))
	}

	rsp := &DescribeVideoQualityLimitListResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// VideoQualityEvaluationServer_ServiceDesc descriptor for server.RegisterService
var VideoQualityEvaluationServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.videoquality.VideoQualityEvaluation",
	HandlerType: ((*VideoQualityEvaluationService)(nil)),
	Methods: []server.Method{
		{
			Name: "/CreateVideoQualityEvaluationTask",
			Func: VideoQualityEvaluationService_CreateVideoQualityEvaluationTask_Handler,
		},
		{
			Name: "/DescribeVideoQualityEvaluationTaskData",
			Func: VideoQualityEvaluationService_DescribeVideoQualityEvaluationTaskData_Handler,
		},
		{
			Name: "/DescribeLiveVideoQualityEvaluationTaskData",
			Func: VideoQualityEvaluationService_DescribeLiveVideoQualityEvaluationTaskData_Handler,
		},
		{
			Name: "/DescribeVideoQualityLimitList",
			Func: VideoQualityEvaluationService_DescribeVideoQualityLimitList_Handler,
		},
		{
			Name: "/trpc.media.videoquality.VideoQualityEvaluation/CreateVideoQualityEvaluationTask",
			Func: VideoQualityEvaluationService_CreateVideoQualityEvaluationTask_Handler,
		},
		{
			Name: "/trpc.media.videoquality.VideoQualityEvaluation/DescribeVideoQualityEvaluationTaskData",
			Func: VideoQualityEvaluationService_DescribeVideoQualityEvaluationTaskData_Handler,
		},
		{
			Name: "/trpc.media.videoquality.VideoQualityEvaluation/DescribeLiveVideoQualityEvaluationTaskData",
			Func: VideoQualityEvaluationService_DescribeLiveVideoQualityEvaluationTaskData_Handler,
		},
		{
			Name: "/trpc.media.videoquality.VideoQualityEvaluation/DescribeVideoQualityLimitList",
			Func: VideoQualityEvaluationService_DescribeVideoQualityLimitList_Handler,
		},
	},
}

// RegisterVideoQualityEvaluationService register service
func RegisterVideoQualityEvaluationService(s server.Service, svr VideoQualityEvaluationService) {
	if err := s.Register(&VideoQualityEvaluationServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("VideoQualityEvaluation register error:%v", err))
	}

}

/* ************************************ Client Definition ************************************ */

// VideoQualityEvaluationClientProxy defines service client proxy
type VideoQualityEvaluationClientProxy interface {
	CreateVideoQualityEvaluationTask(ctx context.Context, req *CreateVideoQualityEvaluationTaskRequest, opts ...client.Option) (rsp *CreateVideoQualityEvaluationTaskResponse, err error) // @alias=/CreateVideoQualityEvaluationTask

	DescribeVideoQualityEvaluationTaskData(ctx context.Context, req *DescribeVideoQualityEvaluationTaskDataRequest, opts ...client.Option) (rsp *DescribeVideoQualityEvaluationTaskDataResponse, err error) // @alias=/DescribeVideoQualityEvaluationTaskData

	DescribeLiveVideoQualityEvaluationTaskData(ctx context.Context, req *DescribeVideoQualityEvaluationTaskDataRequest, opts ...client.Option) (rsp *DescribeLiveVideoQualityEvaluationTaskDataResponse, err error) // @alias=/DescribeLiveVideoQualityEvaluationTaskData

	DescribeVideoQualityLimitList(ctx context.Context, req *DescribeVideoQualityLimitListRequest, opts ...client.Option) (rsp *DescribeVideoQualityLimitListResponse, err error) // @alias=/DescribeVideoQualityLimitList
}

type VideoQualityEvaluationClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewVideoQualityEvaluationClientProxy = func(opts ...client.Option) VideoQualityEvaluationClientProxy {
	return &VideoQualityEvaluationClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *VideoQualityEvaluationClientProxyImpl) CreateVideoQualityEvaluationTask(ctx context.Context, req *CreateVideoQualityEvaluationTaskRequest, opts ...client.Option) (*CreateVideoQualityEvaluationTaskResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/CreateVideoQualityEvaluationTask")
	msg.WithCalleeServiceName(VideoQualityEvaluationServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videoquality")
	msg.WithCalleeService("VideoQualityEvaluation")
	msg.WithCalleeMethod("CreateVideoQualityEvaluationTask")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &CreateVideoQualityEvaluationTaskResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *VideoQualityEvaluationClientProxyImpl) DescribeVideoQualityEvaluationTaskData(ctx context.Context, req *DescribeVideoQualityEvaluationTaskDataRequest, opts ...client.Option) (*DescribeVideoQualityEvaluationTaskDataResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/DescribeVideoQualityEvaluationTaskData")
	msg.WithCalleeServiceName(VideoQualityEvaluationServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videoquality")
	msg.WithCalleeService("VideoQualityEvaluation")
	msg.WithCalleeMethod("DescribeVideoQualityEvaluationTaskData")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &DescribeVideoQualityEvaluationTaskDataResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *VideoQualityEvaluationClientProxyImpl) DescribeLiveVideoQualityEvaluationTaskData(ctx context.Context, req *DescribeVideoQualityEvaluationTaskDataRequest, opts ...client.Option) (*DescribeLiveVideoQualityEvaluationTaskDataResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/DescribeLiveVideoQualityEvaluationTaskData")
	msg.WithCalleeServiceName(VideoQualityEvaluationServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videoquality")
	msg.WithCalleeService("VideoQualityEvaluation")
	msg.WithCalleeMethod("DescribeLiveVideoQualityEvaluationTaskData")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &DescribeLiveVideoQualityEvaluationTaskDataResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *VideoQualityEvaluationClientProxyImpl) DescribeVideoQualityLimitList(ctx context.Context, req *DescribeVideoQualityLimitListRequest, opts ...client.Option) (*DescribeVideoQualityLimitListResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/DescribeVideoQualityLimitList")
	msg.WithCalleeServiceName(VideoQualityEvaluationServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videoquality")
	msg.WithCalleeService("VideoQualityEvaluation")
	msg.WithCalleeMethod("DescribeVideoQualityLimitList")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &DescribeVideoQualityLimitListResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}
