// Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
// source: toolkit.proto

package toolkit

import (
	"context"
	"fmt"

	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock"
	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/http"

	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/client"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/codec"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/server"
)

/* ************************************ Service Definition ************************************ */

// ToolkitService defines service
type ToolkitService interface {
	DescribeToolkits(ctx context.Context, req *DescribeToolkitsRequest, rsp *DescribeToolkitsResponse) (err error) // @alias=/DescribeToolkits
}

func ToolkitService_DescribeToolkits_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &DescribeToolkitsRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(ToolkitService).DescribeToolkits(ctx, reqbody.(*DescribeToolkitsRequest), rspbody.(*DescribeToolkitsResponse))
	}

	rsp := &DescribeToolkitsResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// ToolkitServer_ServiceDesc descriptor for server.RegisterService
var ToolkitServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.toolkit.Toolkit",
	HandlerType: ((*ToolkitService)(nil)),
	Methods: []server.Method{
		{
			Name: "/DescribeToolkits",
			Func: ToolkitService_DescribeToolkits_Handler,
		},
		{
			Name: "/trpc.media.toolkit.Toolkit/DescribeToolkits",
			Func: ToolkitService_DescribeToolkits_Handler,
		},
	},
}

// RegisterToolkitService register service
func RegisterToolkitService(s server.Service, svr ToolkitService) {
	if err := s.Register(&ToolkitServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Toolkit register error:%v", err))
	}

}

/* ************************************ Client Definition ************************************ */

// ToolkitClientProxy defines service client proxy
type ToolkitClientProxy interface {
	DescribeToolkits(ctx context.Context, req *DescribeToolkitsRequest, opts ...client.Option) (rsp *DescribeToolkitsResponse, err error) // @alias=/DescribeToolkits
}

type ToolkitClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewToolkitClientProxy = func(opts ...client.Option) ToolkitClientProxy {
	return &ToolkitClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *ToolkitClientProxyImpl) DescribeToolkits(ctx context.Context, req *DescribeToolkitsRequest, opts ...client.Option) (*DescribeToolkitsResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/DescribeToolkits")
	msg.WithCalleeServiceName(ToolkitServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("toolkit")
	msg.WithCalleeService("Toolkit")
	msg.WithCalleeMethod("DescribeToolkits")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &DescribeToolkitsResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}
