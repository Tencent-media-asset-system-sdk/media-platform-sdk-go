// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: ai_tag_analyse.proto

package aitaganalyse

import (
	reflect "reflect"
	sync "sync"

	apicommon "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/apicommon"
	videostructure "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/videostructure"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TagClass int32

const (
	TagClass_TAGCLASS_INVALID    TagClass = 0
	TagClass_TAGCLASS_NLP        TagClass = 1
	TagClass_TAGCLASS_IMAGEFRAME TagClass = 2
)

// Enum value maps for TagClass.
var (
	TagClass_name = map[int32]string{
		0: "TAGCLASS_INVALID",
		1: "TAGCLASS_NLP",
		2: "TAGCLASS_IMAGEFRAME",
	}
	TagClass_value = map[string]int32{
		"TAGCLASS_INVALID":    0,
		"TAGCLASS_NLP":        1,
		"TAGCLASS_IMAGEFRAME": 2,
	}
)

func (x TagClass) Enum() *TagClass {
	p := new(TagClass)
	*p = x
	return p
}

func (x TagClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TagClass) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_tag_analyse_proto_enumTypes[0].Descriptor()
}

func (TagClass) Type() protoreflect.EnumType {
	return &file_ai_tag_analyse_proto_enumTypes[0]
}

func (x TagClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TagClass.Descriptor instead.
func (TagClass) EnumDescriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{0}
}

type SnippetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime   float32  `protobuf:"fixed32,1,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime     float32  `protobuf:"fixed32,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	L1LabelName string   `protobuf:"bytes,3,opt,name=L1LabelName,proto3" json:"L1LabelName,omitempty"`
	L2LabelName string   `protobuf:"bytes,4,opt,name=L2LabelName,proto3" json:"L2LabelName,omitempty"`
	Tag         string   `protobuf:"bytes,5,opt,name=Tag,proto3" json:"Tag,omitempty"`
	TagClass    TagClass `protobuf:"varint,6,opt,name=TagClass,proto3,enum=trpc.media.aitaganalyse.TagClass" json:"TagClass,omitempty"`
}

func (x *SnippetResult) Reset() {
	*x = SnippetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnippetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnippetResult) ProtoMessage() {}

func (x *SnippetResult) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnippetResult.ProtoReflect.Descriptor instead.
func (*SnippetResult) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{0}
}

func (x *SnippetResult) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SnippetResult) GetEndTime() float32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SnippetResult) GetL1LabelName() string {
	if x != nil {
		return x.L1LabelName
	}
	return ""
}

func (x *SnippetResult) GetL2LabelName() string {
	if x != nil {
		return x.L2LabelName
	}
	return ""
}

func (x *SnippetResult) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *SnippetResult) GetTagClass() TagClass {
	if x != nil {
		return x.TagClass
	}
	return TagClass_TAGCLASS_INVALID
}

type KafkaTagAnalyseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnippetResultSet []*SnippetResult `protobuf:"bytes,1,rep,name=SnippetResultSet,proto3" json:"SnippetResultSet,omitempty"`
}

func (x *KafkaTagAnalyseResult) Reset() {
	*x = KafkaTagAnalyseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaTagAnalyseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTagAnalyseResult) ProtoMessage() {}

func (x *KafkaTagAnalyseResult) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTagAnalyseResult.ProtoReflect.Descriptor instead.
func (*KafkaTagAnalyseResult) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{1}
}

func (x *KafkaTagAnalyseResult) GetSnippetResultSet() []*SnippetResult {
	if x != nil {
		return x.SnippetResultSet
	}
	return nil
}

type TagOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId       string `protobuf:"bytes,1,opt,name=TagId,proto3" json:"TagId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	FilterLevel string `protobuf:"bytes,3,opt,name=FilterLevel,proto3" json:"FilterLevel,omitempty"`
	Category    string `protobuf:"bytes,4,opt,name=Category,proto3" json:"Category,omitempty"`
	L1LabelName string `protobuf:"bytes,5,opt,name=L1LabelName,proto3" json:"L1LabelName,omitempty"`
	L2LabelName string `protobuf:"bytes,6,opt,name=L2LabelName,proto3" json:"L2LabelName,omitempty"`
	TagType     string `protobuf:"bytes,7,opt,name=TagType,proto3" json:"TagType,omitempty"`
	FileKey     string `protobuf:"bytes,8,opt,name=FileKey,proto3" json:"FileKey,omitempty"`
	CreateTime  string `protobuf:"bytes,9,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdatedTime string `protobuf:"bytes,10,opt,name=UpdatedTime,proto3" json:"UpdatedTime,omitempty"`
}

func (x *TagOperation) Reset() {
	*x = TagOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagOperation) ProtoMessage() {}

func (x *TagOperation) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagOperation.ProtoReflect.Descriptor instead.
func (*TagOperation) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{2}
}

func (x *TagOperation) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *TagOperation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TagOperation) GetFilterLevel() string {
	if x != nil {
		return x.FilterLevel
	}
	return ""
}

func (x *TagOperation) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *TagOperation) GetL1LabelName() string {
	if x != nil {
		return x.L1LabelName
	}
	return ""
}

func (x *TagOperation) GetL2LabelName() string {
	if x != nil {
		return x.L2LabelName
	}
	return ""
}

func (x *TagOperation) GetTagType() string {
	if x != nil {
		return x.TagType
	}
	return ""
}

func (x *TagOperation) GetFileKey() string {
	if x != nil {
		return x.FileKey
	}
	return ""
}

func (x *TagOperation) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TagOperation) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

type L2Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelName string `protobuf:"bytes,2,opt,name=LabelName,proto3" json:"LabelName,omitempty"`
}

func (x *L2Label) Reset() {
	*x = L2Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2Label) ProtoMessage() {}

func (x *L2Label) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2Label.ProtoReflect.Descriptor instead.
func (*L2Label) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{3}
}

func (x *L2Label) GetLabelName() string {
	if x != nil {
		return x.LabelName
	}
	return ""
}

type L1Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelName  string     `protobuf:"bytes,1,opt,name=LabelName,proto3" json:"LabelName,omitempty"`
	L2LabelSet []*L2Label `protobuf:"bytes,2,rep,name=L2LabelSet,proto3" json:"L2LabelSet,omitempty"`
}

func (x *L1Label) Reset() {
	*x = L1Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L1Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L1Label) ProtoMessage() {}

func (x *L1Label) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L1Label.ProtoReflect.Descriptor instead.
func (*L1Label) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{4}
}

func (x *L1Label) GetLabelName() string {
	if x != nil {
		return x.LabelName
	}
	return ""
}

func (x *L1Label) GetL2LabelSet() []*L2Label {
	if x != nil {
		return x.L2LabelSet
	}
	return nil
}

type DescribeL1L2LabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelSet []*L1Label `protobuf:"bytes,3,rep,name=LabelSet,proto3" json:"LabelSet,omitempty"`
}

func (x *DescribeL1L2LabelsResponse) Reset() {
	*x = DescribeL1L2LabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeL1L2LabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeL1L2LabelsResponse) ProtoMessage() {}

func (x *DescribeL1L2LabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeL1L2LabelsResponse.ProtoReflect.Descriptor instead.
func (*DescribeL1L2LabelsResponse) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{5}
}

func (x *DescribeL1L2LabelsResponse) GetLabelSet() []*L1Label {
	if x != nil {
		return x.LabelSet
	}
	return nil
}

type CommonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommonRequest) Reset() {
	*x = CommonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRequest) ProtoMessage() {}

func (x *CommonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRequest.ProtoReflect.Descriptor instead.
func (*CommonRequest) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{6}
}

// CreateTag
type CreateTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag *TagOperation `protobuf:"bytes,1,opt,name=Tag,proto3" json:"Tag,omitempty"`
}

func (x *CreateTagRequest) Reset() {
	*x = CreateTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagRequest) ProtoMessage() {}

func (x *CreateTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagRequest.ProtoReflect.Descriptor instead.
func (*CreateTagRequest) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTagRequest) GetTag() *TagOperation {
	if x != nil {
		return x.Tag
	}
	return nil
}

type CreateTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId string `protobuf:"bytes,1,opt,name=TagId,proto3" json:"TagId,omitempty"`
}

func (x *CreateTagResponse) Reset() {
	*x = CreateTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagResponse) ProtoMessage() {}

func (x *CreateTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagResponse.ProtoReflect.Descriptor instead.
func (*CreateTagResponse) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTagResponse) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

//ImportTag
type ImportTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName          string `protobuf:"bytes,3,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FileKey           string `protobuf:"bytes,4,opt,name=FileKey,proto3" json:"FileKey,omitempty"`
	L1LabelName       string `protobuf:"bytes,5,opt,name=L1LabelName,proto3" json:"L1LabelName,omitempty"`
	L2LabelName       string `protobuf:"bytes,6,opt,name=L2LabelName,proto3" json:"L2LabelName,omitempty"`
	TagType           string `protobuf:"bytes,7,opt,name=TagType,proto3" json:"TagType,omitempty"`
	FilterLevel       string `protobuf:"bytes,8,opt,name=FilterLevel,proto3" json:"FilterLevel,omitempty"`
	Category          string `protobuf:"bytes,9,opt,name=Category,proto3" json:"Category,omitempty"`
	DeprecatedFileKey string `protobuf:"bytes,12,opt,name=DeprecatedFileKey,proto3" json:"DeprecatedFileKey,omitempty"`
}

func (x *ImportTagRequest) Reset() {
	*x = ImportTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportTagRequest) ProtoMessage() {}

func (x *ImportTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportTagRequest.ProtoReflect.Descriptor instead.
func (*ImportTagRequest) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{9}
}

func (x *ImportTagRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ImportTagRequest) GetFileKey() string {
	if x != nil {
		return x.FileKey
	}
	return ""
}

func (x *ImportTagRequest) GetL1LabelName() string {
	if x != nil {
		return x.L1LabelName
	}
	return ""
}

func (x *ImportTagRequest) GetL2LabelName() string {
	if x != nil {
		return x.L2LabelName
	}
	return ""
}

func (x *ImportTagRequest) GetTagType() string {
	if x != nil {
		return x.TagType
	}
	return ""
}

func (x *ImportTagRequest) GetFilterLevel() string {
	if x != nil {
		return x.FilterLevel
	}
	return ""
}

func (x *ImportTagRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ImportTagRequest) GetDeprecatedFileKey() string {
	if x != nil {
		return x.DeprecatedFileKey
	}
	return ""
}

type ImportTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *ImportTagResponse) Reset() {
	*x = ImportTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportTagResponse) ProtoMessage() {}

func (x *ImportTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportTagResponse.ProtoReflect.Descriptor instead.
func (*ImportTagResponse) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{10}
}

func (x *ImportTagResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//DeleteTag
type DeleteTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId string `protobuf:"bytes,1,opt,name=TagId,proto3" json:"TagId,omitempty"`
}

func (x *DeleteTagRequest) Reset() {
	*x = DeleteTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagRequest) ProtoMessage() {}

func (x *DeleteTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagRequest.ProtoReflect.Descriptor instead.
func (*DeleteTagRequest) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteTagRequest) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

type DeleteTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId string `protobuf:"bytes,1,opt,name=TagId,proto3" json:"TagId,omitempty"`
}

func (x *DeleteTagResponse) Reset() {
	*x = DeleteTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagResponse) ProtoMessage() {}

func (x *DeleteTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagResponse.ProtoReflect.Descriptor instead.
func (*DeleteTagResponse) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteTagResponse) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

//ModifyTag
type ModifyTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag *TagOperation `protobuf:"bytes,1,opt,name=Tag,proto3" json:"Tag,omitempty"`
}

func (x *ModifyTagRequest) Reset() {
	*x = ModifyTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTagRequest) ProtoMessage() {}

func (x *ModifyTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTagRequest.ProtoReflect.Descriptor instead.
func (*ModifyTagRequest) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{13}
}

func (x *ModifyTagRequest) GetTag() *TagOperation {
	if x != nil {
		return x.Tag
	}
	return nil
}

type ModifyTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId string `protobuf:"bytes,1,opt,name=TagId,proto3" json:"TagId,omitempty"`
}

func (x *ModifyTagResponse) Reset() {
	*x = ModifyTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTagResponse) ProtoMessage() {}

func (x *ModifyTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTagResponse.ProtoReflect.Descriptor instead.
func (*ModifyTagResponse) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{14}
}

func (x *ModifyTagResponse) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

//DescribeTags
type TagFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=Values,proto3" json:"Values,omitempty"`
}

func (x *TagFilter) Reset() {
	*x = TagFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagFilter) ProtoMessage() {}

func (x *TagFilter) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagFilter.ProtoReflect.Descriptor instead.
func (*TagFilter) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{15}
}

func (x *TagFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TagFilter) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type SortBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	By      string `protobuf:"bytes,1,opt,name=By,proto3" json:"By,omitempty"`
	Descend bool   `protobuf:"varint,2,opt,name=Descend,proto3" json:"Descend,omitempty"`
}

func (x *SortBy) Reset() {
	*x = SortBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortBy) ProtoMessage() {}

func (x *SortBy) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortBy.ProtoReflect.Descriptor instead.
func (*SortBy) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{16}
}

func (x *SortBy) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

func (x *SortBy) GetDescend() bool {
	if x != nil {
		return x.Descend
	}
	return false
}

type DescribeTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber uint32       `protobuf:"varint,3,opt,name=PageNumber,proto3" json:"PageNumber,omitempty"`
	PageSize   uint32       `protobuf:"varint,4,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	FilterSet  []*TagFilter `protobuf:"bytes,5,rep,name=FilterSet,proto3" json:"FilterSet,omitempty"`
	Sort       *SortBy      `protobuf:"bytes,6,opt,name=Sort,proto3" json:"Sort,omitempty"`
}

func (x *DescribeTagsRequest) Reset() {
	*x = DescribeTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTagsRequest) ProtoMessage() {}

func (x *DescribeTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTagsRequest.ProtoReflect.Descriptor instead.
func (*DescribeTagsRequest) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{17}
}

func (x *DescribeTagsRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *DescribeTagsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribeTagsRequest) GetFilterSet() []*TagFilter {
	if x != nil {
		return x.FilterSet
	}
	return nil
}

func (x *DescribeTagsRequest) GetSort() *SortBy {
	if x != nil {
		return x.Sort
	}
	return nil
}

type DescribeTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32           `protobuf:"varint,3,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	TagSet     []*TagOperation `protobuf:"bytes,4,rep,name=TagSet,proto3" json:"TagSet,omitempty"`
}

func (x *DescribeTagsResponse) Reset() {
	*x = DescribeTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTagsResponse) ProtoMessage() {}

func (x *DescribeTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTagsResponse.ProtoReflect.Descriptor instead.
func (*DescribeTagsResponse) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{18}
}

func (x *DescribeTagsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *DescribeTagsResponse) GetTagSet() []*TagOperation {
	if x != nil {
		return x.TagSet
	}
	return nil
}

//CreateTagAnalysisTask
type CreateTagAnalysisTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImportTaskIds []string `protobuf:"bytes,3,rep,name=ImportTaskIds,proto3" json:"ImportTaskIds,omitempty"`
	CallbackURL   string   `protobuf:"bytes,6,opt,name=CallbackURL,proto3" json:"CallbackURL,omitempty"`
}

func (x *CreateTagAnalysisTaskRequest) Reset() {
	*x = CreateTagAnalysisTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagAnalysisTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagAnalysisTaskRequest) ProtoMessage() {}

func (x *CreateTagAnalysisTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagAnalysisTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateTagAnalysisTaskRequest) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{19}
}

func (x *CreateTagAnalysisTaskRequest) GetImportTaskIds() []string {
	if x != nil {
		return x.ImportTaskIds
	}
	return nil
}

func (x *CreateTagAnalysisTaskRequest) GetCallbackURL() string {
	if x != nil {
		return x.CallbackURL
	}
	return ""
}

type TaskItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImportTaskId string `protobuf:"bytes,1,opt,name=ImportTaskId,proto3" json:"ImportTaskId,omitempty"`
	TaskId       string `protobuf:"bytes,2,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	ErrMsg       string `protobuf:"bytes,3,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
}

func (x *TaskItem) Reset() {
	*x = TaskItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskItem) ProtoMessage() {}

func (x *TaskItem) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskItem.ProtoReflect.Descriptor instead.
func (*TaskItem) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{20}
}

func (x *TaskItem) GetImportTaskId() string {
	if x != nil {
		return x.ImportTaskId
	}
	return ""
}

func (x *TaskItem) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskItem) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type CreateTagAnalysisTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskSet []*TaskItem `protobuf:"bytes,3,rep,name=TaskSet,proto3" json:"TaskSet,omitempty"`
}

func (x *CreateTagAnalysisTaskResponse) Reset() {
	*x = CreateTagAnalysisTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagAnalysisTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagAnalysisTaskResponse) ProtoMessage() {}

func (x *CreateTagAnalysisTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagAnalysisTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateTagAnalysisTaskResponse) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{21}
}

func (x *CreateTagAnalysisTaskResponse) GetTaskSet() []*TaskItem {
	if x != nil {
		return x.TaskSet
	}
	return nil
}

//DescribeTagAnalysisTaskDataRequest
type DescribeTagAnalysisTaskDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         string `protobuf:"bytes,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	TagDisplayType string `protobuf:"bytes,6,opt,name=TagDisplayType,proto3" json:"TagDisplayType,omitempty"`
}

func (x *DescribeTagAnalysisTaskDataRequest) Reset() {
	*x = DescribeTagAnalysisTaskDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTagAnalysisTaskDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTagAnalysisTaskDataRequest) ProtoMessage() {}

func (x *DescribeTagAnalysisTaskDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTagAnalysisTaskDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeTagAnalysisTaskDataRequest) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{22}
}

func (x *DescribeTagAnalysisTaskDataRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DescribeTagAnalysisTaskDataRequest) GetTagDisplayType() string {
	if x != nil {
		return x.TagDisplayType
	}
	return ""
}

type AITagAnalysisTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagTaskData      *videostructure.AITagTaskData      `protobuf:"bytes,1,opt,name=TagTaskData,proto3" json:"TagTaskData,omitempty"`
	TagAudioTaskData *videostructure.AITagAudioTaskData `protobuf:"bytes,2,opt,name=TagAudioTaskData,proto3" json:"TagAudioTaskData,omitempty"`
	TagImageTaskData *videostructure.AITagImageTaskData `protobuf:"bytes,3,opt,name=TagImageTaskData,proto3" json:"TagImageTaskData,omitempty"`
	TagTextTaskData  *videostructure.AITagTextTaskData  `protobuf:"bytes,4,opt,name=TagTextTaskData,proto3" json:"TagTextTaskData,omitempty"`
	CatalogTaskData  *videostructure.AICatalogTaskData  `protobuf:"bytes,5,opt,name=CatalogTaskData,proto3" json:"CatalogTaskData,omitempty"`
	CutTaskData      *videostructure.AICutTaskData      `protobuf:"bytes,6,opt,name=CutTaskData,proto3" json:"CutTaskData,omitempty"`
}

func (x *AITagAnalysisTaskData) Reset() {
	*x = AITagAnalysisTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AITagAnalysisTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AITagAnalysisTaskData) ProtoMessage() {}

func (x *AITagAnalysisTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AITagAnalysisTaskData.ProtoReflect.Descriptor instead.
func (*AITagAnalysisTaskData) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{23}
}

func (x *AITagAnalysisTaskData) GetTagTaskData() *videostructure.AITagTaskData {
	if x != nil {
		return x.TagTaskData
	}
	return nil
}

func (x *AITagAnalysisTaskData) GetTagAudioTaskData() *videostructure.AITagAudioTaskData {
	if x != nil {
		return x.TagAudioTaskData
	}
	return nil
}

func (x *AITagAnalysisTaskData) GetTagImageTaskData() *videostructure.AITagImageTaskData {
	if x != nil {
		return x.TagImageTaskData
	}
	return nil
}

func (x *AITagAnalysisTaskData) GetTagTextTaskData() *videostructure.AITagTextTaskData {
	if x != nil {
		return x.TagTextTaskData
	}
	return nil
}

func (x *AITagAnalysisTaskData) GetCatalogTaskData() *videostructure.AICatalogTaskData {
	if x != nil {
		return x.CatalogTaskData
	}
	return nil
}

func (x *AITagAnalysisTaskData) GetCutTaskData() *videostructure.AICutTaskData {
	if x != nil {
		return x.CutTaskData
	}
	return nil
}

type DescribeTagAnalysisTaskDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskData *AITagAnalysisTaskData `protobuf:"bytes,2,opt,name=TaskData,proto3" json:"TaskData,omitempty"`
	TaskInfo *apicommon.TaskInfo    `protobuf:"bytes,3,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
}

func (x *DescribeTagAnalysisTaskDataResponse) Reset() {
	*x = DescribeTagAnalysisTaskDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTagAnalysisTaskDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTagAnalysisTaskDataResponse) ProtoMessage() {}

func (x *DescribeTagAnalysisTaskDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTagAnalysisTaskDataResponse.ProtoReflect.Descriptor instead.
func (*DescribeTagAnalysisTaskDataResponse) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{24}
}

func (x *DescribeTagAnalysisTaskDataResponse) GetTaskData() *AITagAnalysisTaskData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *DescribeTagAnalysisTaskDataResponse) GetTaskInfo() *apicommon.TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

type TagFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	FileKey           string `protobuf:"bytes,2,opt,name=FileKey,proto3" json:"FileKey,omitempty"`
	L1LabelName       string `protobuf:"bytes,3,opt,name=L1LabelName,proto3" json:"L1LabelName,omitempty"`
	L2LabelName       string `protobuf:"bytes,4,opt,name=L2LabelName,proto3" json:"L2LabelName,omitempty"`
	TagType           string `protobuf:"bytes,5,opt,name=TagType,proto3" json:"TagType,omitempty"`
	CreateTime        string `protobuf:"bytes,6,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	UpdatedTime       string `protobuf:"bytes,7,opt,name=UpdatedTime,proto3" json:"UpdatedTime,omitempty"`
	Category          string `protobuf:"bytes,8,opt,name=Category,proto3" json:"Category,omitempty"`
	DeprecatedFileKey string `protobuf:"bytes,9,opt,name=DeprecatedFileKey,proto3" json:"DeprecatedFileKey,omitempty"`
	Id                string `protobuf:"bytes,10,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *TagFile) Reset() {
	*x = TagFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagFile) ProtoMessage() {}

func (x *TagFile) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagFile.ProtoReflect.Descriptor instead.
func (*TagFile) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{25}
}

func (x *TagFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TagFile) GetFileKey() string {
	if x != nil {
		return x.FileKey
	}
	return ""
}

func (x *TagFile) GetL1LabelName() string {
	if x != nil {
		return x.L1LabelName
	}
	return ""
}

func (x *TagFile) GetL2LabelName() string {
	if x != nil {
		return x.L2LabelName
	}
	return ""
}

func (x *TagFile) GetTagType() string {
	if x != nil {
		return x.TagType
	}
	return ""
}

func (x *TagFile) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TagFile) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *TagFile) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *TagFile) GetDeprecatedFileKey() string {
	if x != nil {
		return x.DeprecatedFileKey
	}
	return ""
}

func (x *TagFile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DescribeTagFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber uint32       `protobuf:"varint,3,opt,name=PageNumber,proto3" json:"PageNumber,omitempty"`
	PageSize   uint32       `protobuf:"varint,4,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	FilterSet  []*TagFilter `protobuf:"bytes,5,rep,name=FilterSet,proto3" json:"FilterSet,omitempty"`
	Sort       *SortBy      `protobuf:"bytes,6,opt,name=Sort,proto3" json:"Sort,omitempty"`
}

func (x *DescribeTagFilesRequest) Reset() {
	*x = DescribeTagFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTagFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTagFilesRequest) ProtoMessage() {}

func (x *DescribeTagFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTagFilesRequest.ProtoReflect.Descriptor instead.
func (*DescribeTagFilesRequest) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{26}
}

func (x *DescribeTagFilesRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *DescribeTagFilesRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribeTagFilesRequest) GetFilterSet() []*TagFilter {
	if x != nil {
		return x.FilterSet
	}
	return nil
}

func (x *DescribeTagFilesRequest) GetSort() *SortBy {
	if x != nil {
		return x.Sort
	}
	return nil
}

type DescribeTagFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32      `protobuf:"varint,3,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	TagFileSet []*TagFile `protobuf:"bytes,4,rep,name=TagFileSet,proto3" json:"TagFileSet,omitempty"`
}

func (x *DescribeTagFilesResponse) Reset() {
	*x = DescribeTagFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTagFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTagFilesResponse) ProtoMessage() {}

func (x *DescribeTagFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTagFilesResponse.ProtoReflect.Descriptor instead.
func (*DescribeTagFilesResponse) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{27}
}

func (x *DescribeTagFilesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *DescribeTagFilesResponse) GetTagFileSet() []*TagFile {
	if x != nil {
		return x.TagFileSet
	}
	return nil
}

type DeleteTagFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileKey string `protobuf:"bytes,3,opt,name=FileKey,proto3" json:"FileKey,omitempty"`
}

func (x *DeleteTagFilesRequest) Reset() {
	*x = DeleteTagFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagFilesRequest) ProtoMessage() {}

func (x *DeleteTagFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagFilesRequest.ProtoReflect.Descriptor instead.
func (*DeleteTagFilesRequest) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteTagFilesRequest) GetFileKey() string {
	if x != nil {
		return x.FileKey
	}
	return ""
}

type DeleteTagFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTagFilesResponse) Reset() {
	*x = DeleteTagFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagFilesResponse) ProtoMessage() {}

func (x *DeleteTagFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagFilesResponse.ProtoReflect.Descriptor instead.
func (*DeleteTagFilesResponse) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{29}
}

type TagFileUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileKey string `protobuf:"bytes,3,opt,name=FileKey,proto3" json:"FileKey,omitempty"`
}

func (x *TagFileUrlRequest) Reset() {
	*x = TagFileUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagFileUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagFileUrlRequest) ProtoMessage() {}

func (x *TagFileUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagFileUrlRequest.ProtoReflect.Descriptor instead.
func (*TagFileUrlRequest) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{30}
}

func (x *TagFileUrlRequest) GetFileKey() string {
	if x != nil {
		return x.FileKey
	}
	return ""
}

type TagFileUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *TagFileUrlResponse) Reset() {
	*x = TagFileUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_tag_analyse_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagFileUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagFileUrlResponse) ProtoMessage() {}

func (x *TagFileUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_tag_analyse_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagFileUrlResponse.ProtoReflect.Descriptor instead.
func (*TagFileUrlResponse) Descriptor() ([]byte, []int) {
	return file_ai_tag_analyse_proto_rawDescGZIP(), []int{31}
}

func (x *TagFileUrlResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

var File_ai_tag_analyse_proto protoreflect.FileDescriptor

var file_ai_tag_analyse_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x69, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x01, 0x0a, 0x0d, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4c, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x54, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x08, 0x54, 0x61, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65,
	0x2e, 0x54, 0x61, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x08, 0x54, 0x61, 0x67, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x22, 0x6b, 0x0a, 0x15, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x61, 0x67, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x10,
	0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65,
	0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10,
	0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74,
	0x22, 0xb0, 0x02, 0x0a, 0x0c, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x61, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x61, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x31, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4c, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c,
	0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4c, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x07, 0x4c, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x07,
	0x4c, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x4c, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x65, 0x2e, 0x4c, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0a, 0x4c, 0x32, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x22, 0x5a, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4c, 0x31, 0x4c, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x65, 0x2e, 0x4c, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x08, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x53, 0x65, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e,
	0x54, 0x61, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x54, 0x61,
	0x67, 0x22, 0x29, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x61, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x61, 0x67, 0x49, 0x64, 0x22, 0x92, 0x02, 0x0a,
	0x10, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x31, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x31,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x32, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4c, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x22, 0x23, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x61,
	0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x61, 0x67, 0x49, 0x64,
	0x22, 0x29, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x61, 0x67, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x61, 0x67, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x10, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x03, 0x54, 0x61, 0x67, 0x22, 0x29, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x61, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x61,
	0x67, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x06,
	0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x42, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x42, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x22, 0xc8, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x65, 0x2e, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x22, 0x75, 0x0a, 0x14, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x54, 0x61,
	0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x54, 0x61, 0x67, 0x53,
	0x65, 0x74, 0x22, 0x66, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x22, 0x5e, 0x0a, 0x08, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x5c, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x07, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x74, 0x22, 0x64, 0x0a, 0x22, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x67, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x54, 0x61, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x95,
	0x04, 0x0a, 0x15, 0x41, 0x49, 0x54, 0x61, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0b, 0x54, 0x61, 0x67, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x54, 0x61, 0x67, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x54, 0x61, 0x67, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x10, 0x54, 0x61, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x54, 0x61, 0x67,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x54,
	0x61, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x59, 0x0a, 0x10, 0x54, 0x61, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x54, 0x61, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x54, 0x61, 0x67, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x0f, 0x54, 0x61,
	0x67, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x41, 0x49, 0x54, 0x61, 0x67, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0f, 0x54, 0x61, 0x67, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x56, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x75,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x43, 0x75,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x43, 0x75, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x61, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69,
	0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x41, 0x49, 0x54, 0x61, 0x67,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x08, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xb1, 0x02, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x4c, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4c, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x4c, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x40, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x12, 0x33, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74,
	0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x22, 0x7c, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65,
	0x2e, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x22, 0x31, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2d, 0x0a, 0x11, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x22, 0x26, 0x0a, 0x12, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x2a, 0x4b, 0x0a, 0x08, 0x54, 0x61, 0x67, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x47, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41,
	0x47, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4e, 0x4c, 0x50, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x41, 0x47, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x10, 0x02, 0x32, 0xf8, 0x09, 0x0a, 0x0c, 0x41, 0x69, 0x54, 0x61, 0x67, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4c, 0x31, 0x4c, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x31, 0x4c, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x29, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x09, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x67, 0x12, 0x29, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x65, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x29,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61,
	0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x61, 0x67, 0x12, 0x29, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0c, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x35, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69,
	0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x98, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x67, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74,
	0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x61, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x61, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x30,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61,
	0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69,
	0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x65, 0x2e, 0x54, 0x61, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x2e, 0x54, 0x61,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x5c, 0x5a, 0x5a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54,
	0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x73, 0x64, 0x6b,
	0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73, 0x70, 0x65,
	0x63, 0x2f, 0x61, 0x69, 0x74, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ai_tag_analyse_proto_rawDescOnce sync.Once
	file_ai_tag_analyse_proto_rawDescData = file_ai_tag_analyse_proto_rawDesc
)

func file_ai_tag_analyse_proto_rawDescGZIP() []byte {
	file_ai_tag_analyse_proto_rawDescOnce.Do(func() {
		file_ai_tag_analyse_proto_rawDescData = protoimpl.X.CompressGZIP(file_ai_tag_analyse_proto_rawDescData)
	})
	return file_ai_tag_analyse_proto_rawDescData
}

var file_ai_tag_analyse_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ai_tag_analyse_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_ai_tag_analyse_proto_goTypes = []interface{}{
	(TagClass)(0),                               // 0: trpc.media.aitaganalyse.TagClass
	(*SnippetResult)(nil),                       // 1: trpc.media.aitaganalyse.SnippetResult
	(*KafkaTagAnalyseResult)(nil),               // 2: trpc.media.aitaganalyse.KafkaTagAnalyseResult
	(*TagOperation)(nil),                        // 3: trpc.media.aitaganalyse.TagOperation
	(*L2Label)(nil),                             // 4: trpc.media.aitaganalyse.L2Label
	(*L1Label)(nil),                             // 5: trpc.media.aitaganalyse.L1Label
	(*DescribeL1L2LabelsResponse)(nil),          // 6: trpc.media.aitaganalyse.DescribeL1L2LabelsResponse
	(*CommonRequest)(nil),                       // 7: trpc.media.aitaganalyse.CommonRequest
	(*CreateTagRequest)(nil),                    // 8: trpc.media.aitaganalyse.CreateTagRequest
	(*CreateTagResponse)(nil),                   // 9: trpc.media.aitaganalyse.CreateTagResponse
	(*ImportTagRequest)(nil),                    // 10: trpc.media.aitaganalyse.ImportTagRequest
	(*ImportTagResponse)(nil),                   // 11: trpc.media.aitaganalyse.ImportTagResponse
	(*DeleteTagRequest)(nil),                    // 12: trpc.media.aitaganalyse.DeleteTagRequest
	(*DeleteTagResponse)(nil),                   // 13: trpc.media.aitaganalyse.DeleteTagResponse
	(*ModifyTagRequest)(nil),                    // 14: trpc.media.aitaganalyse.ModifyTagRequest
	(*ModifyTagResponse)(nil),                   // 15: trpc.media.aitaganalyse.ModifyTagResponse
	(*TagFilter)(nil),                           // 16: trpc.media.aitaganalyse.TagFilter
	(*SortBy)(nil),                              // 17: trpc.media.aitaganalyse.SortBy
	(*DescribeTagsRequest)(nil),                 // 18: trpc.media.aitaganalyse.DescribeTagsRequest
	(*DescribeTagsResponse)(nil),                // 19: trpc.media.aitaganalyse.DescribeTagsResponse
	(*CreateTagAnalysisTaskRequest)(nil),        // 20: trpc.media.aitaganalyse.CreateTagAnalysisTaskRequest
	(*TaskItem)(nil),                            // 21: trpc.media.aitaganalyse.TaskItem
	(*CreateTagAnalysisTaskResponse)(nil),       // 22: trpc.media.aitaganalyse.CreateTagAnalysisTaskResponse
	(*DescribeTagAnalysisTaskDataRequest)(nil),  // 23: trpc.media.aitaganalyse.DescribeTagAnalysisTaskDataRequest
	(*AITagAnalysisTaskData)(nil),               // 24: trpc.media.aitaganalyse.AITagAnalysisTaskData
	(*DescribeTagAnalysisTaskDataResponse)(nil), // 25: trpc.media.aitaganalyse.DescribeTagAnalysisTaskDataResponse
	(*TagFile)(nil),                             // 26: trpc.media.aitaganalyse.TagFile
	(*DescribeTagFilesRequest)(nil),             // 27: trpc.media.aitaganalyse.DescribeTagFilesRequest
	(*DescribeTagFilesResponse)(nil),            // 28: trpc.media.aitaganalyse.DescribeTagFilesResponse
	(*DeleteTagFilesRequest)(nil),               // 29: trpc.media.aitaganalyse.DeleteTagFilesRequest
	(*DeleteTagFilesResponse)(nil),              // 30: trpc.media.aitaganalyse.DeleteTagFilesResponse
	(*TagFileUrlRequest)(nil),                   // 31: trpc.media.aitaganalyse.TagFileUrlRequest
	(*TagFileUrlResponse)(nil),                  // 32: trpc.media.aitaganalyse.TagFileUrlResponse
	(*videostructure.AITagTaskData)(nil),        // 33: trpc.media.videostructure.AITagTaskData
	(*videostructure.AITagAudioTaskData)(nil),   // 34: trpc.media.videostructure.AITagAudioTaskData
	(*videostructure.AITagImageTaskData)(nil),   // 35: trpc.media.videostructure.AITagImageTaskData
	(*videostructure.AITagTextTaskData)(nil),    // 36: trpc.media.videostructure.AITagTextTaskData
	(*videostructure.AICatalogTaskData)(nil),    // 37: trpc.media.videostructure.AICatalogTaskData
	(*videostructure.AICutTaskData)(nil),        // 38: trpc.media.videostructure.AICutTaskData
	(*apicommon.TaskInfo)(nil),                  // 39: trpc.media.common.TaskInfo
}
var file_ai_tag_analyse_proto_depIdxs = []int32{
	0,  // 0: trpc.media.aitaganalyse.SnippetResult.TagClass:type_name -> trpc.media.aitaganalyse.TagClass
	1,  // 1: trpc.media.aitaganalyse.KafkaTagAnalyseResult.SnippetResultSet:type_name -> trpc.media.aitaganalyse.SnippetResult
	4,  // 2: trpc.media.aitaganalyse.L1Label.L2LabelSet:type_name -> trpc.media.aitaganalyse.L2Label
	5,  // 3: trpc.media.aitaganalyse.DescribeL1L2LabelsResponse.LabelSet:type_name -> trpc.media.aitaganalyse.L1Label
	3,  // 4: trpc.media.aitaganalyse.CreateTagRequest.Tag:type_name -> trpc.media.aitaganalyse.TagOperation
	3,  // 5: trpc.media.aitaganalyse.ModifyTagRequest.Tag:type_name -> trpc.media.aitaganalyse.TagOperation
	16, // 6: trpc.media.aitaganalyse.DescribeTagsRequest.FilterSet:type_name -> trpc.media.aitaganalyse.TagFilter
	17, // 7: trpc.media.aitaganalyse.DescribeTagsRequest.Sort:type_name -> trpc.media.aitaganalyse.SortBy
	3,  // 8: trpc.media.aitaganalyse.DescribeTagsResponse.TagSet:type_name -> trpc.media.aitaganalyse.TagOperation
	21, // 9: trpc.media.aitaganalyse.CreateTagAnalysisTaskResponse.TaskSet:type_name -> trpc.media.aitaganalyse.TaskItem
	33, // 10: trpc.media.aitaganalyse.AITagAnalysisTaskData.TagTaskData:type_name -> trpc.media.videostructure.AITagTaskData
	34, // 11: trpc.media.aitaganalyse.AITagAnalysisTaskData.TagAudioTaskData:type_name -> trpc.media.videostructure.AITagAudioTaskData
	35, // 12: trpc.media.aitaganalyse.AITagAnalysisTaskData.TagImageTaskData:type_name -> trpc.media.videostructure.AITagImageTaskData
	36, // 13: trpc.media.aitaganalyse.AITagAnalysisTaskData.TagTextTaskData:type_name -> trpc.media.videostructure.AITagTextTaskData
	37, // 14: trpc.media.aitaganalyse.AITagAnalysisTaskData.CatalogTaskData:type_name -> trpc.media.videostructure.AICatalogTaskData
	38, // 15: trpc.media.aitaganalyse.AITagAnalysisTaskData.CutTaskData:type_name -> trpc.media.videostructure.AICutTaskData
	24, // 16: trpc.media.aitaganalyse.DescribeTagAnalysisTaskDataResponse.TaskData:type_name -> trpc.media.aitaganalyse.AITagAnalysisTaskData
	39, // 17: trpc.media.aitaganalyse.DescribeTagAnalysisTaskDataResponse.TaskInfo:type_name -> trpc.media.common.TaskInfo
	16, // 18: trpc.media.aitaganalyse.DescribeTagFilesRequest.FilterSet:type_name -> trpc.media.aitaganalyse.TagFilter
	17, // 19: trpc.media.aitaganalyse.DescribeTagFilesRequest.Sort:type_name -> trpc.media.aitaganalyse.SortBy
	26, // 20: trpc.media.aitaganalyse.DescribeTagFilesResponse.TagFileSet:type_name -> trpc.media.aitaganalyse.TagFile
	7,  // 21: trpc.media.aitaganalyse.AiTagAnalyse.DescribeL1L2Labels:input_type -> trpc.media.aitaganalyse.CommonRequest
	8,  // 22: trpc.media.aitaganalyse.AiTagAnalyse.CreateTag:input_type -> trpc.media.aitaganalyse.CreateTagRequest
	10, // 23: trpc.media.aitaganalyse.AiTagAnalyse.ImportTag:input_type -> trpc.media.aitaganalyse.ImportTagRequest
	12, // 24: trpc.media.aitaganalyse.AiTagAnalyse.DeleteTag:input_type -> trpc.media.aitaganalyse.DeleteTagRequest
	14, // 25: trpc.media.aitaganalyse.AiTagAnalyse.ModifyTag:input_type -> trpc.media.aitaganalyse.ModifyTagRequest
	18, // 26: trpc.media.aitaganalyse.AiTagAnalyse.DescribeTags:input_type -> trpc.media.aitaganalyse.DescribeTagsRequest
	20, // 27: trpc.media.aitaganalyse.AiTagAnalyse.CreateTagAnalysisTask:input_type -> trpc.media.aitaganalyse.CreateTagAnalysisTaskRequest
	23, // 28: trpc.media.aitaganalyse.AiTagAnalyse.DescribeTagAnalysisTaskData:input_type -> trpc.media.aitaganalyse.DescribeTagAnalysisTaskDataRequest
	27, // 29: trpc.media.aitaganalyse.AiTagAnalyse.DescribeTagFiles:input_type -> trpc.media.aitaganalyse.DescribeTagFilesRequest
	29, // 30: trpc.media.aitaganalyse.AiTagAnalyse.DeleteTagFiles:input_type -> trpc.media.aitaganalyse.DeleteTagFilesRequest
	31, // 31: trpc.media.aitaganalyse.AiTagAnalyse.GetTagFileUrl:input_type -> trpc.media.aitaganalyse.TagFileUrlRequest
	6,  // 32: trpc.media.aitaganalyse.AiTagAnalyse.DescribeL1L2Labels:output_type -> trpc.media.aitaganalyse.DescribeL1L2LabelsResponse
	9,  // 33: trpc.media.aitaganalyse.AiTagAnalyse.CreateTag:output_type -> trpc.media.aitaganalyse.CreateTagResponse
	11, // 34: trpc.media.aitaganalyse.AiTagAnalyse.ImportTag:output_type -> trpc.media.aitaganalyse.ImportTagResponse
	13, // 35: trpc.media.aitaganalyse.AiTagAnalyse.DeleteTag:output_type -> trpc.media.aitaganalyse.DeleteTagResponse
	15, // 36: trpc.media.aitaganalyse.AiTagAnalyse.ModifyTag:output_type -> trpc.media.aitaganalyse.ModifyTagResponse
	19, // 37: trpc.media.aitaganalyse.AiTagAnalyse.DescribeTags:output_type -> trpc.media.aitaganalyse.DescribeTagsResponse
	22, // 38: trpc.media.aitaganalyse.AiTagAnalyse.CreateTagAnalysisTask:output_type -> trpc.media.aitaganalyse.CreateTagAnalysisTaskResponse
	25, // 39: trpc.media.aitaganalyse.AiTagAnalyse.DescribeTagAnalysisTaskData:output_type -> trpc.media.aitaganalyse.DescribeTagAnalysisTaskDataResponse
	28, // 40: trpc.media.aitaganalyse.AiTagAnalyse.DescribeTagFiles:output_type -> trpc.media.aitaganalyse.DescribeTagFilesResponse
	30, // 41: trpc.media.aitaganalyse.AiTagAnalyse.DeleteTagFiles:output_type -> trpc.media.aitaganalyse.DeleteTagFilesResponse
	32, // 42: trpc.media.aitaganalyse.AiTagAnalyse.GetTagFileUrl:output_type -> trpc.media.aitaganalyse.TagFileUrlResponse
	32, // [32:43] is the sub-list for method output_type
	21, // [21:32] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_ai_tag_analyse_proto_init() }
func file_ai_tag_analyse_proto_init() {
	if File_ai_tag_analyse_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ai_tag_analyse_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnippetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaTagAnalyseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L1Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeL1L2LabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagAnalysisTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagAnalysisTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTagAnalysisTaskDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AITagAnalysisTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTagAnalysisTaskDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTagFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTagFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagFileUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_tag_analyse_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagFileUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ai_tag_analyse_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ai_tag_analyse_proto_goTypes,
		DependencyIndexes: file_ai_tag_analyse_proto_depIdxs,
		EnumInfos:         file_ai_tag_analyse_proto_enumTypes,
		MessageInfos:      file_ai_tag_analyse_proto_msgTypes,
	}.Build()
	File_ai_tag_analyse_proto = out.File
	file_ai_tag_analyse_proto_rawDesc = nil
	file_ai_tag_analyse_proto_goTypes = nil
	file_ai_tag_analyse_proto_depIdxs = nil
}
