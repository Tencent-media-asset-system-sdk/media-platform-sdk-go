// Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
// source: ai_tag_analyse.proto

package aitaganalyse

import (
	"context"
	"fmt"

	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock"
	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/http"

	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/client"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/codec"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/server"
)

/* ************************************ Service Definition ************************************ */

// AiTagAnalyseService defines service
type AiTagAnalyseService interface {
	DescribeL1L2Labels(ctx context.Context, req *CommonRequest, rsp *DescribeL1L2LabelsResponse) (err error) // @alias=/DescribeL1L2Labels

	CreateTag(ctx context.Context, req *CreateTagRequest, rsp *CreateTagResponse) (err error) // @alias=/CreateTag

	ImportTag(ctx context.Context, req *ImportTagRequest, rsp *ImportTagResponse) (err error) // @alias=/ImportTag

	DeleteTag(ctx context.Context, req *DeleteTagRequest, rsp *DeleteTagResponse) (err error) // @alias=/DeleteTag

	ModifyTag(ctx context.Context, req *ModifyTagRequest, rsp *ModifyTagResponse) (err error) // @alias=/ModifyTag

	DescribeTags(ctx context.Context, req *DescribeTagsRequest, rsp *DescribeTagsResponse) (err error) // @alias=/DescribeTags

	CreateTagAnalysisTask(ctx context.Context, req *CreateTagAnalysisTaskRequest, rsp *CreateTagAnalysisTaskResponse) (err error) // @alias=/CreateTagAnalysisTask

	DescribeTagAnalysisTaskData(ctx context.Context, req *DescribeTagAnalysisTaskDataRequest, rsp *DescribeTagAnalysisTaskDataResponse) (err error) // @alias=/DescribeTagAnalysisTaskData

	DescribeTagFiles(ctx context.Context, req *DescribeTagFilesRequest, rsp *DescribeTagFilesResponse) (err error) // @alias=/DescribeTagFiles

	DeleteTagFiles(ctx context.Context, req *DeleteTagFilesRequest, rsp *DeleteTagFilesResponse) (err error) // @alias=/DeleteTagFiles

	GetTagFileUrl(ctx context.Context, req *TagFileUrlRequest, rsp *TagFileUrlResponse) (err error) // @alias=/GetTagFileUrl
}

func AiTagAnalyseService_DescribeL1L2Labels_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &CommonRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AiTagAnalyseService).DescribeL1L2Labels(ctx, reqbody.(*CommonRequest), rspbody.(*DescribeL1L2LabelsResponse))
	}

	rsp := &DescribeL1L2LabelsResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func AiTagAnalyseService_CreateTag_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &CreateTagRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AiTagAnalyseService).CreateTag(ctx, reqbody.(*CreateTagRequest), rspbody.(*CreateTagResponse))
	}

	rsp := &CreateTagResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func AiTagAnalyseService_ImportTag_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &ImportTagRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AiTagAnalyseService).ImportTag(ctx, reqbody.(*ImportTagRequest), rspbody.(*ImportTagResponse))
	}

	rsp := &ImportTagResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func AiTagAnalyseService_DeleteTag_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &DeleteTagRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AiTagAnalyseService).DeleteTag(ctx, reqbody.(*DeleteTagRequest), rspbody.(*DeleteTagResponse))
	}

	rsp := &DeleteTagResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func AiTagAnalyseService_ModifyTag_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &ModifyTagRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AiTagAnalyseService).ModifyTag(ctx, reqbody.(*ModifyTagRequest), rspbody.(*ModifyTagResponse))
	}

	rsp := &ModifyTagResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func AiTagAnalyseService_DescribeTags_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &DescribeTagsRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AiTagAnalyseService).DescribeTags(ctx, reqbody.(*DescribeTagsRequest), rspbody.(*DescribeTagsResponse))
	}

	rsp := &DescribeTagsResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func AiTagAnalyseService_CreateTagAnalysisTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &CreateTagAnalysisTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AiTagAnalyseService).CreateTagAnalysisTask(ctx, reqbody.(*CreateTagAnalysisTaskRequest), rspbody.(*CreateTagAnalysisTaskResponse))
	}

	rsp := &CreateTagAnalysisTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func AiTagAnalyseService_DescribeTagAnalysisTaskData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &DescribeTagAnalysisTaskDataRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AiTagAnalyseService).DescribeTagAnalysisTaskData(ctx, reqbody.(*DescribeTagAnalysisTaskDataRequest), rspbody.(*DescribeTagAnalysisTaskDataResponse))
	}

	rsp := &DescribeTagAnalysisTaskDataResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func AiTagAnalyseService_DescribeTagFiles_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &DescribeTagFilesRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AiTagAnalyseService).DescribeTagFiles(ctx, reqbody.(*DescribeTagFilesRequest), rspbody.(*DescribeTagFilesResponse))
	}

	rsp := &DescribeTagFilesResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func AiTagAnalyseService_DeleteTagFiles_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &DeleteTagFilesRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AiTagAnalyseService).DeleteTagFiles(ctx, reqbody.(*DeleteTagFilesRequest), rspbody.(*DeleteTagFilesResponse))
	}

	rsp := &DeleteTagFilesResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func AiTagAnalyseService_GetTagFileUrl_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &TagFileUrlRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(AiTagAnalyseService).GetTagFileUrl(ctx, reqbody.(*TagFileUrlRequest), rspbody.(*TagFileUrlResponse))
	}

	rsp := &TagFileUrlResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// AiTagAnalyseServer_ServiceDesc descriptor for server.RegisterService
var AiTagAnalyseServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.aitaganalyse.AiTagAnalyse",
	HandlerType: ((*AiTagAnalyseService)(nil)),
	Methods: []server.Method{
		{
			Name: "/DescribeL1L2Labels",
			Func: AiTagAnalyseService_DescribeL1L2Labels_Handler,
		},
		{
			Name: "/CreateTag",
			Func: AiTagAnalyseService_CreateTag_Handler,
		},
		{
			Name: "/ImportTag",
			Func: AiTagAnalyseService_ImportTag_Handler,
		},
		{
			Name: "/DeleteTag",
			Func: AiTagAnalyseService_DeleteTag_Handler,
		},
		{
			Name: "/ModifyTag",
			Func: AiTagAnalyseService_ModifyTag_Handler,
		},
		{
			Name: "/DescribeTags",
			Func: AiTagAnalyseService_DescribeTags_Handler,
		},
		{
			Name: "/CreateTagAnalysisTask",
			Func: AiTagAnalyseService_CreateTagAnalysisTask_Handler,
		},
		{
			Name: "/DescribeTagAnalysisTaskData",
			Func: AiTagAnalyseService_DescribeTagAnalysisTaskData_Handler,
		},
		{
			Name: "/DescribeTagFiles",
			Func: AiTagAnalyseService_DescribeTagFiles_Handler,
		},
		{
			Name: "/DeleteTagFiles",
			Func: AiTagAnalyseService_DeleteTagFiles_Handler,
		},
		{
			Name: "/GetTagFileUrl",
			Func: AiTagAnalyseService_GetTagFileUrl_Handler,
		},
		{
			Name: "/trpc.media.aitaganalyse.AiTagAnalyse/DescribeL1L2Labels",
			Func: AiTagAnalyseService_DescribeL1L2Labels_Handler,
		},
		{
			Name: "/trpc.media.aitaganalyse.AiTagAnalyse/CreateTag",
			Func: AiTagAnalyseService_CreateTag_Handler,
		},
		{
			Name: "/trpc.media.aitaganalyse.AiTagAnalyse/ImportTag",
			Func: AiTagAnalyseService_ImportTag_Handler,
		},
		{
			Name: "/trpc.media.aitaganalyse.AiTagAnalyse/DeleteTag",
			Func: AiTagAnalyseService_DeleteTag_Handler,
		},
		{
			Name: "/trpc.media.aitaganalyse.AiTagAnalyse/ModifyTag",
			Func: AiTagAnalyseService_ModifyTag_Handler,
		},
		{
			Name: "/trpc.media.aitaganalyse.AiTagAnalyse/DescribeTags",
			Func: AiTagAnalyseService_DescribeTags_Handler,
		},
		{
			Name: "/trpc.media.aitaganalyse.AiTagAnalyse/CreateTagAnalysisTask",
			Func: AiTagAnalyseService_CreateTagAnalysisTask_Handler,
		},
		{
			Name: "/trpc.media.aitaganalyse.AiTagAnalyse/DescribeTagAnalysisTaskData",
			Func: AiTagAnalyseService_DescribeTagAnalysisTaskData_Handler,
		},
		{
			Name: "/trpc.media.aitaganalyse.AiTagAnalyse/DescribeTagFiles",
			Func: AiTagAnalyseService_DescribeTagFiles_Handler,
		},
		{
			Name: "/trpc.media.aitaganalyse.AiTagAnalyse/DeleteTagFiles",
			Func: AiTagAnalyseService_DeleteTagFiles_Handler,
		},
		{
			Name: "/trpc.media.aitaganalyse.AiTagAnalyse/GetTagFileUrl",
			Func: AiTagAnalyseService_GetTagFileUrl_Handler,
		},
	},
}

// RegisterAiTagAnalyseService register service
func RegisterAiTagAnalyseService(s server.Service, svr AiTagAnalyseService) {
	if err := s.Register(&AiTagAnalyseServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("AiTagAnalyse register error:%v", err))
	}

}

/* ************************************ Client Definition ************************************ */

// AiTagAnalyseClientProxy defines service client proxy
type AiTagAnalyseClientProxy interface {
	DescribeL1L2Labels(ctx context.Context, req *CommonRequest, opts ...client.Option) (rsp *DescribeL1L2LabelsResponse, err error) // @alias=/DescribeL1L2Labels

	CreateTag(ctx context.Context, req *CreateTagRequest, opts ...client.Option) (rsp *CreateTagResponse, err error) // @alias=/CreateTag

	ImportTag(ctx context.Context, req *ImportTagRequest, opts ...client.Option) (rsp *ImportTagResponse, err error) // @alias=/ImportTag

	DeleteTag(ctx context.Context, req *DeleteTagRequest, opts ...client.Option) (rsp *DeleteTagResponse, err error) // @alias=/DeleteTag

	ModifyTag(ctx context.Context, req *ModifyTagRequest, opts ...client.Option) (rsp *ModifyTagResponse, err error) // @alias=/ModifyTag

	DescribeTags(ctx context.Context, req *DescribeTagsRequest, opts ...client.Option) (rsp *DescribeTagsResponse, err error) // @alias=/DescribeTags

	CreateTagAnalysisTask(ctx context.Context, req *CreateTagAnalysisTaskRequest, opts ...client.Option) (rsp *CreateTagAnalysisTaskResponse, err error) // @alias=/CreateTagAnalysisTask

	DescribeTagAnalysisTaskData(ctx context.Context, req *DescribeTagAnalysisTaskDataRequest, opts ...client.Option) (rsp *DescribeTagAnalysisTaskDataResponse, err error) // @alias=/DescribeTagAnalysisTaskData

	DescribeTagFiles(ctx context.Context, req *DescribeTagFilesRequest, opts ...client.Option) (rsp *DescribeTagFilesResponse, err error) // @alias=/DescribeTagFiles

	DeleteTagFiles(ctx context.Context, req *DeleteTagFilesRequest, opts ...client.Option) (rsp *DeleteTagFilesResponse, err error) // @alias=/DeleteTagFiles

	GetTagFileUrl(ctx context.Context, req *TagFileUrlRequest, opts ...client.Option) (rsp *TagFileUrlResponse, err error) // @alias=/GetTagFileUrl
}

type AiTagAnalyseClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewAiTagAnalyseClientProxy = func(opts ...client.Option) AiTagAnalyseClientProxy {
	return &AiTagAnalyseClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *AiTagAnalyseClientProxyImpl) DescribeL1L2Labels(ctx context.Context, req *CommonRequest, opts ...client.Option) (*DescribeL1L2LabelsResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/DescribeL1L2Labels")
	msg.WithCalleeServiceName(AiTagAnalyseServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("aitaganalyse")
	msg.WithCalleeService("AiTagAnalyse")
	msg.WithCalleeMethod("DescribeL1L2Labels")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &DescribeL1L2LabelsResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *AiTagAnalyseClientProxyImpl) CreateTag(ctx context.Context, req *CreateTagRequest, opts ...client.Option) (*CreateTagResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/CreateTag")
	msg.WithCalleeServiceName(AiTagAnalyseServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("aitaganalyse")
	msg.WithCalleeService("AiTagAnalyse")
	msg.WithCalleeMethod("CreateTag")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &CreateTagResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *AiTagAnalyseClientProxyImpl) ImportTag(ctx context.Context, req *ImportTagRequest, opts ...client.Option) (*ImportTagResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/ImportTag")
	msg.WithCalleeServiceName(AiTagAnalyseServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("aitaganalyse")
	msg.WithCalleeService("AiTagAnalyse")
	msg.WithCalleeMethod("ImportTag")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &ImportTagResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *AiTagAnalyseClientProxyImpl) DeleteTag(ctx context.Context, req *DeleteTagRequest, opts ...client.Option) (*DeleteTagResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/DeleteTag")
	msg.WithCalleeServiceName(AiTagAnalyseServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("aitaganalyse")
	msg.WithCalleeService("AiTagAnalyse")
	msg.WithCalleeMethod("DeleteTag")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &DeleteTagResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *AiTagAnalyseClientProxyImpl) ModifyTag(ctx context.Context, req *ModifyTagRequest, opts ...client.Option) (*ModifyTagResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/ModifyTag")
	msg.WithCalleeServiceName(AiTagAnalyseServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("aitaganalyse")
	msg.WithCalleeService("AiTagAnalyse")
	msg.WithCalleeMethod("ModifyTag")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &ModifyTagResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *AiTagAnalyseClientProxyImpl) DescribeTags(ctx context.Context, req *DescribeTagsRequest, opts ...client.Option) (*DescribeTagsResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/DescribeTags")
	msg.WithCalleeServiceName(AiTagAnalyseServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("aitaganalyse")
	msg.WithCalleeService("AiTagAnalyse")
	msg.WithCalleeMethod("DescribeTags")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &DescribeTagsResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *AiTagAnalyseClientProxyImpl) CreateTagAnalysisTask(ctx context.Context, req *CreateTagAnalysisTaskRequest, opts ...client.Option) (*CreateTagAnalysisTaskResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/CreateTagAnalysisTask")
	msg.WithCalleeServiceName(AiTagAnalyseServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("aitaganalyse")
	msg.WithCalleeService("AiTagAnalyse")
	msg.WithCalleeMethod("CreateTagAnalysisTask")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &CreateTagAnalysisTaskResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *AiTagAnalyseClientProxyImpl) DescribeTagAnalysisTaskData(ctx context.Context, req *DescribeTagAnalysisTaskDataRequest, opts ...client.Option) (*DescribeTagAnalysisTaskDataResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/DescribeTagAnalysisTaskData")
	msg.WithCalleeServiceName(AiTagAnalyseServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("aitaganalyse")
	msg.WithCalleeService("AiTagAnalyse")
	msg.WithCalleeMethod("DescribeTagAnalysisTaskData")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &DescribeTagAnalysisTaskDataResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *AiTagAnalyseClientProxyImpl) DescribeTagFiles(ctx context.Context, req *DescribeTagFilesRequest, opts ...client.Option) (*DescribeTagFilesResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/DescribeTagFiles")
	msg.WithCalleeServiceName(AiTagAnalyseServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("aitaganalyse")
	msg.WithCalleeService("AiTagAnalyse")
	msg.WithCalleeMethod("DescribeTagFiles")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &DescribeTagFilesResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *AiTagAnalyseClientProxyImpl) DeleteTagFiles(ctx context.Context, req *DeleteTagFilesRequest, opts ...client.Option) (*DeleteTagFilesResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/DeleteTagFiles")
	msg.WithCalleeServiceName(AiTagAnalyseServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("aitaganalyse")
	msg.WithCalleeService("AiTagAnalyse")
	msg.WithCalleeMethod("DeleteTagFiles")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &DeleteTagFilesResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *AiTagAnalyseClientProxyImpl) GetTagFileUrl(ctx context.Context, req *TagFileUrlRequest, opts ...client.Option) (*TagFileUrlResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/GetTagFileUrl")
	msg.WithCalleeServiceName(AiTagAnalyseServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("aitaganalyse")
	msg.WithCalleeService("AiTagAnalyse")
	msg.WithCalleeMethod("GetTagFileUrl")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &TagFileUrlResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}
