// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: task_data.proto

package taskdata

import (
	reflect "reflect"
	sync "sync"

	aivideoprocess "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/aivideoprocess"
	personretrieval "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/personretrieval"
	shotmatch "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/shotmatch"
	textsummarization "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/textsummarization"
	videocut "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/videocut"
	videoerase "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/videoerase"
	videoquality "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/videoquality"
	videostructure "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/videostructure"
	ytvideoprocess "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/ytvideoprocess"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IVLDTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoTaskData *videostructure.AITagTaskData      `protobuf:"bytes,1,opt,name=VideoTaskData,proto3" json:"VideoTaskData,omitempty"`
	ImageTaskData *videostructure.AITagImageTaskData `protobuf:"bytes,2,opt,name=ImageTaskData,proto3" json:"ImageTaskData,omitempty"`
	AudioTaskData *videostructure.AITagAudioTaskData `protobuf:"bytes,3,opt,name=AudioTaskData,proto3" json:"AudioTaskData,omitempty"`
	TextTaskData  *videostructure.AITagTextTaskData  `protobuf:"bytes,4,opt,name=TextTaskData,proto3" json:"TextTaskData,omitempty"`
}

func (x *IVLDTaskData) Reset() {
	*x = IVLDTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IVLDTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IVLDTaskData) ProtoMessage() {}

func (x *IVLDTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_task_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IVLDTaskData.ProtoReflect.Descriptor instead.
func (*IVLDTaskData) Descriptor() ([]byte, []int) {
	return file_task_data_proto_rawDescGZIP(), []int{0}
}

func (x *IVLDTaskData) GetVideoTaskData() *videostructure.AITagTaskData {
	if x != nil {
		return x.VideoTaskData
	}
	return nil
}

func (x *IVLDTaskData) GetImageTaskData() *videostructure.AITagImageTaskData {
	if x != nil {
		return x.ImageTaskData
	}
	return nil
}

func (x *IVLDTaskData) GetAudioTaskData() *videostructure.AITagAudioTaskData {
	if x != nil {
		return x.AudioTaskData
	}
	return nil
}

func (x *IVLDTaskData) GetTextTaskData() *videostructure.AITagTextTaskData {
	if x != nil {
		return x.TextTaskData
	}
	return nil
}

type ResizeTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputMediaId string `protobuf:"bytes,1,opt,name=OutputMediaId,proto3" json:"OutputMediaId,omitempty"`
}

func (x *ResizeTaskData) Reset() {
	*x = ResizeTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeTaskData) ProtoMessage() {}

func (x *ResizeTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_task_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeTaskData.ProtoReflect.Descriptor instead.
func (*ResizeTaskData) Descriptor() ([]byte, []int) {
	return file_task_data_proto_rawDescGZIP(), []int{1}
}

func (x *ResizeTaskData) GetOutputMediaId() string {
	if x != nil {
		return x.OutputMediaId
	}
	return ""
}

type IVSCTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputMediaId []string `protobuf:"bytes,1,rep,name=OutputMediaId,proto3" json:"OutputMediaId,omitempty"`
}

func (x *IVSCTaskData) Reset() {
	*x = IVSCTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IVSCTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IVSCTaskData) ProtoMessage() {}

func (x *IVSCTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_task_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IVSCTaskData.ProtoReflect.Descriptor instead.
func (*IVSCTaskData) Descriptor() ([]byte, []int) {
	return file_task_data_proto_rawDescGZIP(), []int{2}
}

func (x *IVSCTaskData) GetOutputMediaId() []string {
	if x != nil {
		return x.OutputMediaId
	}
	return nil
}

type CropTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId         string `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	TempDownloadURL string `protobuf:"bytes,2,opt,name=TempDownloadURL,proto3" json:"TempDownloadURL,omitempty"`
}

func (x *CropTaskData) Reset() {
	*x = CropTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CropTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CropTaskData) ProtoMessage() {}

func (x *CropTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_task_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CropTaskData.ProtoReflect.Descriptor instead.
func (*CropTaskData) Descriptor() ([]byte, []int) {
	return file_task_data_proto_rawDescGZIP(), []int{3}
}

func (x *CropTaskData) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *CropTaskData) GetTempDownloadURL() string {
	if x != nil {
		return x.TempDownloadURL
	}
	return ""
}

type TTSTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId       string  `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	AudioDuration float32 `protobuf:"fixed32,2,opt,name=AudioDuration,proto3" json:"AudioDuration,omitempty"`
}

func (x *TTSTaskData) Reset() {
	*x = TTSTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTSTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTSTaskData) ProtoMessage() {}

func (x *TTSTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_task_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTSTaskData.ProtoReflect.Descriptor instead.
func (*TTSTaskData) Descriptor() ([]byte, []int) {
	return file_task_data_proto_rawDescGZIP(), []int{4}
}

func (x *TTSTaskData) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *TTSTaskData) GetAudioDuration() float32 {
	if x != nil {
		return x.AudioDuration
	}
	return 0
}

type ASRTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ASRTaskID          int64            `protobuf:"varint,1,opt,name=ASRTaskID,proto3" json:"ASRTaskID,omitempty"`
	Result             string           `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
	ResultDetail       *structpb.Struct `protobuf:"bytes,3,opt,name=ResultDetail,proto3" json:"ResultDetail,omitempty"`
	AudioQualityDetail *structpb.Struct `protobuf:"bytes,4,opt,name=AudioQualityDetail,proto3" json:"AudioQualityDetail,omitempty"`
}

func (x *ASRTaskData) Reset() {
	*x = ASRTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASRTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASRTaskData) ProtoMessage() {}

func (x *ASRTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_task_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASRTaskData.ProtoReflect.Descriptor instead.
func (*ASRTaskData) Descriptor() ([]byte, []int) {
	return file_task_data_proto_rawDescGZIP(), []int{5}
}

func (x *ASRTaskData) GetASRTaskID() int64 {
	if x != nil {
		return x.ASRTaskID
	}
	return 0
}

func (x *ASRTaskData) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ASRTaskData) GetResultDetail() *structpb.Struct {
	if x != nil {
		return x.ResultDetail
	}
	return nil
}

func (x *ASRTaskData) GetAudioQualityDetail() *structpb.Struct {
	if x != nil {
		return x.AudioQualityDetail
	}
	return nil
}

type AllTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IVLDTaskData              *IVLDTaskData                                `protobuf:"bytes,1,opt,name=IVLDTaskData,proto3" json:"IVLDTaskData,omitempty"`
	IVSSTaskData              *videostructure.AICutTaskData                `protobuf:"bytes,2,opt,name=IVSSTaskData,proto3" json:"IVSSTaskData,omitempty"`
	IVCLTaskData              *videostructure.AICatalogTaskData            `protobuf:"bytes,3,opt,name=IVCLTaskData,proto3" json:"IVCLTaskData,omitempty"`
	IVSRTaskData              *ytvideoprocess.VideoProcessTaskDetail       `protobuf:"bytes,4,opt,name=IVSRTaskData,proto3" json:"IVSRTaskData,omitempty"`
	IVROTTaskData             *aivideoprocess.AIVideoProcessTaskDetail     `protobuf:"bytes,5,opt,name=IVROTTaskData,proto3" json:"IVROTTaskData,omitempty"`
	IVLETaskData              *videoerase.RemoveLogoTaskData               `protobuf:"bytes,6,opt,name=IVLETaskData,proto3" json:"IVLETaskData,omitempty"`
	IVCETaskData              *videoerase.RemoveCaptionTaskData            `protobuf:"bytes,7,opt,name=IVCETaskData,proto3" json:"IVCETaskData,omitempty"`
	IVQITaskData              *videoquality.QualityEvaluationInfo          `protobuf:"bytes,8,opt,name=IVQITaskData,proto3" json:"IVQITaskData,omitempty"`
	IVFCTaskData              *personretrieval.PersonRetrievalTaskData     `protobuf:"bytes,9,opt,name=IVFCTaskData,proto3" json:"IVFCTaskData,omitempty"`
	IVSCTaskData              *IVSCTaskData                                `protobuf:"bytes,10,opt,name=IVSCTaskData,proto3" json:"IVSCTaskData,omitempty"`
	CropTaskData              *CropTaskData                                `protobuf:"bytes,11,opt,name=CropTaskData,proto3" json:"CropTaskData,omitempty"`
	ResizeTaskData            *ResizeTaskData                              `protobuf:"bytes,12,opt,name=ResizeTaskData,proto3" json:"ResizeTaskData,omitempty"`
	TextSummarizationTaskData *textsummarization.TextSummarizationTaskData `protobuf:"bytes,13,opt,name=TextSummarizationTaskData,proto3" json:"TextSummarizationTaskData,omitempty"`
	ShotMatchTaskData         *shotmatch.ShotMatchTaskData                 `protobuf:"bytes,14,opt,name=ShotMatchTaskData,proto3" json:"ShotMatchTaskData,omitempty"`
	VideoCutTaskData          *videocut.VideoCutTaskData                   `protobuf:"bytes,15,opt,name=VideoCutTaskData,proto3" json:"VideoCutTaskData,omitempty"`
	TTSTaskData               *TTSTaskData                                 `protobuf:"bytes,16,opt,name=TTSTaskData,proto3" json:"TTSTaskData,omitempty"`
	ASRTaskData               *ASRTaskData                                 `protobuf:"bytes,17,opt,name=ASRTaskData,proto3" json:"ASRTaskData,omitempty"`
}

func (x *AllTaskData) Reset() {
	*x = AllTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTaskData) ProtoMessage() {}

func (x *AllTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_task_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTaskData.ProtoReflect.Descriptor instead.
func (*AllTaskData) Descriptor() ([]byte, []int) {
	return file_task_data_proto_rawDescGZIP(), []int{6}
}

func (x *AllTaskData) GetIVLDTaskData() *IVLDTaskData {
	if x != nil {
		return x.IVLDTaskData
	}
	return nil
}

func (x *AllTaskData) GetIVSSTaskData() *videostructure.AICutTaskData {
	if x != nil {
		return x.IVSSTaskData
	}
	return nil
}

func (x *AllTaskData) GetIVCLTaskData() *videostructure.AICatalogTaskData {
	if x != nil {
		return x.IVCLTaskData
	}
	return nil
}

func (x *AllTaskData) GetIVSRTaskData() *ytvideoprocess.VideoProcessTaskDetail {
	if x != nil {
		return x.IVSRTaskData
	}
	return nil
}

func (x *AllTaskData) GetIVROTTaskData() *aivideoprocess.AIVideoProcessTaskDetail {
	if x != nil {
		return x.IVROTTaskData
	}
	return nil
}

func (x *AllTaskData) GetIVLETaskData() *videoerase.RemoveLogoTaskData {
	if x != nil {
		return x.IVLETaskData
	}
	return nil
}

func (x *AllTaskData) GetIVCETaskData() *videoerase.RemoveCaptionTaskData {
	if x != nil {
		return x.IVCETaskData
	}
	return nil
}

func (x *AllTaskData) GetIVQITaskData() *videoquality.QualityEvaluationInfo {
	if x != nil {
		return x.IVQITaskData
	}
	return nil
}

func (x *AllTaskData) GetIVFCTaskData() *personretrieval.PersonRetrievalTaskData {
	if x != nil {
		return x.IVFCTaskData
	}
	return nil
}

func (x *AllTaskData) GetIVSCTaskData() *IVSCTaskData {
	if x != nil {
		return x.IVSCTaskData
	}
	return nil
}

func (x *AllTaskData) GetCropTaskData() *CropTaskData {
	if x != nil {
		return x.CropTaskData
	}
	return nil
}

func (x *AllTaskData) GetResizeTaskData() *ResizeTaskData {
	if x != nil {
		return x.ResizeTaskData
	}
	return nil
}

func (x *AllTaskData) GetTextSummarizationTaskData() *textsummarization.TextSummarizationTaskData {
	if x != nil {
		return x.TextSummarizationTaskData
	}
	return nil
}

func (x *AllTaskData) GetShotMatchTaskData() *shotmatch.ShotMatchTaskData {
	if x != nil {
		return x.ShotMatchTaskData
	}
	return nil
}

func (x *AllTaskData) GetVideoCutTaskData() *videocut.VideoCutTaskData {
	if x != nil {
		return x.VideoCutTaskData
	}
	return nil
}

func (x *AllTaskData) GetTTSTaskData() *TTSTaskData {
	if x != nil {
		return x.TTSTaskData
	}
	return nil
}

func (x *AllTaskData) GetASRTaskData() *ASRTaskData {
	if x != nil {
		return x.ASRTaskData
	}
	return nil
}

var File_task_data_proto protoreflect.FileDescriptor

var file_task_data_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x16, 0x61, 0x69, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x79, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x65, 0x72, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x10, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x75, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xda, 0x02, 0x0a, 0x0c, 0x49, 0x56, 0x4c, 0x44, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x54, 0x61, 0x67, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x54, 0x61, 0x67, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x0d, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x54,
	0x61, 0x67, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50,
	0x0a, 0x0c, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x41, 0x49, 0x54, 0x61, 0x67, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x54, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x36, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x0c, 0x49, 0x56, 0x53, 0x43,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x22, 0x52,
	0x0a, 0x0c, 0x43, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x65, 0x6d, 0x70,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x52, 0x4c, 0x22, 0x4d, 0x0a, 0x0b, 0x54, 0x54, 0x53, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xc9, 0x01, 0x0a, 0x0b, 0x41, 0x53, 0x52, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x53, 0x52, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x53, 0x52, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x47, 0x0a, 0x12, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x12, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xf8, 0x0a,
	0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a,
	0x0c, 0x49, 0x56, 0x4c, 0x44, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x56, 0x4c, 0x44, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x49, 0x56, 0x4c, 0x44, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0c, 0x49, 0x56, 0x53, 0x53, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x43, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x49, 0x56, 0x53, 0x53, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x50, 0x0a, 0x0c, 0x49, 0x56, 0x43, 0x4c, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x49, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x49, 0x56, 0x43, 0x4c, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x0c, 0x49, 0x56, 0x53, 0x52, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x79, 0x74, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x49,
	0x56, 0x53, 0x52, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x0d, 0x49,
	0x56, 0x52, 0x4f, 0x54, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41,
	0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0d, 0x49, 0x56, 0x52, 0x4f, 0x54, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0c, 0x49, 0x56, 0x4c, 0x45, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x65,
	0x72, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x49, 0x56, 0x4c, 0x45, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x0c, 0x49, 0x56, 0x43, 0x45, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x65, 0x72,
	0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x49, 0x56, 0x43, 0x45, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x0c, 0x49, 0x56, 0x51, 0x49, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x49,
	0x56, 0x51, 0x49, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x0c, 0x49,
	0x56, 0x46, 0x43, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x49, 0x56, 0x46, 0x43, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0c, 0x49, 0x56, 0x53, 0x43, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x49, 0x56, 0x53, 0x43, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x49,
	0x56, 0x53, 0x43, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0c, 0x43,
	0x72, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x43, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x75, 0x0a, 0x19, 0x54, 0x65, 0x78, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x74, 0x65, 0x78, 0x74, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x19, 0x54, 0x65, 0x78,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x73,
	0x68, 0x6f, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x53, 0x68, 0x6f, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a,
	0x10, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x75, 0x74, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x43, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x42, 0x0a, 0x0b, 0x54, 0x54, 0x53, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x54, 0x53, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x54, 0x54, 0x53, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x41, 0x53, 0x52, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x41, 0x53, 0x52, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x41, 0x53, 0x52,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x2d, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_task_data_proto_rawDescOnce sync.Once
	file_task_data_proto_rawDescData = file_task_data_proto_rawDesc
)

func file_task_data_proto_rawDescGZIP() []byte {
	file_task_data_proto_rawDescOnce.Do(func() {
		file_task_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_data_proto_rawDescData)
	})
	return file_task_data_proto_rawDescData
}

var file_task_data_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_task_data_proto_goTypes = []interface{}{
	(*IVLDTaskData)(nil),                                // 0: trpc.media.taskdata.IVLDTaskData
	(*ResizeTaskData)(nil),                              // 1: trpc.media.taskdata.ResizeTaskData
	(*IVSCTaskData)(nil),                                // 2: trpc.media.taskdata.IVSCTaskData
	(*CropTaskData)(nil),                                // 3: trpc.media.taskdata.CropTaskData
	(*TTSTaskData)(nil),                                 // 4: trpc.media.taskdata.TTSTaskData
	(*ASRTaskData)(nil),                                 // 5: trpc.media.taskdata.ASRTaskData
	(*AllTaskData)(nil),                                 // 6: trpc.media.taskdata.AllTaskData
	(*videostructure.AITagTaskData)(nil),                // 7: trpc.media.videostructure.AITagTaskData
	(*videostructure.AITagImageTaskData)(nil),           // 8: trpc.media.videostructure.AITagImageTaskData
	(*videostructure.AITagAudioTaskData)(nil),           // 9: trpc.media.videostructure.AITagAudioTaskData
	(*videostructure.AITagTextTaskData)(nil),            // 10: trpc.media.videostructure.AITagTextTaskData
	(*structpb.Struct)(nil),                             // 11: google.protobuf.Struct
	(*videostructure.AICutTaskData)(nil),                // 12: trpc.media.videostructure.AICutTaskData
	(*videostructure.AICatalogTaskData)(nil),            // 13: trpc.media.videostructure.AICatalogTaskData
	(*ytvideoprocess.VideoProcessTaskDetail)(nil),       // 14: trpc.media.ytvideoprocess.VideoProcessTaskDetail
	(*aivideoprocess.AIVideoProcessTaskDetail)(nil),     // 15: trpc.media.aivideoprocess.AIVideoProcessTaskDetail
	(*videoerase.RemoveLogoTaskData)(nil),               // 16: trpc.media.videoerase.RemoveLogoTaskData
	(*videoerase.RemoveCaptionTaskData)(nil),            // 17: trpc.media.videoerase.RemoveCaptionTaskData
	(*videoquality.QualityEvaluationInfo)(nil),          // 18: trpc.media.videoquality.QualityEvaluationInfo
	(*personretrieval.PersonRetrievalTaskData)(nil),     // 19: trpc.media.personretrieval.PersonRetrievalTaskData
	(*textsummarization.TextSummarizationTaskData)(nil), // 20: trpc.media.textsummarization.TextSummarizationTaskData
	(*shotmatch.ShotMatchTaskData)(nil),                 // 21: trpc.media.shotmatch.ShotMatchTaskData
	(*videocut.VideoCutTaskData)(nil),                   // 22: trpc.media.videocut.VideoCutTaskData
}
var file_task_data_proto_depIdxs = []int32{
	7,  // 0: trpc.media.taskdata.IVLDTaskData.VideoTaskData:type_name -> trpc.media.videostructure.AITagTaskData
	8,  // 1: trpc.media.taskdata.IVLDTaskData.ImageTaskData:type_name -> trpc.media.videostructure.AITagImageTaskData
	9,  // 2: trpc.media.taskdata.IVLDTaskData.AudioTaskData:type_name -> trpc.media.videostructure.AITagAudioTaskData
	10, // 3: trpc.media.taskdata.IVLDTaskData.TextTaskData:type_name -> trpc.media.videostructure.AITagTextTaskData
	11, // 4: trpc.media.taskdata.ASRTaskData.ResultDetail:type_name -> google.protobuf.Struct
	11, // 5: trpc.media.taskdata.ASRTaskData.AudioQualityDetail:type_name -> google.protobuf.Struct
	0,  // 6: trpc.media.taskdata.AllTaskData.IVLDTaskData:type_name -> trpc.media.taskdata.IVLDTaskData
	12, // 7: trpc.media.taskdata.AllTaskData.IVSSTaskData:type_name -> trpc.media.videostructure.AICutTaskData
	13, // 8: trpc.media.taskdata.AllTaskData.IVCLTaskData:type_name -> trpc.media.videostructure.AICatalogTaskData
	14, // 9: trpc.media.taskdata.AllTaskData.IVSRTaskData:type_name -> trpc.media.ytvideoprocess.VideoProcessTaskDetail
	15, // 10: trpc.media.taskdata.AllTaskData.IVROTTaskData:type_name -> trpc.media.aivideoprocess.AIVideoProcessTaskDetail
	16, // 11: trpc.media.taskdata.AllTaskData.IVLETaskData:type_name -> trpc.media.videoerase.RemoveLogoTaskData
	17, // 12: trpc.media.taskdata.AllTaskData.IVCETaskData:type_name -> trpc.media.videoerase.RemoveCaptionTaskData
	18, // 13: trpc.media.taskdata.AllTaskData.IVQITaskData:type_name -> trpc.media.videoquality.QualityEvaluationInfo
	19, // 14: trpc.media.taskdata.AllTaskData.IVFCTaskData:type_name -> trpc.media.personretrieval.PersonRetrievalTaskData
	2,  // 15: trpc.media.taskdata.AllTaskData.IVSCTaskData:type_name -> trpc.media.taskdata.IVSCTaskData
	3,  // 16: trpc.media.taskdata.AllTaskData.CropTaskData:type_name -> trpc.media.taskdata.CropTaskData
	1,  // 17: trpc.media.taskdata.AllTaskData.ResizeTaskData:type_name -> trpc.media.taskdata.ResizeTaskData
	20, // 18: trpc.media.taskdata.AllTaskData.TextSummarizationTaskData:type_name -> trpc.media.textsummarization.TextSummarizationTaskData
	21, // 19: trpc.media.taskdata.AllTaskData.ShotMatchTaskData:type_name -> trpc.media.shotmatch.ShotMatchTaskData
	22, // 20: trpc.media.taskdata.AllTaskData.VideoCutTaskData:type_name -> trpc.media.videocut.VideoCutTaskData
	4,  // 21: trpc.media.taskdata.AllTaskData.TTSTaskData:type_name -> trpc.media.taskdata.TTSTaskData
	5,  // 22: trpc.media.taskdata.AllTaskData.ASRTaskData:type_name -> trpc.media.taskdata.ASRTaskData
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_task_data_proto_init() }
func file_task_data_proto_init() {
	if File_task_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_task_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IVLDTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizeTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IVSCTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CropTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTSTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASRTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_task_data_proto_goTypes,
		DependencyIndexes: file_task_data_proto_depIdxs,
		MessageInfos:      file_task_data_proto_msgTypes,
	}.Build()
	File_task_data_proto = out.File
	file_task_data_proto_rawDesc = nil
	file_task_data_proto_goTypes = nil
	file_task_data_proto_depIdxs = nil
}
