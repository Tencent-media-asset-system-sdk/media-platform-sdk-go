// Code generated by trpc-go/trpc-go-cmdline. DO NOT EDIT.
// source: video_erase.proto

package videoerase

import (
	"context"
	"fmt"

	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock"
	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/http"

	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/client"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/codec"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/server"
)

/* ************************************ Service Definition ************************************ */

// RemoveLogoService defines service
type RemoveLogoService interface {
	CreateRemoveLogoTask(ctx context.Context, req *CreateRemoveLogoTaskRequest, rsp *CreateRemoveLogoTaskResponse) (err error) // @alias=/CreateRemoveLogoTask

	DescribeRemoveLogoTaskData(ctx context.Context, req *DescribeRemoveLogoTaskDataRequest, rsp *DescribeRemoveLogoTaskDataResponse) (err error) // @alias=/DescribeRemoveLogoTaskData
}

func RemoveLogoService_CreateRemoveLogoTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &CreateRemoveLogoTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(RemoveLogoService).CreateRemoveLogoTask(ctx, reqbody.(*CreateRemoveLogoTaskRequest), rspbody.(*CreateRemoveLogoTaskResponse))
	}

	rsp := &CreateRemoveLogoTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func RemoveLogoService_DescribeRemoveLogoTaskData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &DescribeRemoveLogoTaskDataRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(RemoveLogoService).DescribeRemoveLogoTaskData(ctx, reqbody.(*DescribeRemoveLogoTaskDataRequest), rspbody.(*DescribeRemoveLogoTaskDataResponse))
	}

	rsp := &DescribeRemoveLogoTaskDataResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// RemoveLogoServer_ServiceDesc descriptor for server.RegisterService
var RemoveLogoServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.videoerase.RemoveLogo",
	HandlerType: ((*RemoveLogoService)(nil)),
	Methods: []server.Method{
		{
			Name: "/CreateRemoveLogoTask",
			Func: RemoveLogoService_CreateRemoveLogoTask_Handler,
		},
		{
			Name: "/DescribeRemoveLogoTaskData",
			Func: RemoveLogoService_DescribeRemoveLogoTaskData_Handler,
		},
		{
			Name: "/trpc.media.videoerase.RemoveLogo/CreateRemoveLogoTask",
			Func: RemoveLogoService_CreateRemoveLogoTask_Handler,
		},
		{
			Name: "/trpc.media.videoerase.RemoveLogo/DescribeRemoveLogoTaskData",
			Func: RemoveLogoService_DescribeRemoveLogoTaskData_Handler,
		},
	},
}

// RegisterRemoveLogoService register service
func RegisterRemoveLogoService(s server.Service, svr RemoveLogoService) {
	if err := s.Register(&RemoveLogoServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("RemoveLogo register error:%v", err))
	}

}

// RemoveCaptionService defines service
type RemoveCaptionService interface {
	CreateRemoveCaptionTask(ctx context.Context, req *CreateRemoveCaptionTaskRequest, rsp *CreateRemoveCaptionTaskResponse) (err error) // @alias=/CreateRemoveCaptionTask

	DescribeRemoveCaptionTaskData(ctx context.Context, req *DescribeRemoveCaptionTaskDataRequest, rsp *DescribeRemoveCaptionTaskDataResponse) (err error) // @alias=/DescribeRemoveCaptionTaskData
}

func RemoveCaptionService_CreateRemoveCaptionTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &CreateRemoveCaptionTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(RemoveCaptionService).CreateRemoveCaptionTask(ctx, reqbody.(*CreateRemoveCaptionTaskRequest), rspbody.(*CreateRemoveCaptionTaskResponse))
	}

	rsp := &CreateRemoveCaptionTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

func RemoveCaptionService_DescribeRemoveCaptionTaskData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {

	req := &DescribeRemoveCaptionTaskDataRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(RemoveCaptionService).DescribeRemoveCaptionTaskData(ctx, reqbody.(*DescribeRemoveCaptionTaskDataRequest), rspbody.(*DescribeRemoveCaptionTaskDataResponse))
	}

	rsp := &DescribeRemoveCaptionTaskDataResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// RemoveCaptionServer_ServiceDesc descriptor for server.RegisterService
var RemoveCaptionServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.videoerase.RemoveCaption",
	HandlerType: ((*RemoveCaptionService)(nil)),
	Methods: []server.Method{
		{
			Name: "/CreateRemoveCaptionTask",
			Func: RemoveCaptionService_CreateRemoveCaptionTask_Handler,
		},
		{
			Name: "/DescribeRemoveCaptionTaskData",
			Func: RemoveCaptionService_DescribeRemoveCaptionTaskData_Handler,
		},
		{
			Name: "/trpc.media.videoerase.RemoveCaption/CreateRemoveCaptionTask",
			Func: RemoveCaptionService_CreateRemoveCaptionTask_Handler,
		},
		{
			Name: "/trpc.media.videoerase.RemoveCaption/DescribeRemoveCaptionTaskData",
			Func: RemoveCaptionService_DescribeRemoveCaptionTaskData_Handler,
		},
	},
}

// RegisterRemoveCaptionService register service
func RegisterRemoveCaptionService(s server.Service, svr RemoveCaptionService) {
	if err := s.Register(&RemoveCaptionServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("RemoveCaption register error:%v", err))
	}

}

/* ************************************ Client Definition ************************************ */

// RemoveLogoClientProxy defines service client proxy
type RemoveLogoClientProxy interface {
	CreateRemoveLogoTask(ctx context.Context, req *CreateRemoveLogoTaskRequest, opts ...client.Option) (rsp *CreateRemoveLogoTaskResponse, err error) // @alias=/CreateRemoveLogoTask

	DescribeRemoveLogoTaskData(ctx context.Context, req *DescribeRemoveLogoTaskDataRequest, opts ...client.Option) (rsp *DescribeRemoveLogoTaskDataResponse, err error) // @alias=/DescribeRemoveLogoTaskData
}

type RemoveLogoClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewRemoveLogoClientProxy = func(opts ...client.Option) RemoveLogoClientProxy {
	return &RemoveLogoClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *RemoveLogoClientProxyImpl) CreateRemoveLogoTask(ctx context.Context, req *CreateRemoveLogoTaskRequest, opts ...client.Option) (*CreateRemoveLogoTaskResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/CreateRemoveLogoTask")
	msg.WithCalleeServiceName(RemoveLogoServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videoerase")
	msg.WithCalleeService("RemoveLogo")
	msg.WithCalleeMethod("CreateRemoveLogoTask")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &CreateRemoveLogoTaskResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *RemoveLogoClientProxyImpl) DescribeRemoveLogoTaskData(ctx context.Context, req *DescribeRemoveLogoTaskDataRequest, opts ...client.Option) (*DescribeRemoveLogoTaskDataResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/DescribeRemoveLogoTaskData")
	msg.WithCalleeServiceName(RemoveLogoServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videoerase")
	msg.WithCalleeService("RemoveLogo")
	msg.WithCalleeMethod("DescribeRemoveLogoTaskData")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &DescribeRemoveLogoTaskDataResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

// RemoveCaptionClientProxy defines service client proxy
type RemoveCaptionClientProxy interface {
	CreateRemoveCaptionTask(ctx context.Context, req *CreateRemoveCaptionTaskRequest, opts ...client.Option) (rsp *CreateRemoveCaptionTaskResponse, err error) // @alias=/CreateRemoveCaptionTask

	DescribeRemoveCaptionTaskData(ctx context.Context, req *DescribeRemoveCaptionTaskDataRequest, opts ...client.Option) (rsp *DescribeRemoveCaptionTaskDataResponse, err error) // @alias=/DescribeRemoveCaptionTaskData
}

type RemoveCaptionClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewRemoveCaptionClientProxy = func(opts ...client.Option) RemoveCaptionClientProxy {
	return &RemoveCaptionClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *RemoveCaptionClientProxyImpl) CreateRemoveCaptionTask(ctx context.Context, req *CreateRemoveCaptionTaskRequest, opts ...client.Option) (*CreateRemoveCaptionTaskResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/CreateRemoveCaptionTask")
	msg.WithCalleeServiceName(RemoveCaptionServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videoerase")
	msg.WithCalleeService("RemoveCaption")
	msg.WithCalleeMethod("CreateRemoveCaptionTask")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &CreateRemoveCaptionTaskResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}

func (c *RemoveCaptionClientProxyImpl) DescribeRemoveCaptionTaskData(ctx context.Context, req *DescribeRemoveCaptionTaskDataRequest, opts ...client.Option) (*DescribeRemoveCaptionTaskDataResponse, error) {

	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)

	msg.WithClientRPCName("/DescribeRemoveCaptionTaskData")
	msg.WithCalleeServiceName(RemoveCaptionServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("videoerase")
	msg.WithCalleeService("RemoveCaption")
	msg.WithCalleeMethod("DescribeRemoveCaptionTaskData")
	msg.WithSerializationType(codec.SerializationTypePB)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	rsp := &DescribeRemoveCaptionTaskDataResponse{}

	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}

	return rsp, nil
}
