// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: video_erase.proto

package videoerase

import (
	reflect "reflect"
	sync "sync"

	apicommon "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/apicommon"
	videostructure "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/videostructure"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogoMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *apicommon.Rectf `protobuf:"bytes,1,opt,name=Location,proto3" json:"Location,omitempty"`
	MaskType string           `protobuf:"bytes,2,opt,name=MaskType,proto3" json:"MaskType,omitempty"`
}

func (x *LogoMask) Reset() {
	*x = LogoMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_erase_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoMask) ProtoMessage() {}

func (x *LogoMask) ProtoReflect() protoreflect.Message {
	mi := &file_video_erase_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoMask.ProtoReflect.Descriptor instead.
func (*LogoMask) Descriptor() ([]byte, []int) {
	return file_video_erase_proto_rawDescGZIP(), []int{0}
}

func (x *LogoMask) GetLocation() *apicommon.Rectf {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *LogoMask) GetMaskType() string {
	if x != nil {
		return x.MaskType
	}
	return ""
}

type CreateRemoveLogoTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId     string `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	TaskName    string `protobuf:"bytes,4,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	CallbackURL string `protobuf:"bytes,5,opt,name=CallbackURL,proto3" json:"CallbackURL,omitempty"`
}

func (x *CreateRemoveLogoTaskRequest) Reset() {
	*x = CreateRemoveLogoTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_erase_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRemoveLogoTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRemoveLogoTaskRequest) ProtoMessage() {}

func (x *CreateRemoveLogoTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_erase_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRemoveLogoTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateRemoveLogoTaskRequest) Descriptor() ([]byte, []int) {
	return file_video_erase_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRemoveLogoTaskRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *CreateRemoveLogoTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *CreateRemoveLogoTaskRequest) GetCallbackURL() string {
	if x != nil {
		return x.CallbackURL
	}
	return ""
}

type CreateRemoveLogoTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *CreateRemoveLogoTaskResponse) Reset() {
	*x = CreateRemoveLogoTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_erase_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRemoveLogoTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRemoveLogoTaskResponse) ProtoMessage() {}

func (x *CreateRemoveLogoTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_erase_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRemoveLogoTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateRemoveLogoTaskResponse) Descriptor() ([]byte, []int) {
	return file_video_erase_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRemoveLogoTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type DescribeRemoveLogoTaskDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *DescribeRemoveLogoTaskDataRequest) Reset() {
	*x = DescribeRemoveLogoTaskDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_erase_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeRemoveLogoTaskDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRemoveLogoTaskDataRequest) ProtoMessage() {}

func (x *DescribeRemoveLogoTaskDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_erase_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRemoveLogoTaskDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeRemoveLogoTaskDataRequest) Descriptor() ([]byte, []int) {
	return file_video_erase_proto_rawDescGZIP(), []int{3}
}

func (x *DescribeRemoveLogoTaskDataRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type RemoveLogoTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebMediaURL          string                      `protobuf:"bytes,1,opt,name=WebMediaURL,proto3" json:"WebMediaURL,omitempty"`
	MediaId              string                      `protobuf:"bytes,2,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	EnableDetect         bool                        `protobuf:"varint,3,opt,name=EnableDetect,proto3" json:"EnableDetect,omitempty"`
	LogoLocation         []*videostructure.ImageLogo `protobuf:"bytes,4,rep,name=LogoLocation,proto3" json:"LogoLocation,omitempty"`
	TvLocation           []*videostructure.ImageOcr  `protobuf:"bytes,5,rep,name=TvLocation,proto3" json:"TvLocation,omitempty"`
	InputMask            []*LogoMask                 `protobuf:"bytes,6,rep,name=InputMask,proto3" json:"InputMask,omitempty"`
	ExtraMsg             string                      `protobuf:"bytes,7,opt,name=ExtraMsg,proto3" json:"ExtraMsg,omitempty"`
	MasksCount           int32                       `protobuf:"varint,8,opt,name=MasksCount,proto3" json:"MasksCount,omitempty"`
	ResultVideoWidth     float32                     `protobuf:"fixed32,9,opt,name=ResultVideoWidth,proto3" json:"ResultVideoWidth,omitempty"`
	ResultVideoHeight    float32                     `protobuf:"fixed32,10,opt,name=ResultVideoHeight,proto3" json:"ResultVideoHeight,omitempty"`
	ResultVideoFormat    string                      `protobuf:"bytes,11,opt,name=ResultVideoFormat,proto3" json:"ResultVideoFormat,omitempty"`
	ResultVideoKeepAudio bool                        `protobuf:"varint,12,opt,name=ResultVideoKeepAudio,proto3" json:"ResultVideoKeepAudio,omitempty"`
}

func (x *RemoveLogoTaskData) Reset() {
	*x = RemoveLogoTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_erase_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveLogoTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveLogoTaskData) ProtoMessage() {}

func (x *RemoveLogoTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_video_erase_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveLogoTaskData.ProtoReflect.Descriptor instead.
func (*RemoveLogoTaskData) Descriptor() ([]byte, []int) {
	return file_video_erase_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveLogoTaskData) GetWebMediaURL() string {
	if x != nil {
		return x.WebMediaURL
	}
	return ""
}

func (x *RemoveLogoTaskData) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *RemoveLogoTaskData) GetEnableDetect() bool {
	if x != nil {
		return x.EnableDetect
	}
	return false
}

func (x *RemoveLogoTaskData) GetLogoLocation() []*videostructure.ImageLogo {
	if x != nil {
		return x.LogoLocation
	}
	return nil
}

func (x *RemoveLogoTaskData) GetTvLocation() []*videostructure.ImageOcr {
	if x != nil {
		return x.TvLocation
	}
	return nil
}

func (x *RemoveLogoTaskData) GetInputMask() []*LogoMask {
	if x != nil {
		return x.InputMask
	}
	return nil
}

func (x *RemoveLogoTaskData) GetExtraMsg() string {
	if x != nil {
		return x.ExtraMsg
	}
	return ""
}

func (x *RemoveLogoTaskData) GetMasksCount() int32 {
	if x != nil {
		return x.MasksCount
	}
	return 0
}

func (x *RemoveLogoTaskData) GetResultVideoWidth() float32 {
	if x != nil {
		return x.ResultVideoWidth
	}
	return 0
}

func (x *RemoveLogoTaskData) GetResultVideoHeight() float32 {
	if x != nil {
		return x.ResultVideoHeight
	}
	return 0
}

func (x *RemoveLogoTaskData) GetResultVideoFormat() string {
	if x != nil {
		return x.ResultVideoFormat
	}
	return ""
}

func (x *RemoveLogoTaskData) GetResultVideoKeepAudio() bool {
	if x != nil {
		return x.ResultVideoKeepAudio
	}
	return false
}

type DescribeRemoveLogoTaskDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskData    *RemoveLogoTaskData `protobuf:"bytes,2,opt,name=TaskData,proto3" json:"TaskData,omitempty"`
	TaskInfo    *apicommon.TaskInfo `protobuf:"bytes,3,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
	WebMediaURL string              `protobuf:"bytes,5,opt,name=WebMediaURL,proto3" json:"WebMediaURL,omitempty"`
}

func (x *DescribeRemoveLogoTaskDataResponse) Reset() {
	*x = DescribeRemoveLogoTaskDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_erase_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeRemoveLogoTaskDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRemoveLogoTaskDataResponse) ProtoMessage() {}

func (x *DescribeRemoveLogoTaskDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_erase_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRemoveLogoTaskDataResponse.ProtoReflect.Descriptor instead.
func (*DescribeRemoveLogoTaskDataResponse) Descriptor() ([]byte, []int) {
	return file_video_erase_proto_rawDescGZIP(), []int{5}
}

func (x *DescribeRemoveLogoTaskDataResponse) GetTaskData() *RemoveLogoTaskData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *DescribeRemoveLogoTaskDataResponse) GetTaskInfo() *apicommon.TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

func (x *DescribeRemoveLogoTaskDataResponse) GetWebMediaURL() string {
	if x != nil {
		return x.WebMediaURL
	}
	return ""
}

type CreateRemoveCaptionTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId     string `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	TaskName    string `protobuf:"bytes,4,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	CallbackURL string `protobuf:"bytes,5,opt,name=CallbackURL,proto3" json:"CallbackURL,omitempty"`
}

func (x *CreateRemoveCaptionTaskRequest) Reset() {
	*x = CreateRemoveCaptionTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_erase_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRemoveCaptionTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRemoveCaptionTaskRequest) ProtoMessage() {}

func (x *CreateRemoveCaptionTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_erase_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRemoveCaptionTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateRemoveCaptionTaskRequest) Descriptor() ([]byte, []int) {
	return file_video_erase_proto_rawDescGZIP(), []int{6}
}

func (x *CreateRemoveCaptionTaskRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *CreateRemoveCaptionTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *CreateRemoveCaptionTaskRequest) GetCallbackURL() string {
	if x != nil {
		return x.CallbackURL
	}
	return ""
}

type CreateRemoveCaptionTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *CreateRemoveCaptionTaskResponse) Reset() {
	*x = CreateRemoveCaptionTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_erase_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRemoveCaptionTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRemoveCaptionTaskResponse) ProtoMessage() {}

func (x *CreateRemoveCaptionTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_erase_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRemoveCaptionTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateRemoveCaptionTaskResponse) Descriptor() ([]byte, []int) {
	return file_video_erase_proto_rawDescGZIP(), []int{7}
}

func (x *CreateRemoveCaptionTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type DescribeRemoveCaptionTaskDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *DescribeRemoveCaptionTaskDataRequest) Reset() {
	*x = DescribeRemoveCaptionTaskDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_erase_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeRemoveCaptionTaskDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRemoveCaptionTaskDataRequest) ProtoMessage() {}

func (x *DescribeRemoveCaptionTaskDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_erase_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRemoveCaptionTaskDataRequest.ProtoReflect.Descriptor instead.
func (*DescribeRemoveCaptionTaskDataRequest) Descriptor() ([]byte, []int) {
	return file_video_erase_proto_rawDescGZIP(), []int{8}
}

func (x *DescribeRemoveCaptionTaskDataRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type RemoveCaptionTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebMediaURL          string      `protobuf:"bytes,1,opt,name=WebMediaURL,proto3" json:"WebMediaURL,omitempty"`
	MediaId              string      `protobuf:"bytes,2,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	InputMask            []*LogoMask `protobuf:"bytes,3,rep,name=InputMask,proto3" json:"InputMask,omitempty"`
	ExtraMsg             string      `protobuf:"bytes,4,opt,name=ExtraMsg,proto3" json:"ExtraMsg,omitempty"`
	MasksCount           int32       `protobuf:"varint,5,opt,name=MasksCount,proto3" json:"MasksCount,omitempty"`
	ResultVideoWidth     float32     `protobuf:"fixed32,6,opt,name=ResultVideoWidth,proto3" json:"ResultVideoWidth,omitempty"`
	ResultVideoHeight    float32     `protobuf:"fixed32,7,opt,name=ResultVideoHeight,proto3" json:"ResultVideoHeight,omitempty"`
	ResultVideoFormat    string      `protobuf:"bytes,8,opt,name=ResultVideoFormat,proto3" json:"ResultVideoFormat,omitempty"`
	ResultVideoKeepAudio bool        `protobuf:"varint,9,opt,name=ResultVideoKeepAudio,proto3" json:"ResultVideoKeepAudio,omitempty"`
}

func (x *RemoveCaptionTaskData) Reset() {
	*x = RemoveCaptionTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_erase_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCaptionTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCaptionTaskData) ProtoMessage() {}

func (x *RemoveCaptionTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_video_erase_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCaptionTaskData.ProtoReflect.Descriptor instead.
func (*RemoveCaptionTaskData) Descriptor() ([]byte, []int) {
	return file_video_erase_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveCaptionTaskData) GetWebMediaURL() string {
	if x != nil {
		return x.WebMediaURL
	}
	return ""
}

func (x *RemoveCaptionTaskData) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *RemoveCaptionTaskData) GetInputMask() []*LogoMask {
	if x != nil {
		return x.InputMask
	}
	return nil
}

func (x *RemoveCaptionTaskData) GetExtraMsg() string {
	if x != nil {
		return x.ExtraMsg
	}
	return ""
}

func (x *RemoveCaptionTaskData) GetMasksCount() int32 {
	if x != nil {
		return x.MasksCount
	}
	return 0
}

func (x *RemoveCaptionTaskData) GetResultVideoWidth() float32 {
	if x != nil {
		return x.ResultVideoWidth
	}
	return 0
}

func (x *RemoveCaptionTaskData) GetResultVideoHeight() float32 {
	if x != nil {
		return x.ResultVideoHeight
	}
	return 0
}

func (x *RemoveCaptionTaskData) GetResultVideoFormat() string {
	if x != nil {
		return x.ResultVideoFormat
	}
	return ""
}

func (x *RemoveCaptionTaskData) GetResultVideoKeepAudio() bool {
	if x != nil {
		return x.ResultVideoKeepAudio
	}
	return false
}

type DescribeRemoveCaptionTaskDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskData    *RemoveCaptionTaskData `protobuf:"bytes,2,opt,name=TaskData,proto3" json:"TaskData,omitempty"`
	TaskInfo    *apicommon.TaskInfo    `protobuf:"bytes,3,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
	WebMediaURL string                 `protobuf:"bytes,5,opt,name=WebMediaURL,proto3" json:"WebMediaURL,omitempty"`
}

func (x *DescribeRemoveCaptionTaskDataResponse) Reset() {
	*x = DescribeRemoveCaptionTaskDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_erase_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeRemoveCaptionTaskDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRemoveCaptionTaskDataResponse) ProtoMessage() {}

func (x *DescribeRemoveCaptionTaskDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_erase_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRemoveCaptionTaskDataResponse.ProtoReflect.Descriptor instead.
func (*DescribeRemoveCaptionTaskDataResponse) Descriptor() ([]byte, []int) {
	return file_video_erase_proto_rawDescGZIP(), []int{10}
}

func (x *DescribeRemoveCaptionTaskDataResponse) GetTaskData() *RemoveCaptionTaskData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *DescribeRemoveCaptionTaskDataResponse) GetTaskInfo() *apicommon.TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

func (x *DescribeRemoveCaptionTaskDataResponse) GetWebMediaURL() string {
	if x != nil {
		return x.WebMediaURL
	}
	return ""
}

var File_video_erase_proto protoreflect.FileDescriptor

var file_video_erase_proto_rawDesc = []byte{
	0x0a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x65, 0x72, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x65, 0x72, 0x61, 0x73, 0x65, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x5c, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x0a, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x66, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x75, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x67,
	0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52,
	0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x55, 0x52, 0x4c, 0x22, 0x36, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x21,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f,
	0x67, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xba, 0x04, 0x0a, 0x12, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x52, 0x4c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55,
	0x52, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x12, 0x48, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x52, 0x0c, 0x4c, 0x6f,
	0x67, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x54, 0x76,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4f, 0x63, 0x72, 0x52, 0x0a, 0x54, 0x76, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x65, 0x72, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61,
	0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x4d, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4b, 0x65, 0x65,
	0x70, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x22, 0xc6, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x65, 0x72, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f,
	0x67, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x52, 0x4c, 0x22,
	0x78, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x22, 0x39, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x24, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x22, 0x8a, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20,
	0x0a, 0x0b, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x52, 0x4c,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x65, 0x72, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x61, 0x73, 0x6b, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x10, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x32, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4b, 0x65, 0x65, 0x70,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x25, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x65, 0x72, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20,
	0x0a, 0x0b, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x52, 0x4c,
	0x32, 0xa1, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12,
	0x7f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c,
	0x6f, 0x67, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x32, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x65, 0x72, 0x61, 0x73, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x6f,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x65, 0x72,
	0x61, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x91, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x38, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x65, 0x72, 0x61, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x65, 0x72, 0x61, 0x73,
	0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb7, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x35, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x65, 0x72, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x65, 0x72, 0x61, 0x73,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x9a, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x3b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x65, 0x72, 0x61, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x65, 0x72, 0x61, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x5a,
	0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x65, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x65, 0x72, 0x61, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_video_erase_proto_rawDescOnce sync.Once
	file_video_erase_proto_rawDescData = file_video_erase_proto_rawDesc
)

func file_video_erase_proto_rawDescGZIP() []byte {
	file_video_erase_proto_rawDescOnce.Do(func() {
		file_video_erase_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_erase_proto_rawDescData)
	})
	return file_video_erase_proto_rawDescData
}

var file_video_erase_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_video_erase_proto_goTypes = []interface{}{
	(*LogoMask)(nil),                              // 0: trpc.media.videoerase.LogoMask
	(*CreateRemoveLogoTaskRequest)(nil),           // 1: trpc.media.videoerase.CreateRemoveLogoTaskRequest
	(*CreateRemoveLogoTaskResponse)(nil),          // 2: trpc.media.videoerase.CreateRemoveLogoTaskResponse
	(*DescribeRemoveLogoTaskDataRequest)(nil),     // 3: trpc.media.videoerase.DescribeRemoveLogoTaskDataRequest
	(*RemoveLogoTaskData)(nil),                    // 4: trpc.media.videoerase.RemoveLogoTaskData
	(*DescribeRemoveLogoTaskDataResponse)(nil),    // 5: trpc.media.videoerase.DescribeRemoveLogoTaskDataResponse
	(*CreateRemoveCaptionTaskRequest)(nil),        // 6: trpc.media.videoerase.CreateRemoveCaptionTaskRequest
	(*CreateRemoveCaptionTaskResponse)(nil),       // 7: trpc.media.videoerase.CreateRemoveCaptionTaskResponse
	(*DescribeRemoveCaptionTaskDataRequest)(nil),  // 8: trpc.media.videoerase.DescribeRemoveCaptionTaskDataRequest
	(*RemoveCaptionTaskData)(nil),                 // 9: trpc.media.videoerase.RemoveCaptionTaskData
	(*DescribeRemoveCaptionTaskDataResponse)(nil), // 10: trpc.media.videoerase.DescribeRemoveCaptionTaskDataResponse
	(*apicommon.Rectf)(nil),                       // 11: trpc.media.common.Rectf
	(*videostructure.ImageLogo)(nil),              // 12: trpc.media.videostructure.ImageLogo
	(*videostructure.ImageOcr)(nil),               // 13: trpc.media.videostructure.ImageOcr
	(*apicommon.TaskInfo)(nil),                    // 14: trpc.media.common.TaskInfo
}
var file_video_erase_proto_depIdxs = []int32{
	11, // 0: trpc.media.videoerase.LogoMask.Location:type_name -> trpc.media.common.Rectf
	12, // 1: trpc.media.videoerase.RemoveLogoTaskData.LogoLocation:type_name -> trpc.media.videostructure.ImageLogo
	13, // 2: trpc.media.videoerase.RemoveLogoTaskData.TvLocation:type_name -> trpc.media.videostructure.ImageOcr
	0,  // 3: trpc.media.videoerase.RemoveLogoTaskData.InputMask:type_name -> trpc.media.videoerase.LogoMask
	4,  // 4: trpc.media.videoerase.DescribeRemoveLogoTaskDataResponse.TaskData:type_name -> trpc.media.videoerase.RemoveLogoTaskData
	14, // 5: trpc.media.videoerase.DescribeRemoveLogoTaskDataResponse.TaskInfo:type_name -> trpc.media.common.TaskInfo
	0,  // 6: trpc.media.videoerase.RemoveCaptionTaskData.InputMask:type_name -> trpc.media.videoerase.LogoMask
	9,  // 7: trpc.media.videoerase.DescribeRemoveCaptionTaskDataResponse.TaskData:type_name -> trpc.media.videoerase.RemoveCaptionTaskData
	14, // 8: trpc.media.videoerase.DescribeRemoveCaptionTaskDataResponse.TaskInfo:type_name -> trpc.media.common.TaskInfo
	1,  // 9: trpc.media.videoerase.RemoveLogo.CreateRemoveLogoTask:input_type -> trpc.media.videoerase.CreateRemoveLogoTaskRequest
	3,  // 10: trpc.media.videoerase.RemoveLogo.DescribeRemoveLogoTaskData:input_type -> trpc.media.videoerase.DescribeRemoveLogoTaskDataRequest
	6,  // 11: trpc.media.videoerase.RemoveCaption.CreateRemoveCaptionTask:input_type -> trpc.media.videoerase.CreateRemoveCaptionTaskRequest
	8,  // 12: trpc.media.videoerase.RemoveCaption.DescribeRemoveCaptionTaskData:input_type -> trpc.media.videoerase.DescribeRemoveCaptionTaskDataRequest
	2,  // 13: trpc.media.videoerase.RemoveLogo.CreateRemoveLogoTask:output_type -> trpc.media.videoerase.CreateRemoveLogoTaskResponse
	5,  // 14: trpc.media.videoerase.RemoveLogo.DescribeRemoveLogoTaskData:output_type -> trpc.media.videoerase.DescribeRemoveLogoTaskDataResponse
	7,  // 15: trpc.media.videoerase.RemoveCaption.CreateRemoveCaptionTask:output_type -> trpc.media.videoerase.CreateRemoveCaptionTaskResponse
	10, // 16: trpc.media.videoerase.RemoveCaption.DescribeRemoveCaptionTaskData:output_type -> trpc.media.videoerase.DescribeRemoveCaptionTaskDataResponse
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_video_erase_proto_init() }
func file_video_erase_proto_init() {
	if File_video_erase_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_erase_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_erase_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRemoveLogoTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_erase_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRemoveLogoTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_erase_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeRemoveLogoTaskDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_erase_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveLogoTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_erase_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeRemoveLogoTaskDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_erase_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRemoveCaptionTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_erase_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRemoveCaptionTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_erase_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeRemoveCaptionTaskDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_erase_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCaptionTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_erase_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeRemoveCaptionTaskDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_erase_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_video_erase_proto_goTypes,
		DependencyIndexes: file_video_erase_proto_depIdxs,
		MessageInfos:      file_video_erase_proto_msgTypes,
	}.Build()
	File_video_erase_proto = out.File
	file_video_erase_proto_rawDesc = nil
	file_video_erase_proto_goTypes = nil
	file_video_erase_proto_depIdxs = nil
}
