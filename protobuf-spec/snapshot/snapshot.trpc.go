// Code generated by trpc-go/trpc-go-cmdline v2.2.18. DO NOT EDIT.
// source: snapshot.proto

package snapshot

import (
	"context"
	"errors"
	"fmt"

	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/client"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/codec"
	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/http"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/server"
)

// START ======================================= Server Service Definition ======================================= START

// SnapshotService defines service.
type SnapshotService interface {
	CreateSnapshot(ctx context.Context, req *CreateSnapshotRequest, rsp *CreateSnapshotResponse) (err error) // @alias=/CreateSnapshot

	DescribeSnapshotData(ctx context.Context, req *DescribeSnapshotRequest, rsp *DescribeSnapshotResponse) (err error) // @alias=/DescribeSnapshotData

	UpdateSnapshot(ctx context.Context, req *UpdateSnapshotRequest, rsp *UpdateSnapshotResponse) (err error) // @alias=/UpdateSnapshot
}

func SnapshotService_CreateSnapshot_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateSnapshotRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(SnapshotService).CreateSnapshot(ctx, reqbody.(*CreateSnapshotRequest), rspbody.(*CreateSnapshotResponse))
	}

	rsp := &CreateSnapshotResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SnapshotService_DescribeSnapshotData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeSnapshotRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(SnapshotService).DescribeSnapshotData(ctx, reqbody.(*DescribeSnapshotRequest), rspbody.(*DescribeSnapshotResponse))
	}

	rsp := &DescribeSnapshotResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SnapshotService_UpdateSnapshot_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateSnapshotRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(SnapshotService).UpdateSnapshot(ctx, reqbody.(*UpdateSnapshotRequest), rspbody.(*UpdateSnapshotResponse))
	}

	rsp := &UpdateSnapshotResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// SnapshotServer_ServiceDesc descriptor for server.RegisterService.
var SnapshotServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.snapshot.Snapshot",
	HandlerType: ((*SnapshotService)(nil)),
	Methods: []server.Method{
		{
			Name: "/CreateSnapshot",
			Func: SnapshotService_CreateSnapshot_Handler,
		},
		{
			Name: "/DescribeSnapshotData",
			Func: SnapshotService_DescribeSnapshotData_Handler,
		},
		{
			Name: "/UpdateSnapshot",
			Func: SnapshotService_UpdateSnapshot_Handler,
		},
		{
			Name: "/trpc.media.snapshot.Snapshot/CreateSnapshot",
			Func: SnapshotService_CreateSnapshot_Handler,
		},
		{
			Name: "/trpc.media.snapshot.Snapshot/DescribeSnapshotData",
			Func: SnapshotService_DescribeSnapshotData_Handler,
		},
		{
			Name: "/trpc.media.snapshot.Snapshot/UpdateSnapshot",
			Func: SnapshotService_UpdateSnapshot_Handler,
		},
	},
}

// RegisterSnapshotService registers service.
func RegisterSnapshotService(s server.Service, svr SnapshotService) {
	if err := s.Register(&SnapshotServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Snapshot register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedSnapshot struct{}

func (s *UnimplementedSnapshot) CreateSnapshot(ctx context.Context, req *CreateSnapshotRequest, rsp *CreateSnapshotResponse) error {
	return errors.New("rpc CreateSnapshot of service Snapshot is not implemented")
}
func (s *UnimplementedSnapshot) DescribeSnapshotData(ctx context.Context, req *DescribeSnapshotRequest, rsp *DescribeSnapshotResponse) error {
	return errors.New("rpc DescribeSnapshotData of service Snapshot is not implemented")
}
func (s *UnimplementedSnapshot) UpdateSnapshot(ctx context.Context, req *UpdateSnapshotRequest, rsp *UpdateSnapshotResponse) error {
	return errors.New("rpc UpdateSnapshot of service Snapshot is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// SnapshotClientProxy defines service client proxy
type SnapshotClientProxy interface {
	CreateSnapshot(ctx context.Context, req *CreateSnapshotRequest, opts ...client.Option) (rsp *CreateSnapshotResponse, err error) // @alias=/CreateSnapshot

	DescribeSnapshotData(ctx context.Context, req *DescribeSnapshotRequest, opts ...client.Option) (rsp *DescribeSnapshotResponse, err error) // @alias=/DescribeSnapshotData

	UpdateSnapshot(ctx context.Context, req *UpdateSnapshotRequest, opts ...client.Option) (rsp *UpdateSnapshotResponse, err error) // @alias=/UpdateSnapshot
}

type SnapshotClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewSnapshotClientProxy = func(opts ...client.Option) SnapshotClientProxy {
	return &SnapshotClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *SnapshotClientProxyImpl) CreateSnapshot(ctx context.Context, req *CreateSnapshotRequest, opts ...client.Option) (*CreateSnapshotResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/CreateSnapshot")
	msg.WithCalleeServiceName(SnapshotServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("snapshot")
	msg.WithCalleeService("Snapshot")
	msg.WithCalleeMethod("CreateSnapshot")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateSnapshotResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SnapshotClientProxyImpl) DescribeSnapshotData(ctx context.Context, req *DescribeSnapshotRequest, opts ...client.Option) (*DescribeSnapshotResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeSnapshotData")
	msg.WithCalleeServiceName(SnapshotServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("snapshot")
	msg.WithCalleeService("Snapshot")
	msg.WithCalleeMethod("DescribeSnapshotData")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeSnapshotResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SnapshotClientProxyImpl) UpdateSnapshot(ctx context.Context, req *UpdateSnapshotRequest, opts ...client.Option) (*UpdateSnapshotResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/UpdateSnapshot")
	msg.WithCalleeServiceName(SnapshotServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("snapshot")
	msg.WithCalleeService("Snapshot")
	msg.WithCalleeMethod("UpdateSnapshot")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &UpdateSnapshotResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
