// Code generated by trpc-go/trpc-go-cmdline v2.6.6. DO NOT EDIT.
// source: person_retrieval.proto

package personretrieval

import (
	"context"
	"errors"
	"fmt"

	_ "git.code.oa.com/trpc-go/trpc-go"
	"git.code.oa.com/trpc-go/trpc-go/client"
	"git.code.oa.com/trpc-go/trpc-go/codec"
	_ "git.code.oa.com/trpc-go/trpc-go/http"
	"git.code.oa.com/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// PersonRetrievalService defines service.
type PersonRetrievalService interface {
	CreatePersonRetrievalTask(ctx context.Context, req *CreatePersonRetrievalTaskRequest, rsp *CreatePersonRetrievalTaskResponse) (err error) // @alias=/CreatePersonRetrievalTask

	DescribePersonRetrievalTaskData(ctx context.Context, req *DescribePersonRetrievalTaskDataRequest, rsp *DescribePersonRetrievalTaskDataResponse) (err error) // @alias=/DescribePersonRetrievalTaskData

	RetrievalImage(ctx context.Context, req *RetrievalImageRequest, rsp *RetrievalImageResponse) (err error) // @alias=/RetrievalImage
}

func PersonRetrievalService_CreatePersonRetrievalTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreatePersonRetrievalTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(PersonRetrievalService).CreatePersonRetrievalTask(ctx, reqbody.(*CreatePersonRetrievalTaskRequest), rspbody.(*CreatePersonRetrievalTaskResponse))
	}

	rsp := &CreatePersonRetrievalTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func PersonRetrievalService_DescribePersonRetrievalTaskData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribePersonRetrievalTaskDataRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(PersonRetrievalService).DescribePersonRetrievalTaskData(ctx, reqbody.(*DescribePersonRetrievalTaskDataRequest), rspbody.(*DescribePersonRetrievalTaskDataResponse))
	}

	rsp := &DescribePersonRetrievalTaskDataResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func PersonRetrievalService_RetrievalImage_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &RetrievalImageRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(PersonRetrievalService).RetrievalImage(ctx, reqbody.(*RetrievalImageRequest), rspbody.(*RetrievalImageResponse))
	}

	rsp := &RetrievalImageResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// PersonRetrievalServer_ServiceDesc descriptor for server.RegisterService.
var PersonRetrievalServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.personretrieval.PersonRetrieval",
	HandlerType: ((*PersonRetrievalService)(nil)),
	Methods: []server.Method{
		{
			Name: "/CreatePersonRetrievalTask",
			Func: PersonRetrievalService_CreatePersonRetrievalTask_Handler,
		},
		{
			Name: "/DescribePersonRetrievalTaskData",
			Func: PersonRetrievalService_DescribePersonRetrievalTaskData_Handler,
		},
		{
			Name: "/RetrievalImage",
			Func: PersonRetrievalService_RetrievalImage_Handler,
		},
		{
			Name: "/trpc.media.personretrieval.PersonRetrieval/CreatePersonRetrievalTask",
			Func: PersonRetrievalService_CreatePersonRetrievalTask_Handler,
		},
		{
			Name: "/trpc.media.personretrieval.PersonRetrieval/DescribePersonRetrievalTaskData",
			Func: PersonRetrievalService_DescribePersonRetrievalTaskData_Handler,
		},
		{
			Name: "/trpc.media.personretrieval.PersonRetrieval/RetrievalImage",
			Func: PersonRetrievalService_RetrievalImage_Handler,
		},
	},
}

// RegisterPersonRetrievalService registers service.
func RegisterPersonRetrievalService(s server.Service, svr PersonRetrievalService) {
	if err := s.Register(&PersonRetrievalServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("PersonRetrieval register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedPersonRetrieval struct{}

func (s *UnimplementedPersonRetrieval) CreatePersonRetrievalTask(ctx context.Context, req *CreatePersonRetrievalTaskRequest, rsp *CreatePersonRetrievalTaskResponse) error {
	return errors.New("rpc CreatePersonRetrievalTask of service PersonRetrieval is not implemented")
}
func (s *UnimplementedPersonRetrieval) DescribePersonRetrievalTaskData(ctx context.Context, req *DescribePersonRetrievalTaskDataRequest, rsp *DescribePersonRetrievalTaskDataResponse) error {
	return errors.New("rpc DescribePersonRetrievalTaskData of service PersonRetrieval is not implemented")
}
func (s *UnimplementedPersonRetrieval) RetrievalImage(ctx context.Context, req *RetrievalImageRequest, rsp *RetrievalImageResponse) error {
	return errors.New("rpc RetrievalImage of service PersonRetrieval is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// PersonRetrievalClientProxy defines service client proxy
type PersonRetrievalClientProxy interface {
	CreatePersonRetrievalTask(ctx context.Context, req *CreatePersonRetrievalTaskRequest, opts ...client.Option) (rsp *CreatePersonRetrievalTaskResponse, err error) // @alias=/CreatePersonRetrievalTask

	DescribePersonRetrievalTaskData(ctx context.Context, req *DescribePersonRetrievalTaskDataRequest, opts ...client.Option) (rsp *DescribePersonRetrievalTaskDataResponse, err error) // @alias=/DescribePersonRetrievalTaskData

	RetrievalImage(ctx context.Context, req *RetrievalImageRequest, opts ...client.Option) (rsp *RetrievalImageResponse, err error) // @alias=/RetrievalImage
}

type PersonRetrievalClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewPersonRetrievalClientProxy = func(opts ...client.Option) PersonRetrievalClientProxy {
	return &PersonRetrievalClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *PersonRetrievalClientProxyImpl) CreatePersonRetrievalTask(ctx context.Context, req *CreatePersonRetrievalTaskRequest, opts ...client.Option) (*CreatePersonRetrievalTaskResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/CreatePersonRetrievalTask")
	msg.WithCalleeServiceName(PersonRetrievalServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("personretrieval")
	msg.WithCalleeService("PersonRetrieval")
	msg.WithCalleeMethod("CreatePersonRetrievalTask")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreatePersonRetrievalTaskResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *PersonRetrievalClientProxyImpl) DescribePersonRetrievalTaskData(ctx context.Context, req *DescribePersonRetrievalTaskDataRequest, opts ...client.Option) (*DescribePersonRetrievalTaskDataResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribePersonRetrievalTaskData")
	msg.WithCalleeServiceName(PersonRetrievalServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("personretrieval")
	msg.WithCalleeService("PersonRetrieval")
	msg.WithCalleeMethod("DescribePersonRetrievalTaskData")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribePersonRetrievalTaskDataResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *PersonRetrievalClientProxyImpl) RetrievalImage(ctx context.Context, req *RetrievalImageRequest, opts ...client.Option) (*RetrievalImageResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/RetrievalImage")
	msg.WithCalleeServiceName(PersonRetrievalServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("personretrieval")
	msg.WithCalleeService("PersonRetrieval")
	msg.WithCalleeMethod("RetrievalImage")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &RetrievalImageResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
