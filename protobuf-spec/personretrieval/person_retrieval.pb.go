// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: person_retrieval.proto

package personretrieval

import (
	reflect "reflect"
	sync "sync"

	apicommon "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/apicommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreatePersonRetrievalTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId     string `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	TaskName    string `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	CallbackURL string `protobuf:"bytes,3,opt,name=CallbackURL,proto3" json:"CallbackURL,omitempty"`
}

func (x *CreatePersonRetrievalTaskRequest) Reset() {
	*x = CreatePersonRetrievalTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_retrieval_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePersonRetrievalTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePersonRetrievalTaskRequest) ProtoMessage() {}

func (x *CreatePersonRetrievalTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_person_retrieval_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePersonRetrievalTaskRequest.ProtoReflect.Descriptor instead.
func (*CreatePersonRetrievalTaskRequest) Descriptor() ([]byte, []int) {
	return file_person_retrieval_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePersonRetrievalTaskRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *CreatePersonRetrievalTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *CreatePersonRetrievalTaskRequest) GetCallbackURL() string {
	if x != nil {
		return x.CallbackURL
	}
	return ""
}

type CreatePersonRetrievalTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,2,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *CreatePersonRetrievalTaskResponse) Reset() {
	*x = CreatePersonRetrievalTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_retrieval_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePersonRetrievalTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePersonRetrievalTaskResponse) ProtoMessage() {}

func (x *CreatePersonRetrievalTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_person_retrieval_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePersonRetrievalTaskResponse.ProtoReflect.Descriptor instead.
func (*CreatePersonRetrievalTaskResponse) Descriptor() ([]byte, []int) {
	return file_person_retrieval_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePersonRetrievalTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type StampInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeStamp string `protobuf:"bytes,1,opt,name=StartTimeStamp,proto3" json:"StartTimeStamp,omitempty"`
	EndTimeStamp   string `protobuf:"bytes,2,opt,name=EndTimeStamp,proto3" json:"EndTimeStamp,omitempty"`
}

func (x *StampInfo) Reset() {
	*x = StampInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_retrieval_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StampInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StampInfo) ProtoMessage() {}

func (x *StampInfo) ProtoReflect() protoreflect.Message {
	mi := &file_person_retrieval_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StampInfo.ProtoReflect.Descriptor instead.
func (*StampInfo) Descriptor() ([]byte, []int) {
	return file_person_retrieval_proto_rawDescGZIP(), []int{2}
}

func (x *StampInfo) GetStartTimeStamp() string {
	if x != nil {
		return x.StartTimeStamp
	}
	return ""
}

func (x *StampInfo) GetEndTimeStamp() string {
	if x != nil {
		return x.EndTimeStamp
	}
	return ""
}

type DetailStampInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartFrameIndex string       `protobuf:"bytes,1,opt,name=StartFrameIndex,proto3" json:"StartFrameIndex,omitempty"` //人脸出现起始帧号
	EndFrameIndex   string       `protobuf:"bytes,2,opt,name=EndFrameIndex,proto3" json:"EndFrameIndex,omitempty"`     //人脸出现的终止帧号
	DetailFrames    []*FrameInfo `protobuf:"bytes,3,rep,name=DetailFrames,proto3" json:"DetailFrames,omitempty"`       //人脸出现的位置信息
}

func (x *DetailStampInfo) Reset() {
	*x = DetailStampInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_retrieval_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailStampInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailStampInfo) ProtoMessage() {}

func (x *DetailStampInfo) ProtoReflect() protoreflect.Message {
	mi := &file_person_retrieval_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailStampInfo.ProtoReflect.Descriptor instead.
func (*DetailStampInfo) Descriptor() ([]byte, []int) {
	return file_person_retrieval_proto_rawDescGZIP(), []int{3}
}

func (x *DetailStampInfo) GetStartFrameIndex() string {
	if x != nil {
		return x.StartFrameIndex
	}
	return ""
}

func (x *DetailStampInfo) GetEndFrameIndex() string {
	if x != nil {
		return x.EndFrameIndex
	}
	return ""
}

func (x *DetailStampInfo) GetDetailFrames() []*FrameInfo {
	if x != nil {
		return x.DetailFrames
	}
	return nil
}

type FrameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rect       *apicommon.Rect `protobuf:"bytes,1,opt,name=Rect,proto3" json:"Rect,omitempty"`
	FrameIndex string          `protobuf:"bytes,2,opt,name=FrameIndex,proto3" json:"FrameIndex,omitempty"` // 人脸出现的帧号
	Quality    float32         `protobuf:"fixed32,3,opt,name=Quality,proto3" json:"Quality,omitempty"`     //质量总分
}

func (x *FrameInfo) Reset() {
	*x = FrameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_retrieval_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameInfo) ProtoMessage() {}

func (x *FrameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_person_retrieval_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameInfo.ProtoReflect.Descriptor instead.
func (*FrameInfo) Descriptor() ([]byte, []int) {
	return file_person_retrieval_proto_rawDescGZIP(), []int{4}
}

func (x *FrameInfo) GetRect() *apicommon.Rect {
	if x != nil {
		return x.Rect
	}
	return nil
}

func (x *FrameInfo) GetFrameIndex() string {
	if x != nil {
		return x.FrameIndex
	}
	return ""
}

func (x *FrameInfo) GetQuality() float32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

type FaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string             `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Job                string             `protobuf:"bytes,2,opt,name=Job,proto3" json:"Job,omitempty"`
	Label              string             `protobuf:"bytes,3,opt,name=Label,proto3" json:"Label,omitempty"`
	StampInfoSet       []*StampInfo       `protobuf:"bytes,4,rep,name=StampInfoSet,proto3" json:"StampInfoSet,omitempty"`
	ImageMediaId       string             `protobuf:"bytes,5,opt,name=ImageMediaId,proto3" json:"ImageMediaId,omitempty"`
	FaceId             string             `protobuf:"bytes,6,opt,name=FaceId,proto3" json:"FaceId,omitempty"`
	IsUnknown          int32              `protobuf:"varint,7,opt,name=IsUnknown,proto3" json:"IsUnknown,omitempty"`
	PutLibraryAllowed  bool               `protobuf:"varint,8,opt,name=PutLibraryAllowed,proto3" json:"PutLibraryAllowed,omitempty"`
	SecondLabel        string             `protobuf:"bytes,9,opt,name=SecondLabel,proto3" json:"SecondLabel,omitempty"`
	AttachPersonId     string             `protobuf:"bytes,10,opt,name=AttachPersonId,proto3" json:"AttachPersonId,omitempty"`
	DetailStampInfoSet []*DetailStampInfo `protobuf:"bytes,11,rep,name=DetailStampInfoSet,proto3" json:"DetailStampInfoSet,omitempty"`
	Sensitive          int32              `protobuf:"varint,12,opt,name=Sensitive,proto3" json:"Sensitive,omitempty"`
	Confidence         float32            `protobuf:"fixed32,13,opt,name=Confidence,proto3" json:"Confidence,omitempty"`
}

func (x *FaceInfo) Reset() {
	*x = FaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_retrieval_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceInfo) ProtoMessage() {}

func (x *FaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_person_retrieval_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceInfo.ProtoReflect.Descriptor instead.
func (*FaceInfo) Descriptor() ([]byte, []int) {
	return file_person_retrieval_proto_rawDescGZIP(), []int{5}
}

func (x *FaceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FaceInfo) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *FaceInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FaceInfo) GetStampInfoSet() []*StampInfo {
	if x != nil {
		return x.StampInfoSet
	}
	return nil
}

func (x *FaceInfo) GetImageMediaId() string {
	if x != nil {
		return x.ImageMediaId
	}
	return ""
}

func (x *FaceInfo) GetFaceId() string {
	if x != nil {
		return x.FaceId
	}
	return ""
}

func (x *FaceInfo) GetIsUnknown() int32 {
	if x != nil {
		return x.IsUnknown
	}
	return 0
}

func (x *FaceInfo) GetPutLibraryAllowed() bool {
	if x != nil {
		return x.PutLibraryAllowed
	}
	return false
}

func (x *FaceInfo) GetSecondLabel() string {
	if x != nil {
		return x.SecondLabel
	}
	return ""
}

func (x *FaceInfo) GetAttachPersonId() string {
	if x != nil {
		return x.AttachPersonId
	}
	return ""
}

func (x *FaceInfo) GetDetailStampInfoSet() []*DetailStampInfo {
	if x != nil {
		return x.DetailStampInfoSet
	}
	return nil
}

func (x *FaceInfo) GetSensitive() int32 {
	if x != nil {
		return x.Sensitive
	}
	return 0
}

func (x *FaceInfo) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

type PersonRetrievalTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceInfoSet []*FaceInfo `protobuf:"bytes,1,rep,name=FaceInfoSet,proto3" json:"FaceInfoSet,omitempty"`
	TotalCount  uint32      `protobuf:"varint,2,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
}

func (x *PersonRetrievalTaskData) Reset() {
	*x = PersonRetrievalTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_retrieval_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonRetrievalTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonRetrievalTaskData) ProtoMessage() {}

func (x *PersonRetrievalTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_person_retrieval_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonRetrievalTaskData.ProtoReflect.Descriptor instead.
func (*PersonRetrievalTaskData) Descriptor() ([]byte, []int) {
	return file_person_retrieval_proto_rawDescGZIP(), []int{6}
}

func (x *PersonRetrievalTaskData) GetFaceInfoSet() []*FaceInfo {
	if x != nil {
		return x.FaceInfoSet
	}
	return nil
}

func (x *PersonRetrievalTaskData) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type DescribePersonRetrievalTaskDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId  string   `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	NameSet []string `protobuf:"bytes,2,rep,name=NameSet,proto3" json:"NameSet,omitempty"`
}

func (x *DescribePersonRetrievalTaskDataRequest) Reset() {
	*x = DescribePersonRetrievalTaskDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_retrieval_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePersonRetrievalTaskDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePersonRetrievalTaskDataRequest) ProtoMessage() {}

func (x *DescribePersonRetrievalTaskDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_person_retrieval_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePersonRetrievalTaskDataRequest.ProtoReflect.Descriptor instead.
func (*DescribePersonRetrievalTaskDataRequest) Descriptor() ([]byte, []int) {
	return file_person_retrieval_proto_rawDescGZIP(), []int{7}
}

func (x *DescribePersonRetrievalTaskDataRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DescribePersonRetrievalTaskDataRequest) GetNameSet() []string {
	if x != nil {
		return x.NameSet
	}
	return nil
}

type DescribePersonRetrievalTaskDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskData    *PersonRetrievalTaskData `protobuf:"bytes,1,opt,name=TaskData,proto3" json:"TaskData,omitempty"`
	TaskInfo    *apicommon.TaskInfo      `protobuf:"bytes,2,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
	WebMediaURL string                   `protobuf:"bytes,3,opt,name=WebMediaURL,proto3" json:"WebMediaURL,omitempty"`
}

func (x *DescribePersonRetrievalTaskDataResponse) Reset() {
	*x = DescribePersonRetrievalTaskDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_retrieval_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePersonRetrievalTaskDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePersonRetrievalTaskDataResponse) ProtoMessage() {}

func (x *DescribePersonRetrievalTaskDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_person_retrieval_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePersonRetrievalTaskDataResponse.ProtoReflect.Descriptor instead.
func (*DescribePersonRetrievalTaskDataResponse) Descriptor() ([]byte, []int) {
	return file_person_retrieval_proto_rawDescGZIP(), []int{8}
}

func (x *DescribePersonRetrievalTaskDataResponse) GetTaskData() *PersonRetrievalTaskData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *DescribePersonRetrievalTaskDataResponse) GetTaskInfo() *apicommon.TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

func (x *DescribePersonRetrievalTaskDataResponse) GetWebMediaURL() string {
	if x != nil {
		return x.WebMediaURL
	}
	return ""
}

type AppearMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId         string       `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	BusinessMediaID string       `protobuf:"bytes,2,opt,name=BusinessMediaID,proto3" json:"BusinessMediaID,omitempty"`
	MediaURL        string       `protobuf:"bytes,3,opt,name=MediaURL,proto3" json:"MediaURL,omitempty"`
	StampInfoSet    []*StampInfo `protobuf:"bytes,4,rep,name=StampInfoSet,proto3" json:"StampInfoSet,omitempty"`
}

func (x *AppearMedia) Reset() {
	*x = AppearMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_retrieval_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearMedia) ProtoMessage() {}

func (x *AppearMedia) ProtoReflect() protoreflect.Message {
	mi := &file_person_retrieval_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearMedia.ProtoReflect.Descriptor instead.
func (*AppearMedia) Descriptor() ([]byte, []int) {
	return file_person_retrieval_proto_rawDescGZIP(), []int{9}
}

func (x *AppearMedia) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *AppearMedia) GetBusinessMediaID() string {
	if x != nil {
		return x.BusinessMediaID
	}
	return ""
}

func (x *AppearMedia) GetMediaURL() string {
	if x != nil {
		return x.MediaURL
	}
	return ""
}

func (x *AppearMedia) GetStampInfoSet() []*StampInfo {
	if x != nil {
		return x.StampInfoSet
	}
	return nil
}

type RetrievalImageFaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string          `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Job               string          `protobuf:"bytes,2,opt,name=Job,proto3" json:"Job,omitempty"`
	Label             string          `protobuf:"bytes,3,opt,name=Label,proto3" json:"Label,omitempty"`
	SecondLabel       string          `protobuf:"bytes,4,opt,name=SecondLabel,proto3" json:"SecondLabel,omitempty"`
	ImageURL          string          `protobuf:"bytes,5,opt,name=ImageURL,proto3" json:"ImageURL,omitempty"`
	FaceId            string          `protobuf:"bytes,6,opt,name=FaceId,proto3" json:"FaceId,omitempty"`
	IsUnknown         int32           `protobuf:"varint,7,opt,name=IsUnknown,proto3" json:"IsUnknown,omitempty"`
	PutLibraryAllowed bool            `protobuf:"varint,8,opt,name=PutLibraryAllowed,proto3" json:"PutLibraryAllowed,omitempty"`
	AppearMediaSet    []*AppearMedia  `protobuf:"bytes,9,rep,name=AppearMediaSet,proto3" json:"AppearMediaSet,omitempty"`
	AttachPersonId    string          `protobuf:"bytes,10,opt,name=AttachPersonId,proto3" json:"AttachPersonId,omitempty"`
	Rect              *apicommon.Rect `protobuf:"bytes,11,opt,name=Rect,proto3" json:"Rect,omitempty"`
	Sensitive         int32           `protobuf:"varint,12,opt,name=Sensitive,proto3" json:"Sensitive,omitempty"`
	Quality           float32         `protobuf:"fixed32,13,opt,name=Quality,proto3" json:"Quality,omitempty"`
	Confidence        float32         `protobuf:"fixed32,14,opt,name=Confidence,proto3" json:"Confidence,omitempty"`
	GroupIdSet        []string        `protobuf:"bytes,15,rep,name=GroupIdSet,proto3" json:"GroupIdSet,omitempty"`
}

func (x *RetrievalImageFaces) Reset() {
	*x = RetrievalImageFaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_retrieval_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrievalImageFaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrievalImageFaces) ProtoMessage() {}

func (x *RetrievalImageFaces) ProtoReflect() protoreflect.Message {
	mi := &file_person_retrieval_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrievalImageFaces.ProtoReflect.Descriptor instead.
func (*RetrievalImageFaces) Descriptor() ([]byte, []int) {
	return file_person_retrieval_proto_rawDescGZIP(), []int{10}
}

func (x *RetrievalImageFaces) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RetrievalImageFaces) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *RetrievalImageFaces) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *RetrievalImageFaces) GetSecondLabel() string {
	if x != nil {
		return x.SecondLabel
	}
	return ""
}

func (x *RetrievalImageFaces) GetImageURL() string {
	if x != nil {
		return x.ImageURL
	}
	return ""
}

func (x *RetrievalImageFaces) GetFaceId() string {
	if x != nil {
		return x.FaceId
	}
	return ""
}

func (x *RetrievalImageFaces) GetIsUnknown() int32 {
	if x != nil {
		return x.IsUnknown
	}
	return 0
}

func (x *RetrievalImageFaces) GetPutLibraryAllowed() bool {
	if x != nil {
		return x.PutLibraryAllowed
	}
	return false
}

func (x *RetrievalImageFaces) GetAppearMediaSet() []*AppearMedia {
	if x != nil {
		return x.AppearMediaSet
	}
	return nil
}

func (x *RetrievalImageFaces) GetAttachPersonId() string {
	if x != nil {
		return x.AttachPersonId
	}
	return ""
}

func (x *RetrievalImageFaces) GetRect() *apicommon.Rect {
	if x != nil {
		return x.Rect
	}
	return nil
}

func (x *RetrievalImageFaces) GetSensitive() int32 {
	if x != nil {
		return x.Sensitive
	}
	return 0
}

func (x *RetrievalImageFaces) GetQuality() float32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *RetrievalImageFaces) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *RetrievalImageFaces) GetGroupIdSet() []string {
	if x != nil {
		return x.GroupIdSet
	}
	return nil
}

type RetrievalImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image                   []byte   `protobuf:"bytes,1,opt,name=Image,proto3" json:"Image,omitempty"`
	IsUnknownGroupEnable    bool     `protobuf:"varint,2,opt,name=IsUnknownGroupEnable,proto3" json:"IsUnknownGroupEnable,omitempty"`
	IsPublicGroupEnable     bool     `protobuf:"varint,3,opt,name=IsPublicGroupEnable,proto3" json:"IsPublicGroupEnable,omitempty"`
	IsUserDefineGroupEnable bool     `protobuf:"varint,4,opt,name=IsUserDefineGroupEnable,proto3" json:"IsUserDefineGroupEnable,omitempty"`
	UserDefineGroupSet      []uint32 `protobuf:"varint,5,rep,packed,name=UserDefineGroupSet,proto3" json:"UserDefineGroupSet,omitempty"`
	IsTimestampEnable       bool     `protobuf:"varint,6,opt,name=IsTimestampEnable,proto3" json:"IsTimestampEnable,omitempty"`
	IsAppearMediaEnable     bool     `protobuf:"varint,7,opt,name=IsAppearMediaEnable,proto3" json:"IsAppearMediaEnable,omitempty"`
	LocalImagePath          string   `protobuf:"bytes,8,opt,name=LocalImagePath,proto3" json:"LocalImagePath,omitempty"` // 内部使用
}

func (x *RetrievalImageRequest) Reset() {
	*x = RetrievalImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_retrieval_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrievalImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrievalImageRequest) ProtoMessage() {}

func (x *RetrievalImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_person_retrieval_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrievalImageRequest.ProtoReflect.Descriptor instead.
func (*RetrievalImageRequest) Descriptor() ([]byte, []int) {
	return file_person_retrieval_proto_rawDescGZIP(), []int{11}
}

func (x *RetrievalImageRequest) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *RetrievalImageRequest) GetIsUnknownGroupEnable() bool {
	if x != nil {
		return x.IsUnknownGroupEnable
	}
	return false
}

func (x *RetrievalImageRequest) GetIsPublicGroupEnable() bool {
	if x != nil {
		return x.IsPublicGroupEnable
	}
	return false
}

func (x *RetrievalImageRequest) GetIsUserDefineGroupEnable() bool {
	if x != nil {
		return x.IsUserDefineGroupEnable
	}
	return false
}

func (x *RetrievalImageRequest) GetUserDefineGroupSet() []uint32 {
	if x != nil {
		return x.UserDefineGroupSet
	}
	return nil
}

func (x *RetrievalImageRequest) GetIsTimestampEnable() bool {
	if x != nil {
		return x.IsTimestampEnable
	}
	return false
}

func (x *RetrievalImageRequest) GetIsAppearMediaEnable() bool {
	if x != nil {
		return x.IsAppearMediaEnable
	}
	return false
}

func (x *RetrievalImageRequest) GetLocalImagePath() string {
	if x != nil {
		return x.LocalImagePath
	}
	return ""
}

type RetrievalImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceSet    []*RetrievalImageFaces `protobuf:"bytes,1,rep,name=FaceSet,proto3" json:"FaceSet,omitempty"`
	TotalCount uint32                 `protobuf:"varint,2,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
}

func (x *RetrievalImageResponse) Reset() {
	*x = RetrievalImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_person_retrieval_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrievalImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrievalImageResponse) ProtoMessage() {}

func (x *RetrievalImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_person_retrieval_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrievalImageResponse.ProtoReflect.Descriptor instead.
func (*RetrievalImageResponse) Descriptor() ([]byte, []int) {
	return file_person_retrieval_proto_rawDescGZIP(), []int{12}
}

func (x *RetrievalImageResponse) GetFaceSet() []*RetrievalImageFaces {
	if x != nil {
		return x.FaceSet
	}
	return nil
}

func (x *RetrievalImageResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_person_retrieval_proto protoreflect.FileDescriptor

var file_person_retrieval_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x61, 0x6c, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x7a, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x22, 0x3b,
	0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xac, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x6e, 0x64, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2b, 0x0a, 0x04, 0x52, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x04, 0x52, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xfe, 0x03, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x49, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x73, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x75, 0x74, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x50, 0x75, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5b, 0x0a,
	0x12, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x46, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x26,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x27, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x61, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20,
	0x0a, 0x0b, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x52, 0x4c,
	0x22, 0xb8, 0x01, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x52, 0x4c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x52, 0x4c,
	0x12, 0x49, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x22, 0x91, 0x04, 0x0a, 0x13,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a,
	0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x73, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x75, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x50, 0x75, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x12, 0x4f, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x53, 0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x0e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53,
	0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x52, 0x65,
	0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63,
	0x74, 0x52, 0x04, 0x52, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x53, 0x65, 0x74, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x53, 0x65, 0x74, 0x22,
	0x85, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x49, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x49,
	0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x49, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x49, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x49, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x49, 0x73, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x49, 0x73, 0x41, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x46, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x07, 0x46, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xd2, 0x03,
	0x0a, 0x0f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61,
	0x6c, 0x12, 0x98, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x3c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xaa, 0x01, 0x0a,
	0x1f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x42, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61,
	0x6c, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x0e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x31, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x5f, 0x5a, 0x5d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x54, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x73,
	0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73,
	0x70, 0x65, 0x63, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_person_retrieval_proto_rawDescOnce sync.Once
	file_person_retrieval_proto_rawDescData = file_person_retrieval_proto_rawDesc
)

func file_person_retrieval_proto_rawDescGZIP() []byte {
	file_person_retrieval_proto_rawDescOnce.Do(func() {
		file_person_retrieval_proto_rawDescData = protoimpl.X.CompressGZIP(file_person_retrieval_proto_rawDescData)
	})
	return file_person_retrieval_proto_rawDescData
}

var file_person_retrieval_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_person_retrieval_proto_goTypes = []interface{}{
	(*CreatePersonRetrievalTaskRequest)(nil),        // 0: trpc.media.personretrieval.CreatePersonRetrievalTaskRequest
	(*CreatePersonRetrievalTaskResponse)(nil),       // 1: trpc.media.personretrieval.CreatePersonRetrievalTaskResponse
	(*StampInfo)(nil),                               // 2: trpc.media.personretrieval.StampInfo
	(*DetailStampInfo)(nil),                         // 3: trpc.media.personretrieval.DetailStampInfo
	(*FrameInfo)(nil),                               // 4: trpc.media.personretrieval.FrameInfo
	(*FaceInfo)(nil),                                // 5: trpc.media.personretrieval.FaceInfo
	(*PersonRetrievalTaskData)(nil),                 // 6: trpc.media.personretrieval.PersonRetrievalTaskData
	(*DescribePersonRetrievalTaskDataRequest)(nil),  // 7: trpc.media.personretrieval.DescribePersonRetrievalTaskDataRequest
	(*DescribePersonRetrievalTaskDataResponse)(nil), // 8: trpc.media.personretrieval.DescribePersonRetrievalTaskDataResponse
	(*AppearMedia)(nil),                             // 9: trpc.media.personretrieval.AppearMedia
	(*RetrievalImageFaces)(nil),                     // 10: trpc.media.personretrieval.RetrievalImageFaces
	(*RetrievalImageRequest)(nil),                   // 11: trpc.media.personretrieval.RetrievalImageRequest
	(*RetrievalImageResponse)(nil),                  // 12: trpc.media.personretrieval.RetrievalImageResponse
	(*apicommon.Rect)(nil),                          // 13: trpc.media.common.Rect
	(*apicommon.TaskInfo)(nil),                      // 14: trpc.media.common.TaskInfo
}
var file_person_retrieval_proto_depIdxs = []int32{
	4,  // 0: trpc.media.personretrieval.DetailStampInfo.DetailFrames:type_name -> trpc.media.personretrieval.FrameInfo
	13, // 1: trpc.media.personretrieval.FrameInfo.Rect:type_name -> trpc.media.common.Rect
	2,  // 2: trpc.media.personretrieval.FaceInfo.StampInfoSet:type_name -> trpc.media.personretrieval.StampInfo
	3,  // 3: trpc.media.personretrieval.FaceInfo.DetailStampInfoSet:type_name -> trpc.media.personretrieval.DetailStampInfo
	5,  // 4: trpc.media.personretrieval.PersonRetrievalTaskData.FaceInfoSet:type_name -> trpc.media.personretrieval.FaceInfo
	6,  // 5: trpc.media.personretrieval.DescribePersonRetrievalTaskDataResponse.TaskData:type_name -> trpc.media.personretrieval.PersonRetrievalTaskData
	14, // 6: trpc.media.personretrieval.DescribePersonRetrievalTaskDataResponse.TaskInfo:type_name -> trpc.media.common.TaskInfo
	2,  // 7: trpc.media.personretrieval.AppearMedia.StampInfoSet:type_name -> trpc.media.personretrieval.StampInfo
	9,  // 8: trpc.media.personretrieval.RetrievalImageFaces.AppearMediaSet:type_name -> trpc.media.personretrieval.AppearMedia
	13, // 9: trpc.media.personretrieval.RetrievalImageFaces.Rect:type_name -> trpc.media.common.Rect
	10, // 10: trpc.media.personretrieval.RetrievalImageResponse.FaceSet:type_name -> trpc.media.personretrieval.RetrievalImageFaces
	0,  // 11: trpc.media.personretrieval.PersonRetrieval.CreatePersonRetrievalTask:input_type -> trpc.media.personretrieval.CreatePersonRetrievalTaskRequest
	7,  // 12: trpc.media.personretrieval.PersonRetrieval.DescribePersonRetrievalTaskData:input_type -> trpc.media.personretrieval.DescribePersonRetrievalTaskDataRequest
	11, // 13: trpc.media.personretrieval.PersonRetrieval.RetrievalImage:input_type -> trpc.media.personretrieval.RetrievalImageRequest
	1,  // 14: trpc.media.personretrieval.PersonRetrieval.CreatePersonRetrievalTask:output_type -> trpc.media.personretrieval.CreatePersonRetrievalTaskResponse
	8,  // 15: trpc.media.personretrieval.PersonRetrieval.DescribePersonRetrievalTaskData:output_type -> trpc.media.personretrieval.DescribePersonRetrievalTaskDataResponse
	12, // 16: trpc.media.personretrieval.PersonRetrieval.RetrievalImage:output_type -> trpc.media.personretrieval.RetrievalImageResponse
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_person_retrieval_proto_init() }
func file_person_retrieval_proto_init() {
	if File_person_retrieval_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_person_retrieval_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePersonRetrievalTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_person_retrieval_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePersonRetrievalTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_person_retrieval_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StampInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_person_retrieval_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailStampInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_person_retrieval_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_person_retrieval_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_person_retrieval_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonRetrievalTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_person_retrieval_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePersonRetrievalTaskDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_person_retrieval_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePersonRetrievalTaskDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_person_retrieval_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_person_retrieval_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrievalImageFaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_person_retrieval_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrievalImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_person_retrieval_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrievalImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_person_retrieval_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_person_retrieval_proto_goTypes,
		DependencyIndexes: file_person_retrieval_proto_depIdxs,
		MessageInfos:      file_person_retrieval_proto_msgTypes,
	}.Build()
	File_person_retrieval_proto = out.File
	file_person_retrieval_proto_rawDesc = nil
	file_person_retrieval_proto_goTypes = nil
	file_person_retrieval_proto_depIdxs = nil
}
