// Code generated by trpc-go/trpc-go-cmdline v2.2.18. DO NOT EDIT.
// source: task.proto

package task

import (
	"context"
	"errors"
	"fmt"

	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/client"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/codec"
	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/http"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/server"
)

// START ======================================= Server Service Definition ======================================= START

// TaskService defines service.
type TaskService interface {
	// DescribeSupportedMediaTypes 任务管理
	DescribeSupportedMediaTypes(ctx context.Context, req *DescribeSupportedMediaTypesRequest, rsp *DescribeSupportedMediaTypesResponse) (err error) // @alias=/DescribeSupportedMediaTypes

	CreateTask(ctx context.Context, req *CreateTaskRequest, rsp *CreateTaskResponse) (err error) // @alias=/CreateTask

	DescribeTask(ctx context.Context, req *DescribeTaskRequest, rsp *DescribeTaskResponse) (err error) // @alias=/DescribeTask

	DescribeTasks(ctx context.Context, req *DescribeTasksRequest, rsp *DescribeTasksResponse) (err error) // @alias=/DescribeTasks

	StartTask(ctx context.Context, req *StartTaskRequest, rsp *StartTaskResponse) (err error) // @alias=/StartTask

	StartTasks(ctx context.Context, req *StartTasksRequest, rsp *StartTasksResponse) (err error) // @alias=/StartTasks

	StopTask(ctx context.Context, req *StopTaskRequest, rsp *StopTaskResponse) (err error) // @alias=/StopTask

	StopTasks(ctx context.Context, req *StopTasksRequest, rsp *StopTasksResponse) (err error) // @alias=/StopTasks

	DeleteTask(ctx context.Context, req *DeleteTaskRequest, rsp *DeleteTaskResponse) (err error) // @alias=/DeleteTask

	TopTask(ctx context.Context, req *TopTaskRequest, rsp *TopTaskResponse) (err error) // @alias=/TopTask

	DescribeTaskDetail(ctx context.Context, req *DescribeTaskDetailRequest, rsp *DescribeTaskDetailResponse) (err error) // @alias=/DescribeTaskDetail
	// ModifyTaskData 标签修改
	ModifyTaskData(ctx context.Context, req *ModifyTaskDataRequest, rsp *ModifyTaskDataResponse) (err error) // @alias=/ModifyTaskData
	// DescribeTaskListFile 数据统计相关
	DescribeTaskListFile(ctx context.Context, req *DescribeTaskListFileRequest, rsp *DescribeTaskListFileResponse) (err error) // @alias=/DescribeTaskListFile

	DescribeStatistics(ctx context.Context, req *DescribeStatisticsRequest, rsp *DescribeStatisticsResponse) (err error) // @alias=/DescribeStatistics
	// DescribeWorkflowProgress workflow
	DescribeWorkflowProgress(ctx context.Context, req *DescribeWorkflowProgressRequest, rsp *DescribeWorkflowProgressResponse) (err error) // @alias=/DescribeWorkflowProgress
	// StopTasksInner 内部使用接口
	StopTasksInner(ctx context.Context, req *StopTasksRequest, rsp *StopTasksResponse) (err error) // @alias=/StopTasksInner

	CheckWorkflowTemplate(ctx context.Context, req *CheckWorkflowTemplateRequest, rsp *CheckWorkflowTemplateResponse) (err error) // @alias=/CheckWorkflowTemplate
	// DescribeTagAnalyseInput 标签分析任务输入太大，不适合作为 ppl 参数传入，采用拉取方式
	DescribeTagAnalyseInput(ctx context.Context, req *DescribeTagAnalyseInputRequest, rsp *DescribeTagAnalyseInputResponse) (err error) // @alias=/DescribeTagAnalyseInput
}

func TaskService_DescribeSupportedMediaTypes_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeSupportedMediaTypesRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).DescribeSupportedMediaTypes(ctx, reqbody.(*DescribeSupportedMediaTypesRequest), rspbody.(*DescribeSupportedMediaTypesResponse))
	}

	rsp := &DescribeSupportedMediaTypesResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_CreateTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).CreateTask(ctx, reqbody.(*CreateTaskRequest), rspbody.(*CreateTaskResponse))
	}

	rsp := &CreateTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_DescribeTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).DescribeTask(ctx, reqbody.(*DescribeTaskRequest), rspbody.(*DescribeTaskResponse))
	}

	rsp := &DescribeTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_DescribeTasks_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeTasksRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).DescribeTasks(ctx, reqbody.(*DescribeTasksRequest), rspbody.(*DescribeTasksResponse))
	}

	rsp := &DescribeTasksResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_StartTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &StartTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).StartTask(ctx, reqbody.(*StartTaskRequest), rspbody.(*StartTaskResponse))
	}

	rsp := &StartTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_StartTasks_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &StartTasksRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).StartTasks(ctx, reqbody.(*StartTasksRequest), rspbody.(*StartTasksResponse))
	}

	rsp := &StartTasksResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_StopTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &StopTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).StopTask(ctx, reqbody.(*StopTaskRequest), rspbody.(*StopTaskResponse))
	}

	rsp := &StopTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_StopTasks_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &StopTasksRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).StopTasks(ctx, reqbody.(*StopTasksRequest), rspbody.(*StopTasksResponse))
	}

	rsp := &StopTasksResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_DeleteTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DeleteTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).DeleteTask(ctx, reqbody.(*DeleteTaskRequest), rspbody.(*DeleteTaskResponse))
	}

	rsp := &DeleteTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_TopTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &TopTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).TopTask(ctx, reqbody.(*TopTaskRequest), rspbody.(*TopTaskResponse))
	}

	rsp := &TopTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_DescribeTaskDetail_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeTaskDetailRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).DescribeTaskDetail(ctx, reqbody.(*DescribeTaskDetailRequest), rspbody.(*DescribeTaskDetailResponse))
	}

	rsp := &DescribeTaskDetailResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_ModifyTaskData_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ModifyTaskDataRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).ModifyTaskData(ctx, reqbody.(*ModifyTaskDataRequest), rspbody.(*ModifyTaskDataResponse))
	}

	rsp := &ModifyTaskDataResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_DescribeTaskListFile_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeTaskListFileRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).DescribeTaskListFile(ctx, reqbody.(*DescribeTaskListFileRequest), rspbody.(*DescribeTaskListFileResponse))
	}

	rsp := &DescribeTaskListFileResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_DescribeStatistics_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeStatisticsRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).DescribeStatistics(ctx, reqbody.(*DescribeStatisticsRequest), rspbody.(*DescribeStatisticsResponse))
	}

	rsp := &DescribeStatisticsResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_DescribeWorkflowProgress_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeWorkflowProgressRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).DescribeWorkflowProgress(ctx, reqbody.(*DescribeWorkflowProgressRequest), rspbody.(*DescribeWorkflowProgressResponse))
	}

	rsp := &DescribeWorkflowProgressResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_StopTasksInner_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &StopTasksRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).StopTasksInner(ctx, reqbody.(*StopTasksRequest), rspbody.(*StopTasksResponse))
	}

	rsp := &StopTasksResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_CheckWorkflowTemplate_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CheckWorkflowTemplateRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).CheckWorkflowTemplate(ctx, reqbody.(*CheckWorkflowTemplateRequest), rspbody.(*CheckWorkflowTemplateResponse))
	}

	rsp := &CheckWorkflowTemplateResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func TaskService_DescribeTagAnalyseInput_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeTagAnalyseInputRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskService).DescribeTagAnalyseInput(ctx, reqbody.(*DescribeTagAnalyseInputRequest), rspbody.(*DescribeTagAnalyseInputResponse))
	}

	rsp := &DescribeTagAnalyseInputResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// TaskServer_ServiceDesc descriptor for server.RegisterService.
var TaskServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.task.Task",
	HandlerType: ((*TaskService)(nil)),
	Methods: []server.Method{
		{
			Name: "/DescribeSupportedMediaTypes",
			Func: TaskService_DescribeSupportedMediaTypes_Handler,
		},
		{
			Name: "/CreateTask",
			Func: TaskService_CreateTask_Handler,
		},
		{
			Name: "/DescribeTask",
			Func: TaskService_DescribeTask_Handler,
		},
		{
			Name: "/DescribeTasks",
			Func: TaskService_DescribeTasks_Handler,
		},
		{
			Name: "/StartTask",
			Func: TaskService_StartTask_Handler,
		},
		{
			Name: "/StartTasks",
			Func: TaskService_StartTasks_Handler,
		},
		{
			Name: "/StopTask",
			Func: TaskService_StopTask_Handler,
		},
		{
			Name: "/StopTasks",
			Func: TaskService_StopTasks_Handler,
		},
		{
			Name: "/DeleteTask",
			Func: TaskService_DeleteTask_Handler,
		},
		{
			Name: "/TopTask",
			Func: TaskService_TopTask_Handler,
		},
		{
			Name: "/DescribeTaskDetail",
			Func: TaskService_DescribeTaskDetail_Handler,
		},
		{
			Name: "/ModifyTaskData",
			Func: TaskService_ModifyTaskData_Handler,
		},
		{
			Name: "/DescribeTaskListFile",
			Func: TaskService_DescribeTaskListFile_Handler,
		},
		{
			Name: "/DescribeStatistics",
			Func: TaskService_DescribeStatistics_Handler,
		},
		{
			Name: "/DescribeWorkflowProgress",
			Func: TaskService_DescribeWorkflowProgress_Handler,
		},
		{
			Name: "/StopTasksInner",
			Func: TaskService_StopTasksInner_Handler,
		},
		{
			Name: "/CheckWorkflowTemplate",
			Func: TaskService_CheckWorkflowTemplate_Handler,
		},
		{
			Name: "/DescribeTagAnalyseInput",
			Func: TaskService_DescribeTagAnalyseInput_Handler,
		},
		{
			Name: "/trpc.media.task.Task/DescribeSupportedMediaTypes",
			Func: TaskService_DescribeSupportedMediaTypes_Handler,
		},
		{
			Name: "/trpc.media.task.Task/CreateTask",
			Func: TaskService_CreateTask_Handler,
		},
		{
			Name: "/trpc.media.task.Task/DescribeTask",
			Func: TaskService_DescribeTask_Handler,
		},
		{
			Name: "/trpc.media.task.Task/DescribeTasks",
			Func: TaskService_DescribeTasks_Handler,
		},
		{
			Name: "/trpc.media.task.Task/StartTask",
			Func: TaskService_StartTask_Handler,
		},
		{
			Name: "/trpc.media.task.Task/StartTasks",
			Func: TaskService_StartTasks_Handler,
		},
		{
			Name: "/trpc.media.task.Task/StopTask",
			Func: TaskService_StopTask_Handler,
		},
		{
			Name: "/trpc.media.task.Task/StopTasks",
			Func: TaskService_StopTasks_Handler,
		},
		{
			Name: "/trpc.media.task.Task/DeleteTask",
			Func: TaskService_DeleteTask_Handler,
		},
		{
			Name: "/trpc.media.task.Task/TopTask",
			Func: TaskService_TopTask_Handler,
		},
		{
			Name: "/trpc.media.task.Task/DescribeTaskDetail",
			Func: TaskService_DescribeTaskDetail_Handler,
		},
		{
			Name: "/trpc.media.task.Task/ModifyTaskData",
			Func: TaskService_ModifyTaskData_Handler,
		},
		{
			Name: "/trpc.media.task.Task/DescribeTaskListFile",
			Func: TaskService_DescribeTaskListFile_Handler,
		},
		{
			Name: "/trpc.media.task.Task/DescribeStatistics",
			Func: TaskService_DescribeStatistics_Handler,
		},
		{
			Name: "/trpc.media.task.Task/DescribeWorkflowProgress",
			Func: TaskService_DescribeWorkflowProgress_Handler,
		},
		{
			Name: "/trpc.media.task.Task/StopTasksInner",
			Func: TaskService_StopTasksInner_Handler,
		},
		{
			Name: "/trpc.media.task.Task/CheckWorkflowTemplate",
			Func: TaskService_CheckWorkflowTemplate_Handler,
		},
		{
			Name: "/trpc.media.task.Task/DescribeTagAnalyseInput",
			Func: TaskService_DescribeTagAnalyseInput_Handler,
		},
	},
}

// RegisterTaskService registers service.
func RegisterTaskService(s server.Service, svr TaskService) {
	if err := s.Register(&TaskServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Task register error:%v", err))
	}
}

// TaskCallbackService defines service.
type TaskCallbackService interface {
	FinishedTask(ctx context.Context, req *FinishedTaskRequest, rsp *FinishedTaskResponse) (err error) // @alias=/FinishedTask
}

func TaskCallbackService_FinishedTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &FinishedTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(TaskCallbackService).FinishedTask(ctx, reqbody.(*FinishedTaskRequest), rspbody.(*FinishedTaskResponse))
	}

	rsp := &FinishedTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// TaskCallbackServer_ServiceDesc descriptor for server.RegisterService.
var TaskCallbackServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.task.TaskCallback",
	HandlerType: ((*TaskCallbackService)(nil)),
	Methods: []server.Method{
		{
			Name: "/FinishedTask",
			Func: TaskCallbackService_FinishedTask_Handler,
		},
		{
			Name: "/trpc.media.task.TaskCallback/FinishedTask",
			Func: TaskCallbackService_FinishedTask_Handler,
		},
	},
}

// RegisterTaskCallbackService registers service.
func RegisterTaskCallbackService(s server.Service, svr TaskCallbackService) {
	if err := s.Register(&TaskCallbackServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("TaskCallback register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedTask struct{}

// DescribeSupportedMediaTypes 任务管理
func (s *UnimplementedTask) DescribeSupportedMediaTypes(ctx context.Context, req *DescribeSupportedMediaTypesRequest, rsp *DescribeSupportedMediaTypesResponse) error {
	return errors.New("rpc DescribeSupportedMediaTypes of service Task is not implemented")
}
func (s *UnimplementedTask) CreateTask(ctx context.Context, req *CreateTaskRequest, rsp *CreateTaskResponse) error {
	return errors.New("rpc CreateTask of service Task is not implemented")
}
func (s *UnimplementedTask) DescribeTask(ctx context.Context, req *DescribeTaskRequest, rsp *DescribeTaskResponse) error {
	return errors.New("rpc DescribeTask of service Task is not implemented")
}
func (s *UnimplementedTask) DescribeTasks(ctx context.Context, req *DescribeTasksRequest, rsp *DescribeTasksResponse) error {
	return errors.New("rpc DescribeTasks of service Task is not implemented")
}
func (s *UnimplementedTask) StartTask(ctx context.Context, req *StartTaskRequest, rsp *StartTaskResponse) error {
	return errors.New("rpc StartTask of service Task is not implemented")
}
func (s *UnimplementedTask) StartTasks(ctx context.Context, req *StartTasksRequest, rsp *StartTasksResponse) error {
	return errors.New("rpc StartTasks of service Task is not implemented")
}
func (s *UnimplementedTask) StopTask(ctx context.Context, req *StopTaskRequest, rsp *StopTaskResponse) error {
	return errors.New("rpc StopTask of service Task is not implemented")
}
func (s *UnimplementedTask) StopTasks(ctx context.Context, req *StopTasksRequest, rsp *StopTasksResponse) error {
	return errors.New("rpc StopTasks of service Task is not implemented")
}
func (s *UnimplementedTask) DeleteTask(ctx context.Context, req *DeleteTaskRequest, rsp *DeleteTaskResponse) error {
	return errors.New("rpc DeleteTask of service Task is not implemented")
}
func (s *UnimplementedTask) TopTask(ctx context.Context, req *TopTaskRequest, rsp *TopTaskResponse) error {
	return errors.New("rpc TopTask of service Task is not implemented")
}
func (s *UnimplementedTask) DescribeTaskDetail(ctx context.Context, req *DescribeTaskDetailRequest, rsp *DescribeTaskDetailResponse) error {
	return errors.New("rpc DescribeTaskDetail of service Task is not implemented")
}

// ModifyTaskData 标签修改
func (s *UnimplementedTask) ModifyTaskData(ctx context.Context, req *ModifyTaskDataRequest, rsp *ModifyTaskDataResponse) error {
	return errors.New("rpc ModifyTaskData of service Task is not implemented")
}

// DescribeTaskListFile 数据统计相关
func (s *UnimplementedTask) DescribeTaskListFile(ctx context.Context, req *DescribeTaskListFileRequest, rsp *DescribeTaskListFileResponse) error {
	return errors.New("rpc DescribeTaskListFile of service Task is not implemented")
}
func (s *UnimplementedTask) DescribeStatistics(ctx context.Context, req *DescribeStatisticsRequest, rsp *DescribeStatisticsResponse) error {
	return errors.New("rpc DescribeStatistics of service Task is not implemented")
}

// DescribeWorkflowProgress workflow
func (s *UnimplementedTask) DescribeWorkflowProgress(ctx context.Context, req *DescribeWorkflowProgressRequest, rsp *DescribeWorkflowProgressResponse) error {
	return errors.New("rpc DescribeWorkflowProgress of service Task is not implemented")
}

// StopTasksInner 内部使用接口
func (s *UnimplementedTask) StopTasksInner(ctx context.Context, req *StopTasksRequest, rsp *StopTasksResponse) error {
	return errors.New("rpc StopTasksInner of service Task is not implemented")
}
func (s *UnimplementedTask) CheckWorkflowTemplate(ctx context.Context, req *CheckWorkflowTemplateRequest, rsp *CheckWorkflowTemplateResponse) error {
	return errors.New("rpc CheckWorkflowTemplate of service Task is not implemented")
}

// DescribeTagAnalyseInput 标签分析任务输入太大，不适合作为 ppl 参数传入，采用拉取方式
func (s *UnimplementedTask) DescribeTagAnalyseInput(ctx context.Context, req *DescribeTagAnalyseInputRequest, rsp *DescribeTagAnalyseInputResponse) error {
	return errors.New("rpc DescribeTagAnalyseInput of service Task is not implemented")
}

type UnimplementedTaskCallback struct{}

func (s *UnimplementedTaskCallback) FinishedTask(ctx context.Context, req *FinishedTaskRequest, rsp *FinishedTaskResponse) error {
	return errors.New("rpc FinishedTask of service TaskCallback is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// TaskClientProxy defines service client proxy
type TaskClientProxy interface {
	// DescribeSupportedMediaTypes 任务管理
	DescribeSupportedMediaTypes(ctx context.Context, req *DescribeSupportedMediaTypesRequest, opts ...client.Option) (rsp *DescribeSupportedMediaTypesResponse, err error) // @alias=/DescribeSupportedMediaTypes

	CreateTask(ctx context.Context, req *CreateTaskRequest, opts ...client.Option) (rsp *CreateTaskResponse, err error) // @alias=/CreateTask

	DescribeTask(ctx context.Context, req *DescribeTaskRequest, opts ...client.Option) (rsp *DescribeTaskResponse, err error) // @alias=/DescribeTask

	DescribeTasks(ctx context.Context, req *DescribeTasksRequest, opts ...client.Option) (rsp *DescribeTasksResponse, err error) // @alias=/DescribeTasks

	StartTask(ctx context.Context, req *StartTaskRequest, opts ...client.Option) (rsp *StartTaskResponse, err error) // @alias=/StartTask

	StartTasks(ctx context.Context, req *StartTasksRequest, opts ...client.Option) (rsp *StartTasksResponse, err error) // @alias=/StartTasks

	StopTask(ctx context.Context, req *StopTaskRequest, opts ...client.Option) (rsp *StopTaskResponse, err error) // @alias=/StopTask

	StopTasks(ctx context.Context, req *StopTasksRequest, opts ...client.Option) (rsp *StopTasksResponse, err error) // @alias=/StopTasks

	DeleteTask(ctx context.Context, req *DeleteTaskRequest, opts ...client.Option) (rsp *DeleteTaskResponse, err error) // @alias=/DeleteTask

	TopTask(ctx context.Context, req *TopTaskRequest, opts ...client.Option) (rsp *TopTaskResponse, err error) // @alias=/TopTask

	DescribeTaskDetail(ctx context.Context, req *DescribeTaskDetailRequest, opts ...client.Option) (rsp *DescribeTaskDetailResponse, err error) // @alias=/DescribeTaskDetail
	// ModifyTaskData 标签修改
	ModifyTaskData(ctx context.Context, req *ModifyTaskDataRequest, opts ...client.Option) (rsp *ModifyTaskDataResponse, err error) // @alias=/ModifyTaskData
	// DescribeTaskListFile 数据统计相关
	DescribeTaskListFile(ctx context.Context, req *DescribeTaskListFileRequest, opts ...client.Option) (rsp *DescribeTaskListFileResponse, err error) // @alias=/DescribeTaskListFile

	DescribeStatistics(ctx context.Context, req *DescribeStatisticsRequest, opts ...client.Option) (rsp *DescribeStatisticsResponse, err error) // @alias=/DescribeStatistics
	// DescribeWorkflowProgress workflow
	DescribeWorkflowProgress(ctx context.Context, req *DescribeWorkflowProgressRequest, opts ...client.Option) (rsp *DescribeWorkflowProgressResponse, err error) // @alias=/DescribeWorkflowProgress
	// StopTasksInner 内部使用接口
	StopTasksInner(ctx context.Context, req *StopTasksRequest, opts ...client.Option) (rsp *StopTasksResponse, err error) // @alias=/StopTasksInner

	CheckWorkflowTemplate(ctx context.Context, req *CheckWorkflowTemplateRequest, opts ...client.Option) (rsp *CheckWorkflowTemplateResponse, err error) // @alias=/CheckWorkflowTemplate
	// DescribeTagAnalyseInput 标签分析任务输入太大，不适合作为 ppl 参数传入，采用拉取方式
	DescribeTagAnalyseInput(ctx context.Context, req *DescribeTagAnalyseInputRequest, opts ...client.Option) (rsp *DescribeTagAnalyseInputResponse, err error) // @alias=/DescribeTagAnalyseInput
}

type TaskClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewTaskClientProxy = func(opts ...client.Option) TaskClientProxy {
	return &TaskClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *TaskClientProxyImpl) DescribeSupportedMediaTypes(ctx context.Context, req *DescribeSupportedMediaTypesRequest, opts ...client.Option) (*DescribeSupportedMediaTypesResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeSupportedMediaTypes")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("DescribeSupportedMediaTypes")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeSupportedMediaTypesResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) CreateTask(ctx context.Context, req *CreateTaskRequest, opts ...client.Option) (*CreateTaskResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/CreateTask")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("CreateTask")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateTaskResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) DescribeTask(ctx context.Context, req *DescribeTaskRequest, opts ...client.Option) (*DescribeTaskResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeTask")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("DescribeTask")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeTaskResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) DescribeTasks(ctx context.Context, req *DescribeTasksRequest, opts ...client.Option) (*DescribeTasksResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeTasks")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("DescribeTasks")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeTasksResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) StartTask(ctx context.Context, req *StartTaskRequest, opts ...client.Option) (*StartTaskResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/StartTask")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("StartTask")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &StartTaskResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) StartTasks(ctx context.Context, req *StartTasksRequest, opts ...client.Option) (*StartTasksResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/StartTasks")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("StartTasks")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &StartTasksResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) StopTask(ctx context.Context, req *StopTaskRequest, opts ...client.Option) (*StopTaskResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/StopTask")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("StopTask")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &StopTaskResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) StopTasks(ctx context.Context, req *StopTasksRequest, opts ...client.Option) (*StopTasksResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/StopTasks")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("StopTasks")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &StopTasksResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) DeleteTask(ctx context.Context, req *DeleteTaskRequest, opts ...client.Option) (*DeleteTaskResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DeleteTask")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("DeleteTask")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DeleteTaskResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) TopTask(ctx context.Context, req *TopTaskRequest, opts ...client.Option) (*TopTaskResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/TopTask")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("TopTask")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &TopTaskResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) DescribeTaskDetail(ctx context.Context, req *DescribeTaskDetailRequest, opts ...client.Option) (*DescribeTaskDetailResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeTaskDetail")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("DescribeTaskDetail")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeTaskDetailResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) ModifyTaskData(ctx context.Context, req *ModifyTaskDataRequest, opts ...client.Option) (*ModifyTaskDataResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/ModifyTaskData")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("ModifyTaskData")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ModifyTaskDataResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) DescribeTaskListFile(ctx context.Context, req *DescribeTaskListFileRequest, opts ...client.Option) (*DescribeTaskListFileResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeTaskListFile")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("DescribeTaskListFile")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeTaskListFileResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) DescribeStatistics(ctx context.Context, req *DescribeStatisticsRequest, opts ...client.Option) (*DescribeStatisticsResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeStatistics")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("DescribeStatistics")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeStatisticsResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) DescribeWorkflowProgress(ctx context.Context, req *DescribeWorkflowProgressRequest, opts ...client.Option) (*DescribeWorkflowProgressResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeWorkflowProgress")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("DescribeWorkflowProgress")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeWorkflowProgressResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) StopTasksInner(ctx context.Context, req *StopTasksRequest, opts ...client.Option) (*StopTasksResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/StopTasksInner")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("StopTasksInner")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &StopTasksResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) CheckWorkflowTemplate(ctx context.Context, req *CheckWorkflowTemplateRequest, opts ...client.Option) (*CheckWorkflowTemplateResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/CheckWorkflowTemplate")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("CheckWorkflowTemplate")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CheckWorkflowTemplateResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *TaskClientProxyImpl) DescribeTagAnalyseInput(ctx context.Context, req *DescribeTagAnalyseInputRequest, opts ...client.Option) (*DescribeTagAnalyseInputResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeTagAnalyseInput")
	msg.WithCalleeServiceName(TaskServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("Task")
	msg.WithCalleeMethod("DescribeTagAnalyseInput")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeTagAnalyseInputResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// TaskCallbackClientProxy defines service client proxy
type TaskCallbackClientProxy interface {
	FinishedTask(ctx context.Context, req *FinishedTaskRequest, opts ...client.Option) (rsp *FinishedTaskResponse, err error) // @alias=/FinishedTask
}

type TaskCallbackClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewTaskCallbackClientProxy = func(opts ...client.Option) TaskCallbackClientProxy {
	return &TaskCallbackClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *TaskCallbackClientProxyImpl) FinishedTask(ctx context.Context, req *FinishedTaskRequest, opts ...client.Option) (*FinishedTaskResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/FinishedTask")
	msg.WithCalleeServiceName(TaskCallbackServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("task")
	msg.WithCalleeService("TaskCallback")
	msg.WithCalleeMethod("FinishedTask")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &FinishedTaskResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
