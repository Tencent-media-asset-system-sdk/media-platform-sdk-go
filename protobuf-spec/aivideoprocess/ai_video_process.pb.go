// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: ai_video_process.proto

package aivideoprocess

import (
	reflect "reflect"
	sync "sync"

	apicommon "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/apicommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoProcessType int32

const (
	VideoProcessType_AIUnknown         VideoProcessType = 0
	VideoProcessType_AISuperResolution VideoProcessType = 1000
	VideoProcessType_AICodec           VideoProcessType = 1001
	VideoProcessType_AIOldRepair       VideoProcessType = 1002
	VideoProcessType_AITranscode       VideoProcessType = 1003
	VideoProcessType_AICrop            VideoProcessType = 1004
)

// Enum value maps for VideoProcessType.
var (
	VideoProcessType_name = map[int32]string{
		0:    "AIUnknown",
		1000: "AISuperResolution",
		1001: "AICodec",
		1002: "AIOldRepair",
		1003: "AITranscode",
		1004: "AICrop",
	}
	VideoProcessType_value = map[string]int32{
		"AIUnknown":         0,
		"AISuperResolution": 1000,
		"AICodec":           1001,
		"AIOldRepair":       1002,
		"AITranscode":       1003,
		"AICrop":            1004,
	}
)

func (x VideoProcessType) Enum() *VideoProcessType {
	p := new(VideoProcessType)
	*p = x
	return p
}

func (x VideoProcessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoProcessType) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_video_process_proto_enumTypes[0].Descriptor()
}

func (VideoProcessType) Type() protoreflect.EnumType {
	return &file_ai_video_process_proto_enumTypes[0]
}

func (x VideoProcessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoProcessType.Descriptor instead.
func (VideoProcessType) EnumDescriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{0}
}

type PriorityLevel int32

const (
	PriorityLevel_PriorityMin    PriorityLevel = 0
	PriorityLevel_PriorityLow    PriorityLevel = 10
	PriorityLevel_PriorityNormal PriorityLevel = 20
	PriorityLevel_PriorityHigh   PriorityLevel = 30
	PriorityLevel_PriorityMax    PriorityLevel = 99
)

// Enum value maps for PriorityLevel.
var (
	PriorityLevel_name = map[int32]string{
		0:  "PriorityMin",
		10: "PriorityLow",
		20: "PriorityNormal",
		30: "PriorityHigh",
		99: "PriorityMax",
	}
	PriorityLevel_value = map[string]int32{
		"PriorityMin":    0,
		"PriorityLow":    10,
		"PriorityNormal": 20,
		"PriorityHigh":   30,
		"PriorityMax":    99,
	}
)

func (x PriorityLevel) Enum() *PriorityLevel {
	p := new(PriorityLevel)
	*p = x
	return p
}

func (x PriorityLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriorityLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_video_process_proto_enumTypes[1].Descriptor()
}

func (PriorityLevel) Type() protoreflect.EnumType {
	return &file_ai_video_process_proto_enumTypes[1]
}

func (x PriorityLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriorityLevel.Descriptor instead.
func (PriorityLevel) EnumDescriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{1}
}

type CommonProcessOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputVideoCodec string `protobuf:"bytes,1,opt,name=OutputVideoCodec,proto3" json:"OutputVideoCodec,omitempty"` // 输出视频编码格式，可选，字符串，"avc1"(264) "hvc1"(265) "vp9"等 默认"avc1"
}

func (x *CommonProcessOption) Reset() {
	*x = CommonProcessOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonProcessOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonProcessOption) ProtoMessage() {}

func (x *CommonProcessOption) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonProcessOption.ProtoReflect.Descriptor instead.
func (*CommonProcessOption) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{0}
}

func (x *CommonProcessOption) GetOutputVideoCodec() string {
	if x != nil {
		return x.OutputVideoCodec
	}
	return ""
}

type VideoRepairOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemporalDenoise string `protobuf:"bytes,1,opt,name=TemporalDenoise,proto3" json:"TemporalDenoise,omitempty"` //时域降噪，可选， ["auto", "off", "on"] 默认auto
	ArtifactRemoval string `protobuf:"bytes,2,opt,name=ArtifactRemoval,proto3" json:"ArtifactRemoval,omitempty"` // 去压缩失真设置，可选，["off", "on", "auto"], 默认auto
	Sharpen         string `protobuf:"bytes,3,opt,name=Sharpen,proto3" json:"Sharpen,omitempty"`                 // 细节增强, 可选，["off", "on"], 默认on
	SharpenLevel    int32  `protobuf:"varint,4,opt,name=SharpenLevel,proto3" json:"SharpenLevel,omitempty"`      // 细节增强强度, 可选, [-1, 10], 默认-1,代表自动选择强度，0-10代表强度，数值越大，强度越大
	LumaDescratch   string `protobuf:"bytes,5,opt,name=LumaDescratch,proto3" json:"LumaDescratch,omitempty"`     //亮度去划痕，可选， ["auto", "off", "dense"，"sparse"] 默认off, dense为重划痕模型，sparse为轻划痕模型
	ChromaDescratch string `protobuf:"bytes,6,opt,name=ChromaDescratch,proto3" json:"ChromaDescratch,omitempty"` //色彩去划痕，可选， ["auto", "off", "dense"，"sparse"] 默认off
}

func (x *VideoRepairOption) Reset() {
	*x = VideoRepairOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoRepairOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoRepairOption) ProtoMessage() {}

func (x *VideoRepairOption) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoRepairOption.ProtoReflect.Descriptor instead.
func (*VideoRepairOption) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{1}
}

func (x *VideoRepairOption) GetTemporalDenoise() string {
	if x != nil {
		return x.TemporalDenoise
	}
	return ""
}

func (x *VideoRepairOption) GetArtifactRemoval() string {
	if x != nil {
		return x.ArtifactRemoval
	}
	return ""
}

func (x *VideoRepairOption) GetSharpen() string {
	if x != nil {
		return x.Sharpen
	}
	return ""
}

func (x *VideoRepairOption) GetSharpenLevel() int32 {
	if x != nil {
		return x.SharpenLevel
	}
	return 0
}

func (x *VideoRepairOption) GetLumaDescratch() string {
	if x != nil {
		return x.LumaDescratch
	}
	return ""
}

func (x *VideoRepairOption) GetChromaDescratch() string {
	if x != nil {
		return x.ChromaDescratch
	}
	return ""
}

type SuperResolutionOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserved string `protobuf:"bytes,1,opt,name=Reserved,proto3" json:"Reserved,omitempty"` // 预留字段
}

func (x *SuperResolutionOption) Reset() {
	*x = SuperResolutionOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperResolutionOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperResolutionOption) ProtoMessage() {}

func (x *SuperResolutionOption) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperResolutionOption.ProtoReflect.Descriptor instead.
func (*SuperResolutionOption) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{2}
}

func (x *SuperResolutionOption) GetReserved() string {
	if x != nil {
		return x.Reserved
	}
	return ""
}

type VideoProcessOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuminanceColorEnhanceLevel int32  `protobuf:"varint,1,opt,name=LuminanceColorEnhanceLevel,proto3" json:"LuminanceColorEnhanceLevel,omitempty"` // 亮度和色彩增强参数，0-10
	SDR2HDR                    int32  `protobuf:"varint,2,opt,name=SDR2HDR,proto3" json:"SDR2HDR,omitempty"`                                       // SDR转HDR开关，0-1
	FrameRate                  int32  `protobuf:"varint,3,opt,name=FrameRate,proto3" json:"FrameRate,omitempty"`                                   // 帧数1-120，0为原视频帧率
	HDRScheme                  string `protobuf:"bytes,4,opt,name=HDRScheme,proto3" json:"HDRScheme,omitempty"`                                    // SDR转HDR的方案的选择，可选，字符串，["HDR10"、"HLG"]，默认HLG
	OutputWidth                int32  `protobuf:"varint,5,opt,name=OutputWidth,proto3" json:"OutputWidth,omitempty"`                               // 输出视频的高
	OutputHeight               int32  `protobuf:"varint,6,opt,name=OutputHeight,proto3" json:"OutputHeight,omitempty"`                             // 输出视频的宽
	OutputVideoCodec           string `protobuf:"bytes,7,opt,name=OutputVideoCodec,proto3" json:"OutputVideoCodec,omitempty"`                      // 输出视频编码格式，可选，字符串，"avc1"(264) "hvc1"(265) "vp9"等 默认avc1
	SR                         string `protobuf:"bytes,8,opt,name=SR,proto3" json:"SR,omitempty"`                                                  // 超分设置, 可选，["auto", "srnet", "vsrnet", "ytsrnet", "off"] 默认auto
	FRUC                       string `protobuf:"bytes,9,opt,name=FRUC,proto3" json:"FRUC,omitempty"`                                              // 倍帧开关, 可选，["off", "on", "auto"], 默认auto
	FRUCFPSRatio               int32  `protobuf:"varint,10,opt,name=FRUCFPSRatio,proto3" json:"FRUCFPSRatio,omitempty"`                            // 倍帧帧率, 可选, 正整数, 0-10
	OutputResolutionScheme     string `protobuf:"bytes,11,opt,name=OutputResolutionScheme,proto3" json:"OutputResolutionScheme,omitempty"`         // 输出分辨率策略, 可选, ["width_height"， "long_short_side"], 默认width_height
	OutputVideoLongSide        int32  `protobuf:"varint,12,opt,name=OutputVideoLongSide,proto3" json:"OutputVideoLongSide,omitempty"`              // 输出视频的长边，可选，取值范围[0, 7680]，必须为偶数。默认与输入视频的长边保持一致
	OutputVideoShortSide       int32  `protobuf:"varint,13,opt,name=OutputVideoShortSide,proto3" json:"OutputVideoShortSide,omitempty"`            // 输出视频的短边，可选，取值范围[0, 4320]，必须为偶数。默认与输入视频的短边保持一致
	// 设置是否使用padding(加黑边)的形式来保证输出内容的宽高比不变, 可选，["auto", "off"], 默认auto
	OutputPadding            string `protobuf:"bytes,14,opt,name=OutputPadding,proto3" json:"OutputPadding,omitempty"`
	OutputVideoPeakBitrate   int32  `protobuf:"varint,15,opt,name=OutputVideoPeakBitrate,proto3" json:"OutputVideoPeakBitrate,omitempty"`     // 输出视频的峰值码率，可选，范围[10, 200000]，单位Kbps，默认不设置峰值码率
	OutputVideoMaxAvgBitrate int32  `protobuf:"varint,16,opt,name=OutputVideoMaxAvgBitrate,proto3" json:"OutputVideoMaxAvgBitrate,omitempty"` // 输出视频最大平均码率，可选，范围[10，200000]，单位Kbps，默认输入视频码率
	VSRNetModelType          string `protobuf:"bytes,17,opt,name=VSRNetModelType,proto3" json:"VSRNetModelType,omitempty"`                    // 模型类别设置, 可选，["lq", "hq"], 默认hq
	HDRPreset                int32  `protobuf:"varint,18,opt,name=HDRPreset,proto3" json:"HDRPreset,omitempty"`                               // SDR转HDR的色彩和对比度方案, 可选值为[0,3]
	TemporalDenoise          string `protobuf:"bytes,21,opt,name=TemporalDenoise,proto3" json:"TemporalDenoise,omitempty"`                    //时域降噪，可选， ["auto", "off", "on"] 默认auto
	ArtifactRemoval          string `protobuf:"bytes,22,opt,name=ArtifactRemoval,proto3" json:"ArtifactRemoval,omitempty"`                    // 去压缩失真设置，可选，["off", "on", "auto"], 默认auto
	Sharpen                  string `protobuf:"bytes,23,opt,name=Sharpen,proto3" json:"Sharpen,omitempty"`                                    // 细节增强, 可选，["off", "on"], 默认on
	SharpenLevel             int32  `protobuf:"varint,24,opt,name=SharpenLevel,proto3" json:"SharpenLevel,omitempty"`                         // 细节增强强度, 可选, [-1, 10], 默认-1,代表自动选择强度，0-10代表强度，数值越大，强度越大
	LumaDescratch            string `protobuf:"bytes,25,opt,name=LumaDescratch,proto3" json:"LumaDescratch,omitempty"`                        //亮度去划痕，可选， ["auto", "off", "dense"，"sparse"] 默认off, dense为重划痕模型，sparse为轻划痕模型
	ChromaDescratch          string `protobuf:"bytes,26,opt,name=ChromaDescratch,proto3" json:"ChromaDescratch,omitempty"`                    //色彩去划痕，可选， ["auto", "off", "dense"，"sparse"] 默认off
	// 横竖屏选项
	OutputRatios            []int32 `protobuf:"varint,31,rep,packed,name=OutputRatios,proto3" json:"OutputRatios,omitempty"`                // [9, 16]
	OutputWithCaptionDetect bool    `protobuf:"varint,32,opt,name=OutputWithCaptionDetect,proto3" json:"OutputWithCaptionDetect,omitempty"` // true
}

func (x *VideoProcessOption) Reset() {
	*x = VideoProcessOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoProcessOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoProcessOption) ProtoMessage() {}

func (x *VideoProcessOption) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoProcessOption.ProtoReflect.Descriptor instead.
func (*VideoProcessOption) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{3}
}

func (x *VideoProcessOption) GetLuminanceColorEnhanceLevel() int32 {
	if x != nil {
		return x.LuminanceColorEnhanceLevel
	}
	return 0
}

func (x *VideoProcessOption) GetSDR2HDR() int32 {
	if x != nil {
		return x.SDR2HDR
	}
	return 0
}

func (x *VideoProcessOption) GetFrameRate() int32 {
	if x != nil {
		return x.FrameRate
	}
	return 0
}

func (x *VideoProcessOption) GetHDRScheme() string {
	if x != nil {
		return x.HDRScheme
	}
	return ""
}

func (x *VideoProcessOption) GetOutputWidth() int32 {
	if x != nil {
		return x.OutputWidth
	}
	return 0
}

func (x *VideoProcessOption) GetOutputHeight() int32 {
	if x != nil {
		return x.OutputHeight
	}
	return 0
}

func (x *VideoProcessOption) GetOutputVideoCodec() string {
	if x != nil {
		return x.OutputVideoCodec
	}
	return ""
}

func (x *VideoProcessOption) GetSR() string {
	if x != nil {
		return x.SR
	}
	return ""
}

func (x *VideoProcessOption) GetFRUC() string {
	if x != nil {
		return x.FRUC
	}
	return ""
}

func (x *VideoProcessOption) GetFRUCFPSRatio() int32 {
	if x != nil {
		return x.FRUCFPSRatio
	}
	return 0
}

func (x *VideoProcessOption) GetOutputResolutionScheme() string {
	if x != nil {
		return x.OutputResolutionScheme
	}
	return ""
}

func (x *VideoProcessOption) GetOutputVideoLongSide() int32 {
	if x != nil {
		return x.OutputVideoLongSide
	}
	return 0
}

func (x *VideoProcessOption) GetOutputVideoShortSide() int32 {
	if x != nil {
		return x.OutputVideoShortSide
	}
	return 0
}

func (x *VideoProcessOption) GetOutputPadding() string {
	if x != nil {
		return x.OutputPadding
	}
	return ""
}

func (x *VideoProcessOption) GetOutputVideoPeakBitrate() int32 {
	if x != nil {
		return x.OutputVideoPeakBitrate
	}
	return 0
}

func (x *VideoProcessOption) GetOutputVideoMaxAvgBitrate() int32 {
	if x != nil {
		return x.OutputVideoMaxAvgBitrate
	}
	return 0
}

func (x *VideoProcessOption) GetVSRNetModelType() string {
	if x != nil {
		return x.VSRNetModelType
	}
	return ""
}

func (x *VideoProcessOption) GetHDRPreset() int32 {
	if x != nil {
		return x.HDRPreset
	}
	return 0
}

func (x *VideoProcessOption) GetTemporalDenoise() string {
	if x != nil {
		return x.TemporalDenoise
	}
	return ""
}

func (x *VideoProcessOption) GetArtifactRemoval() string {
	if x != nil {
		return x.ArtifactRemoval
	}
	return ""
}

func (x *VideoProcessOption) GetSharpen() string {
	if x != nil {
		return x.Sharpen
	}
	return ""
}

func (x *VideoProcessOption) GetSharpenLevel() int32 {
	if x != nil {
		return x.SharpenLevel
	}
	return 0
}

func (x *VideoProcessOption) GetLumaDescratch() string {
	if x != nil {
		return x.LumaDescratch
	}
	return ""
}

func (x *VideoProcessOption) GetChromaDescratch() string {
	if x != nil {
		return x.ChromaDescratch
	}
	return ""
}

func (x *VideoProcessOption) GetOutputRatios() []int32 {
	if x != nil {
		return x.OutputRatios
	}
	return nil
}

func (x *VideoProcessOption) GetOutputWithCaptionDetect() bool {
	if x != nil {
		return x.OutputWithCaptionDetect
	}
	return false
}

type AIVideoDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId     string  `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`         // 原视频ID
	VideoURL    string  `protobuf:"bytes,2,opt,name=VideoURL,proto3" json:"VideoURL,omitempty"`       // 原视频URL地址
	VideoWebURL string  `protobuf:"bytes,3,opt,name=VideoWebURL,proto3" json:"VideoWebURL,omitempty"` // 原视频Web预览地址
	Height      int32   `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`          // 纵向分辨率
	Width       int32   `protobuf:"varint,5,opt,name=Width,proto3" json:"Width,omitempty"`            // 横向分辨率
	FPS         float32 `protobuf:"fixed32,6,opt,name=FPS,proto3" json:"FPS,omitempty"`               // fps
	BitRate     float32 `protobuf:"fixed32,7,opt,name=BitRate,proto3" json:"BitRate,omitempty"`       // 码率bps, bit per second
	Size        float32 `protobuf:"fixed32,8,opt,name=Size,proto3" json:"Size,omitempty"`             // 大小，单位MB
	VMAF        float32 `protobuf:"fixed32,9,opt,name=VMAF,proto3" json:"VMAF,omitempty"`             // VMAF
	PSNR        float32 `protobuf:"fixed32,10,opt,name=PSNR,proto3" json:"PSNR,omitempty"`            // PSNR
	SSIM        float32 `protobuf:"fixed32,11,opt,name=SSIM,proto3" json:"SSIM,omitempty"`            // SSIM
	LPIPS       float32 `protobuf:"fixed32,12,opt,name=LPIPS,proto3" json:"LPIPS,omitempty"`          // LPIPS
	ImageUrl    string  `protobuf:"bytes,13,opt,name=ImageUrl,proto3" json:"ImageUrl,omitempty"`      // 视频封面图片地址
	M3UCOSPath  string  `protobuf:"bytes,14,opt,name=M3UCOSPath,proto3" json:"M3UCOSPath,omitempty"`
	BandWidth   int32   `protobuf:"varint,15,opt,name=BandWidth,proto3" json:"BandWidth,omitempty"`
	VideoCodec  string  `protobuf:"bytes,16,opt,name=VideoCodec,proto3" json:"VideoCodec,omitempty"`
}

func (x *AIVideoDetail) Reset() {
	*x = AIVideoDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIVideoDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIVideoDetail) ProtoMessage() {}

func (x *AIVideoDetail) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIVideoDetail.ProtoReflect.Descriptor instead.
func (*AIVideoDetail) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{4}
}

func (x *AIVideoDetail) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *AIVideoDetail) GetVideoURL() string {
	if x != nil {
		return x.VideoURL
	}
	return ""
}

func (x *AIVideoDetail) GetVideoWebURL() string {
	if x != nil {
		return x.VideoWebURL
	}
	return ""
}

func (x *AIVideoDetail) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *AIVideoDetail) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *AIVideoDetail) GetFPS() float32 {
	if x != nil {
		return x.FPS
	}
	return 0
}

func (x *AIVideoDetail) GetBitRate() float32 {
	if x != nil {
		return x.BitRate
	}
	return 0
}

func (x *AIVideoDetail) GetSize() float32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AIVideoDetail) GetVMAF() float32 {
	if x != nil {
		return x.VMAF
	}
	return 0
}

func (x *AIVideoDetail) GetPSNR() float32 {
	if x != nil {
		return x.PSNR
	}
	return 0
}

func (x *AIVideoDetail) GetSSIM() float32 {
	if x != nil {
		return x.SSIM
	}
	return 0
}

func (x *AIVideoDetail) GetLPIPS() float32 {
	if x != nil {
		return x.LPIPS
	}
	return 0
}

func (x *AIVideoDetail) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *AIVideoDetail) GetM3UCOSPath() string {
	if x != nil {
		return x.M3UCOSPath
	}
	return ""
}

func (x *AIVideoDetail) GetBandWidth() int32 {
	if x != nil {
		return x.BandWidth
	}
	return 0
}

func (x *AIVideoDetail) GetVideoCodec() string {
	if x != nil {
		return x.VideoCodec
	}
	return ""
}

type AIVideoProcessTaskDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceVideoDetail *AIVideoDetail `protobuf:"bytes,1,opt,name=SourceVideoDetail,proto3" json:"SourceVideoDetail,omitempty"` // 原视频详细结果
	TargetVideoDetail *AIVideoDetail `protobuf:"bytes,2,opt,name=TargetVideoDetail,proto3" json:"TargetVideoDetail,omitempty"` // 转换后的视频的详细结果
}

func (x *AIVideoProcessTaskDetail) Reset() {
	*x = AIVideoProcessTaskDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIVideoProcessTaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIVideoProcessTaskDetail) ProtoMessage() {}

func (x *AIVideoProcessTaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIVideoProcessTaskDetail.ProtoReflect.Descriptor instead.
func (*AIVideoProcessTaskDetail) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{5}
}

func (x *AIVideoProcessTaskDetail) GetSourceVideoDetail() *AIVideoDetail {
	if x != nil {
		return x.SourceVideoDetail
	}
	return nil
}

func (x *AIVideoProcessTaskDetail) GetTargetVideoDetail() *AIVideoDetail {
	if x != nil {
		return x.TargetVideoDetail
	}
	return nil
}

type COSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket    string `protobuf:"bytes,1,opt,name=Bucket,proto3" json:"Bucket,omitempty"`
	Region    string `protobuf:"bytes,2,opt,name=Region,proto3" json:"Region,omitempty"`
	SecretId  string `protobuf:"bytes,3,opt,name=SecretId,proto3" json:"SecretId,omitempty"`
	SecretKey string `protobuf:"bytes,4,opt,name=SecretKey,proto3" json:"SecretKey,omitempty"`
}

func (x *COSConfig) Reset() {
	*x = COSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *COSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*COSConfig) ProtoMessage() {}

func (x *COSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use COSConfig.ProtoReflect.Descriptor instead.
func (*COSConfig) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{6}
}

func (x *COSConfig) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *COSConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *COSConfig) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *COSConfig) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type CreateAIVideoProcessTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId            string              `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	TaskName           string              `protobuf:"bytes,4,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	CallbackURL        string              `protobuf:"bytes,5,opt,name=CallbackURL,proto3" json:"CallbackURL,omitempty"`
	ProcessType        VideoProcessType    `protobuf:"varint,8,opt,name=ProcessType,proto3,enum=trpc.media.aivideoprocess.VideoProcessType" json:"ProcessType,omitempty"`
	VideoProcessOption *VideoProcessOption `protobuf:"bytes,9,opt,name=VideoProcessOption,proto3" json:"VideoProcessOption,omitempty"` // 视频处理参数
	InputCOSPath       string              `protobuf:"bytes,12,opt,name=InputCOSPath,proto3" json:"InputCOSPath,omitempty"`
	OutputCOSDirectory string              `protobuf:"bytes,13,opt,name=OutputCOSDirectory,proto3" json:"OutputCOSDirectory,omitempty"`
	CosConfig          *COSConfig          `protobuf:"bytes,14,opt,name=CosConfig,proto3" json:"CosConfig,omitempty"`
	TaskPriority       int32               `protobuf:"varint,15,opt,name=TaskPriority,proto3" json:"TaskPriority,omitempty"`
}

func (x *CreateAIVideoProcessTaskRequest) Reset() {
	*x = CreateAIVideoProcessTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAIVideoProcessTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAIVideoProcessTaskRequest) ProtoMessage() {}

func (x *CreateAIVideoProcessTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAIVideoProcessTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateAIVideoProcessTaskRequest) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{7}
}

func (x *CreateAIVideoProcessTaskRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *CreateAIVideoProcessTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *CreateAIVideoProcessTaskRequest) GetCallbackURL() string {
	if x != nil {
		return x.CallbackURL
	}
	return ""
}

func (x *CreateAIVideoProcessTaskRequest) GetProcessType() VideoProcessType {
	if x != nil {
		return x.ProcessType
	}
	return VideoProcessType_AIUnknown
}

func (x *CreateAIVideoProcessTaskRequest) GetVideoProcessOption() *VideoProcessOption {
	if x != nil {
		return x.VideoProcessOption
	}
	return nil
}

func (x *CreateAIVideoProcessTaskRequest) GetInputCOSPath() string {
	if x != nil {
		return x.InputCOSPath
	}
	return ""
}

func (x *CreateAIVideoProcessTaskRequest) GetOutputCOSDirectory() string {
	if x != nil {
		return x.OutputCOSDirectory
	}
	return ""
}

func (x *CreateAIVideoProcessTaskRequest) GetCosConfig() *COSConfig {
	if x != nil {
		return x.CosConfig
	}
	return nil
}

func (x *CreateAIVideoProcessTaskRequest) GetTaskPriority() int32 {
	if x != nil {
		return x.TaskPriority
	}
	return 0
}

type CreateAIVideoProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId   string     `protobuf:"bytes,2,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	TaskData *anypb.Any `protobuf:"bytes,4,opt,name=TaskData,proto3" json:"TaskData,omitempty"`
}

func (x *CreateAIVideoProcessResponse) Reset() {
	*x = CreateAIVideoProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAIVideoProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAIVideoProcessResponse) ProtoMessage() {}

func (x *CreateAIVideoProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAIVideoProcessResponse.ProtoReflect.Descriptor instead.
func (*CreateAIVideoProcessResponse) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{8}
}

func (x *CreateAIVideoProcessResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CreateAIVideoProcessResponse) GetTaskData() *anypb.Any {
	if x != nil {
		return x.TaskData
	}
	return nil
}

type DescribeAIVideoProcessTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber int32     `protobuf:"varint,1,opt,name=PageNumber,proto3" json:"PageNumber,omitempty"`
	PageSize   int32     `protobuf:"varint,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	FilterBy   *FilterBy `protobuf:"bytes,3,opt,name=FilterBy,proto3" json:"FilterBy,omitempty"`
	SortBy     *SortBy   `protobuf:"bytes,4,opt,name=SortBy,proto3" json:"SortBy,omitempty"`
}

func (x *DescribeAIVideoProcessTasksRequest) Reset() {
	*x = DescribeAIVideoProcessTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAIVideoProcessTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAIVideoProcessTasksRequest) ProtoMessage() {}

func (x *DescribeAIVideoProcessTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAIVideoProcessTasksRequest.ProtoReflect.Descriptor instead.
func (*DescribeAIVideoProcessTasksRequest) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{9}
}

func (x *DescribeAIVideoProcessTasksRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *DescribeAIVideoProcessTasksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribeAIVideoProcessTasksRequest) GetFilterBy() *FilterBy {
	if x != nil {
		return x.FilterBy
	}
	return nil
}

func (x *DescribeAIVideoProcessTasksRequest) GetSortBy() *SortBy {
	if x != nil {
		return x.SortBy
	}
	return nil
}

type DescribeAIVideoProcessTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount  int32                     `protobuf:"varint,2,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	TaskInfoSet []*AIVideoProcessTaskInfo `protobuf:"bytes,3,rep,name=TaskInfoSet,proto3" json:"TaskInfoSet,omitempty"`
}

func (x *DescribeAIVideoProcessTasksResponse) Reset() {
	*x = DescribeAIVideoProcessTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAIVideoProcessTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAIVideoProcessTasksResponse) ProtoMessage() {}

func (x *DescribeAIVideoProcessTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAIVideoProcessTasksResponse.ProtoReflect.Descriptor instead.
func (*DescribeAIVideoProcessTasksResponse) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{10}
}

func (x *DescribeAIVideoProcessTasksResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *DescribeAIVideoProcessTasksResponse) GetTaskInfoSet() []*AIVideoProcessTaskInfo {
	if x != nil {
		return x.TaskInfoSet
	}
	return nil
}

type AIVideoProcessTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         string  `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	TaskName       string  `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	AppId          string  `protobuf:"bytes,3,opt,name=AppId,proto3" json:"AppId,omitempty"`
	MediaId        string  `protobuf:"bytes,4,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	TasktStatus    string  `protobuf:"bytes,5,opt,name=TasktStatus,proto3" json:"TasktStatus,omitempty"`
	TaskProgress   float32 `protobuf:"fixed32,6,opt,name=TaskProgress,proto3" json:"TaskProgress,omitempty"`
	TaskTimeCost   string  `protobuf:"bytes,7,opt,name=TaskTimeCost,proto3" json:"TaskTimeCost,omitempty"`
	TaskStartTime  string  `protobuf:"bytes,8,opt,name=TaskStartTime,proto3" json:"TaskStartTime,omitempty"`
	TaskCreateTime string  `protobuf:"bytes,9,opt,name=TaskCreateTime,proto3" json:"TaskCreateTime,omitempty"`
	VideoName      string  `protobuf:"bytes,10,opt,name=VideoName,proto3" json:"VideoName,omitempty"`
	VideoType      string  `protobuf:"bytes,11,opt,name=VideoType,proto3" json:"VideoType,omitempty"`
	ShotImageUrl   string  `protobuf:"bytes,12,opt,name=ShotImageUrl,proto3" json:"ShotImageUrl,omitempty"` // 仅对样例视频库有用，直接数据库插入
	FailedReason   string  `protobuf:"bytes,13,opt,name=FailedReason,proto3" json:"FailedReason,omitempty"`
	TaskPriority   int32   `protobuf:"varint,14,opt,name=TaskPriority,proto3" json:"TaskPriority,omitempty"`
}

func (x *AIVideoProcessTaskInfo) Reset() {
	*x = AIVideoProcessTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIVideoProcessTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIVideoProcessTaskInfo) ProtoMessage() {}

func (x *AIVideoProcessTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIVideoProcessTaskInfo.ProtoReflect.Descriptor instead.
func (*AIVideoProcessTaskInfo) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{11}
}

func (x *AIVideoProcessTaskInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AIVideoProcessTaskInfo) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *AIVideoProcessTaskInfo) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AIVideoProcessTaskInfo) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *AIVideoProcessTaskInfo) GetTasktStatus() string {
	if x != nil {
		return x.TasktStatus
	}
	return ""
}

func (x *AIVideoProcessTaskInfo) GetTaskProgress() float32 {
	if x != nil {
		return x.TaskProgress
	}
	return 0
}

func (x *AIVideoProcessTaskInfo) GetTaskTimeCost() string {
	if x != nil {
		return x.TaskTimeCost
	}
	return ""
}

func (x *AIVideoProcessTaskInfo) GetTaskStartTime() string {
	if x != nil {
		return x.TaskStartTime
	}
	return ""
}

func (x *AIVideoProcessTaskInfo) GetTaskCreateTime() string {
	if x != nil {
		return x.TaskCreateTime
	}
	return ""
}

func (x *AIVideoProcessTaskInfo) GetVideoName() string {
	if x != nil {
		return x.VideoName
	}
	return ""
}

func (x *AIVideoProcessTaskInfo) GetVideoType() string {
	if x != nil {
		return x.VideoType
	}
	return ""
}

func (x *AIVideoProcessTaskInfo) GetShotImageUrl() string {
	if x != nil {
		return x.ShotImageUrl
	}
	return ""
}

func (x *AIVideoProcessTaskInfo) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *AIVideoProcessTaskInfo) GetTaskPriority() int32 {
	if x != nil {
		return x.TaskPriority
	}
	return 0
}

type FilterBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskMediaTypeSet []string `protobuf:"bytes,1,rep,name=TaskMediaTypeSet,proto3" json:"TaskMediaTypeSet,omitempty"`
	TaskStatusSet    []string `protobuf:"bytes,2,rep,name=TaskStatusSet,proto3" json:"TaskStatusSet,omitempty"`
	AppIDSet         []string `protobuf:"bytes,3,rep,name=AppIDSet,proto3" json:"AppIDSet,omitempty"`
	Reason           string   `protobuf:"bytes,4,opt,name=Reason,proto3" json:"Reason,omitempty"`
	TaskNameOrID     string   `protobuf:"bytes,5,opt,name=TaskNameOrID,proto3" json:"TaskNameOrID,omitempty"`
}

func (x *FilterBy) Reset() {
	*x = FilterBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterBy) ProtoMessage() {}

func (x *FilterBy) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterBy.ProtoReflect.Descriptor instead.
func (*FilterBy) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{12}
}

func (x *FilterBy) GetTaskMediaTypeSet() []string {
	if x != nil {
		return x.TaskMediaTypeSet
	}
	return nil
}

func (x *FilterBy) GetTaskStatusSet() []string {
	if x != nil {
		return x.TaskStatusSet
	}
	return nil
}

func (x *FilterBy) GetAppIDSet() []string {
	if x != nil {
		return x.AppIDSet
	}
	return nil
}

func (x *FilterBy) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *FilterBy) GetTaskNameOrID() string {
	if x != nil {
		return x.TaskNameOrID
	}
	return ""
}

type SortBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	By    string `protobuf:"bytes,1,opt,name=By,proto3" json:"By,omitempty"`
	Order string `protobuf:"bytes,2,opt,name=Order,proto3" json:"Order,omitempty"`
}

func (x *SortBy) Reset() {
	*x = SortBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortBy) ProtoMessage() {}

func (x *SortBy) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortBy.ProtoReflect.Descriptor instead.
func (*SortBy) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{13}
}

func (x *SortBy) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

func (x *SortBy) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type DescribeAIVideoProcessDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *DescribeAIVideoProcessDetailRequest) Reset() {
	*x = DescribeAIVideoProcessDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAIVideoProcessDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAIVideoProcessDetailRequest) ProtoMessage() {}

func (x *DescribeAIVideoProcessDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAIVideoProcessDetailRequest.ProtoReflect.Descriptor instead.
func (*DescribeAIVideoProcessDetailRequest) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{14}
}

func (x *DescribeAIVideoProcessDetailRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type DescribeAIVideoProcessDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskInfo      *apicommon.TaskInfo       `protobuf:"bytes,1,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
	TaskDetail    *AIVideoProcessTaskDetail `protobuf:"bytes,2,opt,name=TaskDetail,proto3" json:"TaskDetail,omitempty"`
	ProcessOption *VideoProcessOption       `protobuf:"bytes,3,opt,name=ProcessOption,proto3" json:"ProcessOption,omitempty"`
}

func (x *DescribeAIVideoProcessDetailResponse) Reset() {
	*x = DescribeAIVideoProcessDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAIVideoProcessDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAIVideoProcessDetailResponse) ProtoMessage() {}

func (x *DescribeAIVideoProcessDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAIVideoProcessDetailResponse.ProtoReflect.Descriptor instead.
func (*DescribeAIVideoProcessDetailResponse) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{15}
}

func (x *DescribeAIVideoProcessDetailResponse) GetTaskInfo() *apicommon.TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

func (x *DescribeAIVideoProcessDetailResponse) GetTaskDetail() *AIVideoProcessTaskDetail {
	if x != nil {
		return x.TaskDetail
	}
	return nil
}

func (x *DescribeAIVideoProcessDetailResponse) GetProcessOption() *VideoProcessOption {
	if x != nil {
		return x.ProcessOption
	}
	return nil
}

type StopAIVideoProcessTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *StopAIVideoProcessTaskReq) Reset() {
	*x = StopAIVideoProcessTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopAIVideoProcessTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAIVideoProcessTaskReq) ProtoMessage() {}

func (x *StopAIVideoProcessTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAIVideoProcessTaskReq.ProtoReflect.Descriptor instead.
func (*StopAIVideoProcessTaskReq) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{16}
}

func (x *StopAIVideoProcessTaskReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type StopAIVideoProcessTaskRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopAIVideoProcessTaskRsp) Reset() {
	*x = StopAIVideoProcessTaskRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopAIVideoProcessTaskRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopAIVideoProcessTaskRsp) ProtoMessage() {}

func (x *StopAIVideoProcessTaskRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopAIVideoProcessTaskRsp.ProtoReflect.Descriptor instead.
func (*StopAIVideoProcessTaskRsp) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{17}
}

type RemoveAIVideoProcessTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *RemoveAIVideoProcessTaskReq) Reset() {
	*x = RemoveAIVideoProcessTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAIVideoProcessTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAIVideoProcessTaskReq) ProtoMessage() {}

func (x *RemoveAIVideoProcessTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAIVideoProcessTaskReq.ProtoReflect.Descriptor instead.
func (*RemoveAIVideoProcessTaskReq) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveAIVideoProcessTaskReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type RemoveAIVideoProcessTaskRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveAIVideoProcessTaskRsp) Reset() {
	*x = RemoveAIVideoProcessTaskRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAIVideoProcessTaskRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAIVideoProcessTaskRsp) ProtoMessage() {}

func (x *RemoveAIVideoProcessTaskRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAIVideoProcessTaskRsp.ProtoReflect.Descriptor instead.
func (*RemoveAIVideoProcessTaskRsp) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{19}
}

type HLSIndexInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width            int32  `protobuf:"varint,1,opt,name=Width,proto3" json:"Width,omitempty"`
	Height           int32  `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	BandWidth        int32  `protobuf:"varint,3,opt,name=BandWidth,proto3" json:"BandWidth,omitempty"`
	CosIndexFilePath string `protobuf:"bytes,4,opt,name=CosIndexFilePath,proto3" json:"CosIndexFilePath,omitempty"`
}

func (x *HLSIndexInfo) Reset() {
	*x = HLSIndexInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HLSIndexInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HLSIndexInfo) ProtoMessage() {}

func (x *HLSIndexInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HLSIndexInfo.ProtoReflect.Descriptor instead.
func (*HLSIndexInfo) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{20}
}

func (x *HLSIndexInfo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *HLSIndexInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *HLSIndexInfo) GetBandWidth() int32 {
	if x != nil {
		return x.BandWidth
	}
	return 0
}

func (x *HLSIndexInfo) GetCosIndexFilePath() string {
	if x != nil {
		return x.CosIndexFilePath
	}
	return ""
}

type CreateM3UIndexTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName       string          `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	InputIndex     []*HLSIndexInfo `protobuf:"bytes,3,rep,name=InputIndex,proto3" json:"InputIndex,omitempty"`
	CosConfig      *COSConfig      `protobuf:"bytes,4,opt,name=CosConfig,proto3" json:"CosConfig,omitempty"`
	CosDestination string          `protobuf:"bytes,5,opt,name=CosDestination,proto3" json:"CosDestination,omitempty"`
	TaskPriority   int32           `protobuf:"varint,9,opt,name=TaskPriority,proto3" json:"TaskPriority,omitempty"`
}

func (x *CreateM3UIndexTaskRequest) Reset() {
	*x = CreateM3UIndexTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateM3UIndexTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateM3UIndexTaskRequest) ProtoMessage() {}

func (x *CreateM3UIndexTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateM3UIndexTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateM3UIndexTaskRequest) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{21}
}

func (x *CreateM3UIndexTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *CreateM3UIndexTaskRequest) GetInputIndex() []*HLSIndexInfo {
	if x != nil {
		return x.InputIndex
	}
	return nil
}

func (x *CreateM3UIndexTaskRequest) GetCosConfig() *COSConfig {
	if x != nil {
		return x.CosConfig
	}
	return nil
}

func (x *CreateM3UIndexTaskRequest) GetCosDestination() string {
	if x != nil {
		return x.CosDestination
	}
	return ""
}

func (x *CreateM3UIndexTaskRequest) GetTaskPriority() int32 {
	if x != nil {
		return x.TaskPriority
	}
	return 0
}

type CreateM3UIndexTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,2,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *CreateM3UIndexTaskResponse) Reset() {
	*x = CreateM3UIndexTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateM3UIndexTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateM3UIndexTaskResponse) ProtoMessage() {}

func (x *CreateM3UIndexTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateM3UIndexTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateM3UIndexTaskResponse) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{22}
}

func (x *CreateM3UIndexTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type DescribeM3UIndexDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *DescribeM3UIndexDetailRequest) Reset() {
	*x = DescribeM3UIndexDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeM3UIndexDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeM3UIndexDetailRequest) ProtoMessage() {}

func (x *DescribeM3UIndexDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeM3UIndexDetailRequest.ProtoReflect.Descriptor instead.
func (*DescribeM3UIndexDetailRequest) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{23}
}

func (x *DescribeM3UIndexDetailRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type M3UIndexTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId       string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	TaskName     string `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	TaskStatus   string `protobuf:"bytes,3,opt,name=TaskStatus,proto3" json:"TaskStatus,omitempty"`
	FailedReason string `protobuf:"bytes,4,opt,name=FailedReason,proto3" json:"FailedReason,omitempty"`
}

func (x *M3UIndexTaskInfo) Reset() {
	*x = M3UIndexTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M3UIndexTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M3UIndexTaskInfo) ProtoMessage() {}

func (x *M3UIndexTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M3UIndexTaskInfo.ProtoReflect.Descriptor instead.
func (*M3UIndexTaskInfo) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{24}
}

func (x *M3UIndexTaskInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *M3UIndexTaskInfo) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *M3UIndexTaskInfo) GetTaskStatus() string {
	if x != nil {
		return x.TaskStatus
	}
	return ""
}

func (x *M3UIndexTaskInfo) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

type M3UIndexTaskDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterIndexCosPath string `protobuf:"bytes,1,opt,name=MasterIndexCosPath,proto3" json:"MasterIndexCosPath,omitempty"`
}

func (x *M3UIndexTaskDetail) Reset() {
	*x = M3UIndexTaskDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M3UIndexTaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M3UIndexTaskDetail) ProtoMessage() {}

func (x *M3UIndexTaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M3UIndexTaskDetail.ProtoReflect.Descriptor instead.
func (*M3UIndexTaskDetail) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{25}
}

func (x *M3UIndexTaskDetail) GetMasterIndexCosPath() string {
	if x != nil {
		return x.MasterIndexCosPath
	}
	return ""
}

type DescribeM3UIndexDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskInfo   *M3UIndexTaskInfo   `protobuf:"bytes,2,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
	TaskDetail *M3UIndexTaskDetail `protobuf:"bytes,3,opt,name=TaskDetail,proto3" json:"TaskDetail,omitempty"`
}

func (x *DescribeM3UIndexDetailResponse) Reset() {
	*x = DescribeM3UIndexDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeM3UIndexDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeM3UIndexDetailResponse) ProtoMessage() {}

func (x *DescribeM3UIndexDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeM3UIndexDetailResponse.ProtoReflect.Descriptor instead.
func (*DescribeM3UIndexDetailResponse) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{26}
}

func (x *DescribeM3UIndexDetailResponse) GetTaskInfo() *M3UIndexTaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

func (x *DescribeM3UIndexDetailResponse) GetTaskDetail() *M3UIndexTaskDetail {
	if x != nil {
		return x.TaskDetail
	}
	return nil
}

type UpdateAIVideoProcessTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId            string              `protobuf:"bytes,2,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	TaskId             string              `protobuf:"bytes,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	VideoProcessOption *VideoProcessOption `protobuf:"bytes,7,opt,name=VideoProcessOption,proto3" json:"VideoProcessOption,omitempty"` // 视频处理参数
	AutoStart          bool                `protobuf:"varint,8,opt,name=AutoStart,proto3" json:"AutoStart,omitempty"`
}

func (x *UpdateAIVideoProcessTaskRequest) Reset() {
	*x = UpdateAIVideoProcessTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAIVideoProcessTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAIVideoProcessTaskRequest) ProtoMessage() {}

func (x *UpdateAIVideoProcessTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAIVideoProcessTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateAIVideoProcessTaskRequest) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateAIVideoProcessTaskRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *UpdateAIVideoProcessTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *UpdateAIVideoProcessTaskRequest) GetVideoProcessOption() *VideoProcessOption {
	if x != nil {
		return x.VideoProcessOption
	}
	return nil
}

func (x *UpdateAIVideoProcessTaskRequest) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

type UpdateAIVideoProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,2,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *UpdateAIVideoProcessResponse) Reset() {
	*x = UpdateAIVideoProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAIVideoProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAIVideoProcessResponse) ProtoMessage() {}

func (x *UpdateAIVideoProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAIVideoProcessResponse.ProtoReflect.Descriptor instead.
func (*UpdateAIVideoProcessResponse) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateAIVideoProcessResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type DescribeAIVideoProcessConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DescribeAIVideoProcessConfigRequest) Reset() {
	*x = DescribeAIVideoProcessConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAIVideoProcessConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAIVideoProcessConfigRequest) ProtoMessage() {}

func (x *DescribeAIVideoProcessConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAIVideoProcessConfigRequest.ProtoReflect.Descriptor instead.
func (*DescribeAIVideoProcessConfigRequest) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{29}
}

type DescribeAIVideoProcessConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *structpb.Struct `protobuf:"bytes,3,opt,name=Config,proto3" json:"Config,omitempty"`
}

func (x *DescribeAIVideoProcessConfigResponse) Reset() {
	*x = DescribeAIVideoProcessConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_video_process_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeAIVideoProcessConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeAIVideoProcessConfigResponse) ProtoMessage() {}

func (x *DescribeAIVideoProcessConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ai_video_process_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeAIVideoProcessConfigResponse.ProtoReflect.Descriptor instead.
func (*DescribeAIVideoProcessConfigResponse) Descriptor() ([]byte, []int) {
	return file_ai_video_process_proto_rawDescGZIP(), []int{30}
}

func (x *DescribeAIVideoProcessConfigResponse) GetConfig() *structpb.Struct {
	if x != nil {
		return x.Config
	}
	return nil
}

var File_ai_video_process_proto protoreflect.FileDescriptor

var file_ai_video_process_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x69, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x13, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x22, 0xf5, 0x01,
	0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x44,
	0x65, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x70,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72, 0x70, 0x65,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x70, 0x65, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x75, 0x6d, 0x61, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x75,
	0x6d, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x61, 0x74, 0x63, 0x68, 0x22, 0x33, 0x0a, 0x15, 0x53, 0x75, 0x70, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0xa4, 0x08, 0x0a, 0x12, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x44, 0x52, 0x32, 0x48, 0x44, 0x52, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x53, 0x44, 0x52, 0x32, 0x48, 0x44, 0x52, 0x12, 0x1c, 0x0a, 0x09, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x44, 0x52,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x44,
	0x52, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x52, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x53, 0x52, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x52, 0x55,
	0x43, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x52, 0x55, 0x43, 0x12, 0x22, 0x0a,
	0x0c, 0x46, 0x52, 0x55, 0x43, 0x46, 0x50, 0x53, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x46, 0x52, 0x55, 0x43, 0x46, 0x50, 0x53, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x36, 0x0a, 0x16, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53,
	0x69, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x65, 0x61, 0x6b, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x65, 0x61, 0x6b, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a,
	0x18, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x78, 0x41,
	0x76, 0x67, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x78, 0x41,
	0x76, 0x67, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x56, 0x53, 0x52,
	0x4e, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x56, 0x53, 0x52, 0x4e, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x44, 0x52, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x44, 0x52, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x6e,
	0x6f, 0x69, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x70, 0x65, 0x6e,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x68, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x75, 0x6d, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x75, 0x6d, 0x61,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x22, 0xa1, 0x03, 0x0a, 0x0d, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x57, 0x65, 0x62, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x57, 0x65, 0x62, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x50, 0x53,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x46, 0x50, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x42,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x42, 0x69,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x4d, 0x41,
	0x46, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x56, 0x4d, 0x41, 0x46, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x53, 0x4e, 0x52, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x50, 0x53, 0x4e,
	0x52, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x53, 0x49, 0x4d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x53, 0x53, 0x49, 0x4d, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x50, 0x49, 0x50, 0x53, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x4c, 0x50, 0x49, 0x50, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x33, 0x55, 0x43, 0x4f,
	0x53, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x33, 0x55,
	0x43, 0x4f, 0x53, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x61, 0x6e, 0x64,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x22, 0xca, 0x01, 0x0a, 0x18, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x56, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x56, 0x0a, 0x11, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x11, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x22, 0x75, 0x0a, 0x09, 0x43, 0x4f, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xe3, 0x03, 0x0a, 0x1f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55,
	0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x55, 0x52, 0x4c, 0x12, 0x4d, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x4f, 0x53, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x4f, 0x53, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x43, 0x4f, 0x53, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x4f, 0x53, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x09, 0x43, 0x6f, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x4f, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x09, 0x43, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22,
	0x68, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22, 0xdc, 0x01, 0x0a, 0x22, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x79, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x12, 0x39, 0x0a,
	0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x52, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x22, 0x9a, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x53, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x65, 0x74, 0x22, 0xdc, 0x03, 0x0a, 0x16, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x53, 0x68, 0x6f, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x22, 0xb4, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x54, 0x61, 0x73,
	0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x41, 0x70, 0x70, 0x49, 0x44, 0x53, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49, 0x44, 0x22, 0x2e, 0x0a, 0x06, 0x53,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x42, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x23, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x24, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x0a,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x49, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x53, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x49,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x53,
	0x74, 0x6f, 0x70, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73, 0x70, 0x22, 0x35, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0x1d, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73, 0x70, 0x22, 0x86,
	0x01, 0x0a, 0x0c, 0x48, 0x4c, 0x53, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x43,
	0x6f, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6f, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x90, 0x02, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x33, 0x55, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x47, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x48, 0x4c, 0x53, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x42, 0x0a, 0x09, 0x43, 0x6f,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x4f, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x09, 0x43, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x6f, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x34, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x33, 0x55, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0x37, 0x0a, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x33, 0x55, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x4d, 0x33,
	0x55, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x12, 0x4d, 0x33, 0x55, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x12,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0xb8, 0x01, 0x0a,
	0x1e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x33, 0x55, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x33,
	0x55, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x33, 0x55, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xd0, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x5d, 0x0a,
	0x12, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0x36, 0x0a, 0x1c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x24, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2a, 0x78, 0x0a, 0x10, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x49, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x11, 0x41, 0x49, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe8, 0x07, 0x12, 0x0c, 0x0a,
	0x07, 0x41, 0x49, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x10, 0xe9, 0x07, 0x12, 0x10, 0x0a, 0x0b, 0x41,
	0x49, 0x4f, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x10, 0xea, 0x07, 0x12, 0x10, 0x0a,
	0x0b, 0x41, 0x49, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x10, 0xeb, 0x07, 0x12,
	0x0b, 0x0a, 0x06, 0x41, 0x49, 0x43, 0x72, 0x6f, 0x70, 0x10, 0xec, 0x07, 0x2a, 0x68, 0x0a, 0x0d,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x77, 0x10, 0x0a, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x48,
	0x69, 0x67, 0x68, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x78, 0x10, 0x63, 0x32, 0xd9, 0x0c, 0x0a, 0x0e, 0x41, 0x49, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x1c,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3e, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9c, 0x01,
	0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x3d, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3a, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x49, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9f,
	0x01, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x8a, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x72, 0x6f,
	0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x33, 0x55, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x34, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x33, 0x55, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x33, 0x55, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d,
	0x01, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x33, 0x55, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x33,
	0x55, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x33, 0x55, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84,
	0x01, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x34, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x8a, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x36, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x49, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x36, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x49, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x73, 0x70, 0x42, 0x5e, 0x5a, 0x5c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x54, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x73,
	0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73,
	0x70, 0x65, 0x63, 0x2f, 0x61, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ai_video_process_proto_rawDescOnce sync.Once
	file_ai_video_process_proto_rawDescData = file_ai_video_process_proto_rawDesc
)

func file_ai_video_process_proto_rawDescGZIP() []byte {
	file_ai_video_process_proto_rawDescOnce.Do(func() {
		file_ai_video_process_proto_rawDescData = protoimpl.X.CompressGZIP(file_ai_video_process_proto_rawDescData)
	})
	return file_ai_video_process_proto_rawDescData
}

var file_ai_video_process_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ai_video_process_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_ai_video_process_proto_goTypes = []interface{}{
	(VideoProcessType)(0),                        // 0: trpc.media.aivideoprocess.VideoProcessType
	(PriorityLevel)(0),                           // 1: trpc.media.aivideoprocess.PriorityLevel
	(*CommonProcessOption)(nil),                  // 2: trpc.media.aivideoprocess.CommonProcessOption
	(*VideoRepairOption)(nil),                    // 3: trpc.media.aivideoprocess.VideoRepairOption
	(*SuperResolutionOption)(nil),                // 4: trpc.media.aivideoprocess.SuperResolutionOption
	(*VideoProcessOption)(nil),                   // 5: trpc.media.aivideoprocess.VideoProcessOption
	(*AIVideoDetail)(nil),                        // 6: trpc.media.aivideoprocess.AIVideoDetail
	(*AIVideoProcessTaskDetail)(nil),             // 7: trpc.media.aivideoprocess.AIVideoProcessTaskDetail
	(*COSConfig)(nil),                            // 8: trpc.media.aivideoprocess.COSConfig
	(*CreateAIVideoProcessTaskRequest)(nil),      // 9: trpc.media.aivideoprocess.CreateAIVideoProcessTaskRequest
	(*CreateAIVideoProcessResponse)(nil),         // 10: trpc.media.aivideoprocess.CreateAIVideoProcessResponse
	(*DescribeAIVideoProcessTasksRequest)(nil),   // 11: trpc.media.aivideoprocess.DescribeAIVideoProcessTasksRequest
	(*DescribeAIVideoProcessTasksResponse)(nil),  // 12: trpc.media.aivideoprocess.DescribeAIVideoProcessTasksResponse
	(*AIVideoProcessTaskInfo)(nil),               // 13: trpc.media.aivideoprocess.AIVideoProcessTaskInfo
	(*FilterBy)(nil),                             // 14: trpc.media.aivideoprocess.FilterBy
	(*SortBy)(nil),                               // 15: trpc.media.aivideoprocess.SortBy
	(*DescribeAIVideoProcessDetailRequest)(nil),  // 16: trpc.media.aivideoprocess.DescribeAIVideoProcessDetailRequest
	(*DescribeAIVideoProcessDetailResponse)(nil), // 17: trpc.media.aivideoprocess.DescribeAIVideoProcessDetailResponse
	(*StopAIVideoProcessTaskReq)(nil),            // 18: trpc.media.aivideoprocess.StopAIVideoProcessTaskReq
	(*StopAIVideoProcessTaskRsp)(nil),            // 19: trpc.media.aivideoprocess.StopAIVideoProcessTaskRsp
	(*RemoveAIVideoProcessTaskReq)(nil),          // 20: trpc.media.aivideoprocess.RemoveAIVideoProcessTaskReq
	(*RemoveAIVideoProcessTaskRsp)(nil),          // 21: trpc.media.aivideoprocess.RemoveAIVideoProcessTaskRsp
	(*HLSIndexInfo)(nil),                         // 22: trpc.media.aivideoprocess.HLSIndexInfo
	(*CreateM3UIndexTaskRequest)(nil),            // 23: trpc.media.aivideoprocess.CreateM3UIndexTaskRequest
	(*CreateM3UIndexTaskResponse)(nil),           // 24: trpc.media.aivideoprocess.CreateM3UIndexTaskResponse
	(*DescribeM3UIndexDetailRequest)(nil),        // 25: trpc.media.aivideoprocess.DescribeM3UIndexDetailRequest
	(*M3UIndexTaskInfo)(nil),                     // 26: trpc.media.aivideoprocess.M3UIndexTaskInfo
	(*M3UIndexTaskDetail)(nil),                   // 27: trpc.media.aivideoprocess.M3UIndexTaskDetail
	(*DescribeM3UIndexDetailResponse)(nil),       // 28: trpc.media.aivideoprocess.DescribeM3UIndexDetailResponse
	(*UpdateAIVideoProcessTaskRequest)(nil),      // 29: trpc.media.aivideoprocess.UpdateAIVideoProcessTaskRequest
	(*UpdateAIVideoProcessResponse)(nil),         // 30: trpc.media.aivideoprocess.UpdateAIVideoProcessResponse
	(*DescribeAIVideoProcessConfigRequest)(nil),  // 31: trpc.media.aivideoprocess.DescribeAIVideoProcessConfigRequest
	(*DescribeAIVideoProcessConfigResponse)(nil), // 32: trpc.media.aivideoprocess.DescribeAIVideoProcessConfigResponse
	(*anypb.Any)(nil),                            // 33: google.protobuf.Any
	(*apicommon.TaskInfo)(nil),                   // 34: trpc.media.common.TaskInfo
	(*structpb.Struct)(nil),                      // 35: google.protobuf.Struct
}
var file_ai_video_process_proto_depIdxs = []int32{
	6,  // 0: trpc.media.aivideoprocess.AIVideoProcessTaskDetail.SourceVideoDetail:type_name -> trpc.media.aivideoprocess.AIVideoDetail
	6,  // 1: trpc.media.aivideoprocess.AIVideoProcessTaskDetail.TargetVideoDetail:type_name -> trpc.media.aivideoprocess.AIVideoDetail
	0,  // 2: trpc.media.aivideoprocess.CreateAIVideoProcessTaskRequest.ProcessType:type_name -> trpc.media.aivideoprocess.VideoProcessType
	5,  // 3: trpc.media.aivideoprocess.CreateAIVideoProcessTaskRequest.VideoProcessOption:type_name -> trpc.media.aivideoprocess.VideoProcessOption
	8,  // 4: trpc.media.aivideoprocess.CreateAIVideoProcessTaskRequest.CosConfig:type_name -> trpc.media.aivideoprocess.COSConfig
	33, // 5: trpc.media.aivideoprocess.CreateAIVideoProcessResponse.TaskData:type_name -> google.protobuf.Any
	14, // 6: trpc.media.aivideoprocess.DescribeAIVideoProcessTasksRequest.FilterBy:type_name -> trpc.media.aivideoprocess.FilterBy
	15, // 7: trpc.media.aivideoprocess.DescribeAIVideoProcessTasksRequest.SortBy:type_name -> trpc.media.aivideoprocess.SortBy
	13, // 8: trpc.media.aivideoprocess.DescribeAIVideoProcessTasksResponse.TaskInfoSet:type_name -> trpc.media.aivideoprocess.AIVideoProcessTaskInfo
	34, // 9: trpc.media.aivideoprocess.DescribeAIVideoProcessDetailResponse.TaskInfo:type_name -> trpc.media.common.TaskInfo
	7,  // 10: trpc.media.aivideoprocess.DescribeAIVideoProcessDetailResponse.TaskDetail:type_name -> trpc.media.aivideoprocess.AIVideoProcessTaskDetail
	5,  // 11: trpc.media.aivideoprocess.DescribeAIVideoProcessDetailResponse.ProcessOption:type_name -> trpc.media.aivideoprocess.VideoProcessOption
	22, // 12: trpc.media.aivideoprocess.CreateM3UIndexTaskRequest.InputIndex:type_name -> trpc.media.aivideoprocess.HLSIndexInfo
	8,  // 13: trpc.media.aivideoprocess.CreateM3UIndexTaskRequest.CosConfig:type_name -> trpc.media.aivideoprocess.COSConfig
	26, // 14: trpc.media.aivideoprocess.DescribeM3UIndexDetailResponse.TaskInfo:type_name -> trpc.media.aivideoprocess.M3UIndexTaskInfo
	27, // 15: trpc.media.aivideoprocess.DescribeM3UIndexDetailResponse.TaskDetail:type_name -> trpc.media.aivideoprocess.M3UIndexTaskDetail
	5,  // 16: trpc.media.aivideoprocess.UpdateAIVideoProcessTaskRequest.VideoProcessOption:type_name -> trpc.media.aivideoprocess.VideoProcessOption
	35, // 17: trpc.media.aivideoprocess.DescribeAIVideoProcessConfigResponse.Config:type_name -> google.protobuf.Struct
	9,  // 18: trpc.media.aivideoprocess.AIVideoProcess.CreateAIVideoProcessTask:input_type -> trpc.media.aivideoprocess.CreateAIVideoProcessTaskRequest
	16, // 19: trpc.media.aivideoprocess.AIVideoProcess.DescribeAIVideoProcessDetail:input_type -> trpc.media.aivideoprocess.DescribeAIVideoProcessDetailRequest
	11, // 20: trpc.media.aivideoprocess.AIVideoProcess.DescribeAIVideoProcessTasks:input_type -> trpc.media.aivideoprocess.DescribeAIVideoProcessTasksRequest
	29, // 21: trpc.media.aivideoprocess.AIVideoProcess.UpdateAIVideoProcessTask:input_type -> trpc.media.aivideoprocess.UpdateAIVideoProcessTaskRequest
	31, // 22: trpc.media.aivideoprocess.AIVideoProcess.DescribeAIVideoProcessConfig:input_type -> trpc.media.aivideoprocess.DescribeAIVideoProcessConfigRequest
	9,  // 23: trpc.media.aivideoprocess.AIVideoProcess.CreateVideoCropTask:input_type -> trpc.media.aivideoprocess.CreateAIVideoProcessTaskRequest
	29, // 24: trpc.media.aivideoprocess.AIVideoProcess.UpdateVideoCropTask:input_type -> trpc.media.aivideoprocess.UpdateAIVideoProcessTaskRequest
	23, // 25: trpc.media.aivideoprocess.AIVideoProcess.CreateM3UIndexTask:input_type -> trpc.media.aivideoprocess.CreateM3UIndexTaskRequest
	25, // 26: trpc.media.aivideoprocess.AIVideoProcess.DescribeM3UIndexDetail:input_type -> trpc.media.aivideoprocess.DescribeM3UIndexDetailRequest
	18, // 27: trpc.media.aivideoprocess.AIVideoProcess.StopAIVideoProcessTask:input_type -> trpc.media.aivideoprocess.StopAIVideoProcessTaskReq
	20, // 28: trpc.media.aivideoprocess.AIVideoProcess.RemoveAIVideoProcessTask:input_type -> trpc.media.aivideoprocess.RemoveAIVideoProcessTaskReq
	10, // 29: trpc.media.aivideoprocess.AIVideoProcess.CreateAIVideoProcessTask:output_type -> trpc.media.aivideoprocess.CreateAIVideoProcessResponse
	17, // 30: trpc.media.aivideoprocess.AIVideoProcess.DescribeAIVideoProcessDetail:output_type -> trpc.media.aivideoprocess.DescribeAIVideoProcessDetailResponse
	12, // 31: trpc.media.aivideoprocess.AIVideoProcess.DescribeAIVideoProcessTasks:output_type -> trpc.media.aivideoprocess.DescribeAIVideoProcessTasksResponse
	30, // 32: trpc.media.aivideoprocess.AIVideoProcess.UpdateAIVideoProcessTask:output_type -> trpc.media.aivideoprocess.UpdateAIVideoProcessResponse
	32, // 33: trpc.media.aivideoprocess.AIVideoProcess.DescribeAIVideoProcessConfig:output_type -> trpc.media.aivideoprocess.DescribeAIVideoProcessConfigResponse
	10, // 34: trpc.media.aivideoprocess.AIVideoProcess.CreateVideoCropTask:output_type -> trpc.media.aivideoprocess.CreateAIVideoProcessResponse
	30, // 35: trpc.media.aivideoprocess.AIVideoProcess.UpdateVideoCropTask:output_type -> trpc.media.aivideoprocess.UpdateAIVideoProcessResponse
	24, // 36: trpc.media.aivideoprocess.AIVideoProcess.CreateM3UIndexTask:output_type -> trpc.media.aivideoprocess.CreateM3UIndexTaskResponse
	28, // 37: trpc.media.aivideoprocess.AIVideoProcess.DescribeM3UIndexDetail:output_type -> trpc.media.aivideoprocess.DescribeM3UIndexDetailResponse
	19, // 38: trpc.media.aivideoprocess.AIVideoProcess.StopAIVideoProcessTask:output_type -> trpc.media.aivideoprocess.StopAIVideoProcessTaskRsp
	21, // 39: trpc.media.aivideoprocess.AIVideoProcess.RemoveAIVideoProcessTask:output_type -> trpc.media.aivideoprocess.RemoveAIVideoProcessTaskRsp
	29, // [29:40] is the sub-list for method output_type
	18, // [18:29] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_ai_video_process_proto_init() }
func file_ai_video_process_proto_init() {
	if File_ai_video_process_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ai_video_process_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonProcessOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoRepairOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperResolutionOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoProcessOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIVideoDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIVideoProcessTaskDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*COSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAIVideoProcessTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAIVideoProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAIVideoProcessTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAIVideoProcessTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIVideoProcessTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAIVideoProcessDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAIVideoProcessDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopAIVideoProcessTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopAIVideoProcessTaskRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAIVideoProcessTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAIVideoProcessTaskRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HLSIndexInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateM3UIndexTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateM3UIndexTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeM3UIndexDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M3UIndexTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M3UIndexTaskDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeM3UIndexDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAIVideoProcessTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAIVideoProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAIVideoProcessConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_video_process_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeAIVideoProcessConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ai_video_process_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ai_video_process_proto_goTypes,
		DependencyIndexes: file_ai_video_process_proto_depIdxs,
		EnumInfos:         file_ai_video_process_proto_enumTypes,
		MessageInfos:      file_ai_video_process_proto_msgTypes,
	}.Build()
	File_ai_video_process_proto = out.File
	file_ai_video_process_proto_rawDesc = nil
	file_ai_video_process_proto_goTypes = nil
	file_ai_video_process_proto_depIdxs = nil
}
