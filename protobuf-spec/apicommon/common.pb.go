// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: common.proto

package apicommon

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperateStatus int32

const (
	OperateStatus_OPERATE_STATUS_SUCCESS OperateStatus = 0 // 操作成功
	OperateStatus_OPERATE_STATUS_FAILED  OperateStatus = 1 // 操作失败
)

// Enum value maps for OperateStatus.
var (
	OperateStatus_name = map[int32]string{
		0: "OPERATE_STATUS_SUCCESS",
		1: "OPERATE_STATUS_FAILED",
	}
	OperateStatus_value = map[string]int32{
		"OPERATE_STATUS_SUCCESS": 0,
		"OPERATE_STATUS_FAILED":  1,
	}
)

func (x OperateStatus) Enum() *OperateStatus {
	p := new(OperateStatus)
	*p = x
	return p
}

func (x OperateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (OperateStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x OperateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperateStatus.Descriptor instead.
func (OperateStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

// ====================================== 内容库新增 ======================================
type CategoryTagType int32

const (
	CategoryTagType_CATEGORY_TAG_TYPE_OTHER         CategoryTagType = 0 // 其他
	CategoryTagType_CATEGORY_TAG_TYPE_NEWS          CategoryTagType = 1 // 新闻
	CategoryTagType_CATEGORY_TAG_TYPE_ENTERTAINMENT CategoryTagType = 2 // 综艺
	CategoryTagType_CATEGORY_TAG_TYPE_MOVIE         CategoryTagType = 3 // 影视
	CategoryTagType_CATEGORY_TAG_TYPE_COMPETITION   CategoryTagType = 4 // 赛事
	CategoryTagType_CATEGORY_TAG_TYPE_DOCUMENTARY   CategoryTagType = 5 // 纪录片
	CategoryTagType_CATEGORY_TAG_TYPE_INTERNETINFO  CategoryTagType = 6 // 互联网资讯
)

// Enum value maps for CategoryTagType.
var (
	CategoryTagType_name = map[int32]string{
		0: "CATEGORY_TAG_TYPE_OTHER",
		1: "CATEGORY_TAG_TYPE_NEWS",
		2: "CATEGORY_TAG_TYPE_ENTERTAINMENT",
		3: "CATEGORY_TAG_TYPE_MOVIE",
		4: "CATEGORY_TAG_TYPE_COMPETITION",
		5: "CATEGORY_TAG_TYPE_DOCUMENTARY",
		6: "CATEGORY_TAG_TYPE_INTERNETINFO",
	}
	CategoryTagType_value = map[string]int32{
		"CATEGORY_TAG_TYPE_OTHER":         0,
		"CATEGORY_TAG_TYPE_NEWS":          1,
		"CATEGORY_TAG_TYPE_ENTERTAINMENT": 2,
		"CATEGORY_TAG_TYPE_MOVIE":         3,
		"CATEGORY_TAG_TYPE_COMPETITION":   4,
		"CATEGORY_TAG_TYPE_DOCUMENTARY":   5,
		"CATEGORY_TAG_TYPE_INTERNETINFO":  6,
	}
)

func (x CategoryTagType) Enum() *CategoryTagType {
	p := new(CategoryTagType)
	*p = x
	return p
}

func (x CategoryTagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CategoryTagType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (CategoryTagType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x CategoryTagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CategoryTagType.Descriptor instead.
func (CategoryTagType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

// 资源状态
type MediaStatus int32

const (
	MediaStatus_MEDIA_STATUS_INVALID                     MediaStatus = 0  // 资源创建无效，参数检验失败
	MediaStatus_MEDIA_STATUS_CREATED                     MediaStatus = 1  // 资源创建完成, 准备上传
	MediaStatus_MEDIA_STATUS_COMMIT_SUCCESS              MediaStatus = 2  // 资源上传完成
	MediaStatus_MEDIA_STATUS_COMMIT_FAILED               MediaStatus = 3  // 资源上传失败
	MediaStatus_MEDIA_STATUS_IMPORT_WAITING              MediaStatus = 4  // 资源进入入库等待队列
	MediaStatus_MEDIA_STATUS_IMPORT_ANALYSING            MediaStatus = 5  // 资源入库中,封面未获取
	MediaStatus_MEDIA_STATUS_IMPORT_ANALYSED             MediaStatus = 6  // 资源入库完成
	MediaStatus_MEDIA_STATUS_IMPORT_FAILED               MediaStatus = 7  // 资源入库失败
	MediaStatus_MEDIA_STATUS_IMPORT_STOPED               MediaStatus = 8  // 资源暂停入库
	MediaStatus_MEDIA_STATUS_DELETED_SOFT                MediaStatus = 9  // 资源被软删除
	MediaStatus_MEDIA_STATUS_DELETED_HARD                MediaStatus = 10 // 资源被硬删除
	MediaStatus_MEDIA_STATUS_IMPORT_ANALYSING_COVER_DONE MediaStatus = 11 // 资源入库中,封面已获取
	MediaStatus_MEDIA_STATUS_DELETED_SOFT_WAITING        MediaStatus = 12 // 资源待软删除
	MediaStatus_MEDIA_STATUS_DELETED_HARD_WAITING        MediaStatus = 13 // 资源待硬删除
	MediaStatus_MEDIA_STATUS_WAIT_DOWNLOAD               MediaStatus = 14 // 资源等待下载
	MediaStatus_MEDIA_STATUS_DOWNLOADING                 MediaStatus = 15 // 资源正在下载中
)

// Enum value maps for MediaStatus.
var (
	MediaStatus_name = map[int32]string{
		0:  "MEDIA_STATUS_INVALID",
		1:  "MEDIA_STATUS_CREATED",
		2:  "MEDIA_STATUS_COMMIT_SUCCESS",
		3:  "MEDIA_STATUS_COMMIT_FAILED",
		4:  "MEDIA_STATUS_IMPORT_WAITING",
		5:  "MEDIA_STATUS_IMPORT_ANALYSING",
		6:  "MEDIA_STATUS_IMPORT_ANALYSED",
		7:  "MEDIA_STATUS_IMPORT_FAILED",
		8:  "MEDIA_STATUS_IMPORT_STOPED",
		9:  "MEDIA_STATUS_DELETED_SOFT",
		10: "MEDIA_STATUS_DELETED_HARD",
		11: "MEDIA_STATUS_IMPORT_ANALYSING_COVER_DONE",
		12: "MEDIA_STATUS_DELETED_SOFT_WAITING",
		13: "MEDIA_STATUS_DELETED_HARD_WAITING",
		14: "MEDIA_STATUS_WAIT_DOWNLOAD",
		15: "MEDIA_STATUS_DOWNLOADING",
	}
	MediaStatus_value = map[string]int32{
		"MEDIA_STATUS_INVALID":                     0,
		"MEDIA_STATUS_CREATED":                     1,
		"MEDIA_STATUS_COMMIT_SUCCESS":              2,
		"MEDIA_STATUS_COMMIT_FAILED":               3,
		"MEDIA_STATUS_IMPORT_WAITING":              4,
		"MEDIA_STATUS_IMPORT_ANALYSING":            5,
		"MEDIA_STATUS_IMPORT_ANALYSED":             6,
		"MEDIA_STATUS_IMPORT_FAILED":               7,
		"MEDIA_STATUS_IMPORT_STOPED":               8,
		"MEDIA_STATUS_DELETED_SOFT":                9,
		"MEDIA_STATUS_DELETED_HARD":                10,
		"MEDIA_STATUS_IMPORT_ANALYSING_COVER_DONE": 11,
		"MEDIA_STATUS_DELETED_SOFT_WAITING":        12,
		"MEDIA_STATUS_DELETED_HARD_WAITING":        13,
		"MEDIA_STATUS_WAIT_DOWNLOAD":               14,
		"MEDIA_STATUS_DOWNLOADING":                 15,
	}
)

func (x MediaStatus) Enum() *MediaStatus {
	p := new(MediaStatus)
	*p = x
	return p
}

func (x MediaStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (MediaStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x MediaStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaStatus.Descriptor instead.
func (MediaStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type MediaType int32

const (
	MediaType_MEDIA_TYPE_OTHER          MediaType = 0 // 其他
	MediaType_MEDIA_TYPE_VIDEO          MediaType = 1 // 视频
	MediaType_MEDIA_TYPE_IMAGE          MediaType = 2 // 图片
	MediaType_MEDIA_TYPE_AUDIO          MediaType = 3 // 音频
	MediaType_MEDIA_TYPE_DOCUMENT       MediaType = 4 // 文档
	MediaType_MEDIA_TYPE_MANUSCRIPT     MediaType = 5 // 文稿
	MediaType_MEDIA_TYPE_STREAM         MediaType = 6 // 直播流
	MediaType_MEDIA_TYPE_AI_TASK_RESULT MediaType = 7 // 分析任务的结果（用于标签分析）
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0: "MEDIA_TYPE_OTHER",
		1: "MEDIA_TYPE_VIDEO",
		2: "MEDIA_TYPE_IMAGE",
		3: "MEDIA_TYPE_AUDIO",
		4: "MEDIA_TYPE_DOCUMENT",
		5: "MEDIA_TYPE_MANUSCRIPT",
		6: "MEDIA_TYPE_STREAM",
		7: "MEDIA_TYPE_AI_TASK_RESULT",
	}
	MediaType_value = map[string]int32{
		"MEDIA_TYPE_OTHER":          0,
		"MEDIA_TYPE_VIDEO":          1,
		"MEDIA_TYPE_IMAGE":          2,
		"MEDIA_TYPE_AUDIO":          3,
		"MEDIA_TYPE_DOCUMENT":       4,
		"MEDIA_TYPE_MANUSCRIPT":     5,
		"MEDIA_TYPE_STREAM":         6,
		"MEDIA_TYPE_AI_TASK_RESULT": 7,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

type MediaSourceType int32

const (
	MediaSourceType_MEDIA_SOURCE_TYPE_OTHER         MediaSourceType = 0 // 其他
	MediaSourceType_MEDIA_SOURCE_TYPE_FRONT_PAGE    MediaSourceType = 1 // 首页上传
	MediaSourceType_MEDIA_SOURCE_TYPE_IVSS          MediaSourceType = 2 // 新闻拆条
	MediaSourceType_MEDIA_SOURCE_TYPE_IVSR          MediaSourceType = 3 // 视频增强
	MediaSourceType_MEDIA_SOURCE_TYPE_TRANSCODE     MediaSourceType = 4 // 转码素材
	MediaSourceType_MEDIA_SOURCE_TYPE_IVSC          MediaSourceType = 5 // 智能封面
	MediaSourceType_MEDIA_SOURCE_TYPE_IVLD          MediaSourceType = 6 // 智能标签
	MediaSourceType_MEDIA_SOURCE_TYPE_EXTRACT_IMAGE MediaSourceType = 7 // 抽帧模块
	MediaSourceType_MEDIA_SOURCE_TYPE_IVROT         MediaSourceType = 8 // 横竖屏转换
	MediaSourceType_MEDIA_SOURCE_TYPE_TTS           MediaSourceType = 9 // 语音合成
)

// Enum value maps for MediaSourceType.
var (
	MediaSourceType_name = map[int32]string{
		0: "MEDIA_SOURCE_TYPE_OTHER",
		1: "MEDIA_SOURCE_TYPE_FRONT_PAGE",
		2: "MEDIA_SOURCE_TYPE_IVSS",
		3: "MEDIA_SOURCE_TYPE_IVSR",
		4: "MEDIA_SOURCE_TYPE_TRANSCODE",
		5: "MEDIA_SOURCE_TYPE_IVSC",
		6: "MEDIA_SOURCE_TYPE_IVLD",
		7: "MEDIA_SOURCE_TYPE_EXTRACT_IMAGE",
		8: "MEDIA_SOURCE_TYPE_IVROT",
		9: "MEDIA_SOURCE_TYPE_TTS",
	}
	MediaSourceType_value = map[string]int32{
		"MEDIA_SOURCE_TYPE_OTHER":         0,
		"MEDIA_SOURCE_TYPE_FRONT_PAGE":    1,
		"MEDIA_SOURCE_TYPE_IVSS":          2,
		"MEDIA_SOURCE_TYPE_IVSR":          3,
		"MEDIA_SOURCE_TYPE_TRANSCODE":     4,
		"MEDIA_SOURCE_TYPE_IVSC":          5,
		"MEDIA_SOURCE_TYPE_IVLD":          6,
		"MEDIA_SOURCE_TYPE_EXTRACT_IMAGE": 7,
		"MEDIA_SOURCE_TYPE_IVROT":         8,
		"MEDIA_SOURCE_TYPE_TTS":           9,
	}
)

func (x MediaSourceType) Enum() *MediaSourceType {
	p := new(MediaSourceType)
	*p = x
	return p
}

func (x MediaSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (MediaSourceType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x MediaSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaSourceType.Descriptor instead.
func (MediaSourceType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

type LangType int32

const (
	LangType_LANG_TYPE_MANDARIN  LangType = 0 // 普通话
	LangType_LANG_TYPE_CANTONESE LangType = 1 // 粤语
)

// Enum value maps for LangType.
var (
	LangType_name = map[int32]string{
		0: "LANG_TYPE_MANDARIN",
		1: "LANG_TYPE_CANTONESE",
	}
	LangType_value = map[string]int32{
		"LANG_TYPE_MANDARIN":  0,
		"LANG_TYPE_CANTONESE": 1,
	}
)

func (x LangType) Enum() *LangType {
	p := new(LangType)
	*p = x
	return p
}

func (x LangType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LangType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[5].Descriptor()
}

func (LangType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[5]
}

func (x LangType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LangType.Descriptor instead.
func (LangType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

type FilterType int32

const (
	FilterType_FILTER_TYPE_EQUAL         FilterType = 0 // 等于
	FilterType_FILTER_TYPE_NOT_EQUAL     FilterType = 1 // 不等于
	FilterType_FILTER_TYPE_GREATER       FilterType = 2 // 大于
	FilterType_FILTER_TYPE_GREATER_EQUAL FilterType = 3 // 大于等于
	FilterType_FILTER_TYPE_LESS          FilterType = 4 // 小于
	FilterType_FILTER_TYPE_LESS_EQUAL    FilterType = 5 // 小于等于
	FilterType_FILTER_TYPE_IN            FilterType = 6 // IN
	FilterType_FILTER_TYPE_NOT_IN        FilterType = 7 // NOT IN
	FilterType_FILTER_TYPE_REGEX         FilterType = 8 // REGEX
)

// Enum value maps for FilterType.
var (
	FilterType_name = map[int32]string{
		0: "FILTER_TYPE_EQUAL",
		1: "FILTER_TYPE_NOT_EQUAL",
		2: "FILTER_TYPE_GREATER",
		3: "FILTER_TYPE_GREATER_EQUAL",
		4: "FILTER_TYPE_LESS",
		5: "FILTER_TYPE_LESS_EQUAL",
		6: "FILTER_TYPE_IN",
		7: "FILTER_TYPE_NOT_IN",
		8: "FILTER_TYPE_REGEX",
	}
	FilterType_value = map[string]int32{
		"FILTER_TYPE_EQUAL":         0,
		"FILTER_TYPE_NOT_EQUAL":     1,
		"FILTER_TYPE_GREATER":       2,
		"FILTER_TYPE_GREATER_EQUAL": 3,
		"FILTER_TYPE_LESS":          4,
		"FILTER_TYPE_LESS_EQUAL":    5,
		"FILTER_TYPE_IN":            6,
		"FILTER_TYPE_NOT_IN":        7,
		"FILTER_TYPE_REGEX":         8,
	}
)

func (x FilterType) Enum() *FilterType {
	p := new(FilterType)
	*p = x
	return p
}

func (x FilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[6].Descriptor()
}

func (FilterType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[6]
}

func (x FilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterType.Descriptor instead.
func (FilterType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

type WorkflowMode int32

const (
	WorkflowMode_WORKFLOW_MODE_SYSTEM              WorkflowMode = 0 // 系统入库，不进行标准化
	WorkflowMode_WORKFLOW_MODE_CUSTOMER            WorkflowMode = 1 // 用户入库，进行标准化
	WorkflowMode_WORKFLOW_MODE_CUSTOMER_SUBVERSION WorkflowMode = 2 // 用户入库，进行标准化,子版本
	WorkflowMode_WORKFLOW_MODE_SYSTEM_SUBVERSION   WorkflowMode = 3 // 系统入库，不进行标准化,子版本
)

// Enum value maps for WorkflowMode.
var (
	WorkflowMode_name = map[int32]string{
		0: "WORKFLOW_MODE_SYSTEM",
		1: "WORKFLOW_MODE_CUSTOMER",
		2: "WORKFLOW_MODE_CUSTOMER_SUBVERSION",
		3: "WORKFLOW_MODE_SYSTEM_SUBVERSION",
	}
	WorkflowMode_value = map[string]int32{
		"WORKFLOW_MODE_SYSTEM":              0,
		"WORKFLOW_MODE_CUSTOMER":            1,
		"WORKFLOW_MODE_CUSTOMER_SUBVERSION": 2,
		"WORKFLOW_MODE_SYSTEM_SUBVERSION":   3,
	}
)

func (x WorkflowMode) Enum() *WorkflowMode {
	p := new(WorkflowMode)
	*p = x
	return p
}

func (x WorkflowMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowMode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[7].Descriptor()
}

func (WorkflowMode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[7]
}

func (x WorkflowMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowMode.Descriptor instead.
func (WorkflowMode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

type WorkflowComponentType int32

const (
	WorkflowComponentType_WORKFLOW_COMPONENT_TYPE_DOWNLOAD                WorkflowComponentType = 0 // 下载
	WorkflowComponentType_WORKFLOW_COMPONENT_TYPE_IVLD                    WorkflowComponentType = 1 // 智能标签
	WorkflowComponentType_WORKFLOW_COMPONENT_TYPE_FORMAT_CONVERT          WorkflowComponentType = 2 // 格式转码
	WorkflowComponentType_WORKFLOW_COMPONENT_TYPE_VIDEO_QUALITY_EVALUTION WorkflowComponentType = 3 // 视频质检
	WorkflowComponentType_WORKFLOW_COMPONENT_TYPE_PERSON_RETRIEVAL        WorkflowComponentType = 4 // 人脸集锦
	WorkflowComponentType_WORKFLOW_COMPONENT_TYPE_VIDEO_CONTENT_SAFETY    WorkflowComponentType = 5 // 视频内容安全
)

// Enum value maps for WorkflowComponentType.
var (
	WorkflowComponentType_name = map[int32]string{
		0: "WORKFLOW_COMPONENT_TYPE_DOWNLOAD",
		1: "WORKFLOW_COMPONENT_TYPE_IVLD",
		2: "WORKFLOW_COMPONENT_TYPE_FORMAT_CONVERT",
		3: "WORKFLOW_COMPONENT_TYPE_VIDEO_QUALITY_EVALUTION",
		4: "WORKFLOW_COMPONENT_TYPE_PERSON_RETRIEVAL",
		5: "WORKFLOW_COMPONENT_TYPE_VIDEO_CONTENT_SAFETY",
	}
	WorkflowComponentType_value = map[string]int32{
		"WORKFLOW_COMPONENT_TYPE_DOWNLOAD":                0,
		"WORKFLOW_COMPONENT_TYPE_IVLD":                    1,
		"WORKFLOW_COMPONENT_TYPE_FORMAT_CONVERT":          2,
		"WORKFLOW_COMPONENT_TYPE_VIDEO_QUALITY_EVALUTION": 3,
		"WORKFLOW_COMPONENT_TYPE_PERSON_RETRIEVAL":        4,
		"WORKFLOW_COMPONENT_TYPE_VIDEO_CONTENT_SAFETY":    5,
	}
)

func (x WorkflowComponentType) Enum() *WorkflowComponentType {
	p := new(WorkflowComponentType)
	*p = x
	return p
}

func (x WorkflowComponentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowComponentType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[8].Descriptor()
}

func (WorkflowComponentType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[8]
}

func (x WorkflowComponentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowComponentType.Descriptor instead.
func (WorkflowComponentType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

type SortType int32

const (
	SortType_SORT_TYPE_ASC  SortType = 0 // 升序
	SortType_SORT_TYPE_DESC SortType = 1 // 降序
)

// Enum value maps for SortType.
var (
	SortType_name = map[int32]string{
		0: "SORT_TYPE_ASC",
		1: "SORT_TYPE_DESC",
	}
	SortType_value = map[string]int32{
		"SORT_TYPE_ASC":  0,
		"SORT_TYPE_DESC": 1,
	}
)

func (x SortType) Enum() *SortType {
	p := new(SortType)
	*p = x
	return p
}

func (x SortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[9].Descriptor()
}

func (SortType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[9]
}

func (x SortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortType.Descriptor instead.
func (SortType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

type DeleteType int32

const (
	DeleteType_DELETE_TYPE_SOFT DeleteType = 0 // 软删除
	DeleteType_DELETE_TYPE_HARD DeleteType = 1 // 硬删除
)

// Enum value maps for DeleteType.
var (
	DeleteType_name = map[int32]string{
		0: "DELETE_TYPE_SOFT",
		1: "DELETE_TYPE_HARD",
	}
	DeleteType_value = map[string]int32{
		"DELETE_TYPE_SOFT": 0,
		"DELETE_TYPE_HARD": 1,
	}
)

func (x DeleteType) Enum() *DeleteType {
	p := new(DeleteType)
	*p = x
	return p
}

func (x DeleteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[10].Descriptor()
}

func (DeleteType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[10]
}

func (x DeleteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteType.Descriptor instead.
func (DeleteType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

type BindType int32

const (
	BindType_BIND_TYPE_COVER      BindType = 0 // 封面图绑定
	BindType_BIND_TYPE_SUBVERSION BindType = 1 // 子版本绑定
	BindType_BIND_TYPE_TRANSCODE  BindType = 2 // 转码素材绑定
)

// Enum value maps for BindType.
var (
	BindType_name = map[int32]string{
		0: "BIND_TYPE_COVER",
		1: "BIND_TYPE_SUBVERSION",
		2: "BIND_TYPE_TRANSCODE",
	}
	BindType_value = map[string]int32{
		"BIND_TYPE_COVER":      0,
		"BIND_TYPE_SUBVERSION": 1,
		"BIND_TYPE_TRANSCODE":  2,
	}
)

func (x BindType) Enum() *BindType {
	p := new(BindType)
	*p = x
	return p
}

func (x BindType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BindType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[11].Descriptor()
}

func (BindType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[11]
}

func (x BindType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BindType.Descriptor instead.
func (BindType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

type DomainGroupType int32

const (
	DomainGroupType_DOMAIN_GROUP_TYPE_PRIVATE           DomainGroupType = 0 // 私有
	DomainGroupType_DOMAIN_GROUP_TYPE_PUBLIC            DomainGroupType = 1 // 公开
	DomainGroupType_DOMAIN_GROUP_TYPE_PUBLIC_CENTER     DomainGroupType = 2 // 中心公开
	DomainGroupType_DOMAIN_GROUP_TYPE_PUBLIC_DEPARTMENT DomainGroupType = 3 // 部门公开
	DomainGroupType_DOMAIN_GROUP_TYPE_INDEPENDENT       DomainGroupType = 4 // 独立权限
	DomainGroupType_DOMAIN_GROUP_TYPE_GROUP             DomainGroupType = 5 // 群组(目前没用到)
)

// Enum value maps for DomainGroupType.
var (
	DomainGroupType_name = map[int32]string{
		0: "DOMAIN_GROUP_TYPE_PRIVATE",
		1: "DOMAIN_GROUP_TYPE_PUBLIC",
		2: "DOMAIN_GROUP_TYPE_PUBLIC_CENTER",
		3: "DOMAIN_GROUP_TYPE_PUBLIC_DEPARTMENT",
		4: "DOMAIN_GROUP_TYPE_INDEPENDENT",
		5: "DOMAIN_GROUP_TYPE_GROUP",
	}
	DomainGroupType_value = map[string]int32{
		"DOMAIN_GROUP_TYPE_PRIVATE":           0,
		"DOMAIN_GROUP_TYPE_PUBLIC":            1,
		"DOMAIN_GROUP_TYPE_PUBLIC_CENTER":     2,
		"DOMAIN_GROUP_TYPE_PUBLIC_DEPARTMENT": 3,
		"DOMAIN_GROUP_TYPE_INDEPENDENT":       4,
		"DOMAIN_GROUP_TYPE_GROUP":             5,
	}
)

func (x DomainGroupType) Enum() *DomainGroupType {
	p := new(DomainGroupType)
	*p = x
	return p
}

func (x DomainGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DomainGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[12].Descriptor()
}

func (DomainGroupType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[12]
}

func (x DomainGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DomainGroupType.Descriptor instead.
func (DomainGroupType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

type RetrieveInputType int32

const (
	RetrieveInputType_RETRIEVE_INPUT_TYPE_TEXT           RetrieveInputType = 0 // 文本检索
	RetrieveInputType_RETRIEVE_INPUT_TYPE_IMAGE_MEDIA_ID RetrieveInputType = 1 // 图片检索内容库输入
	RetrieveInputType_RETRIEVE_INPUT_TYPE_IMAGE_BASE64   RetrieveInputType = 2 // 图片检索base64输入
)

// Enum value maps for RetrieveInputType.
var (
	RetrieveInputType_name = map[int32]string{
		0: "RETRIEVE_INPUT_TYPE_TEXT",
		1: "RETRIEVE_INPUT_TYPE_IMAGE_MEDIA_ID",
		2: "RETRIEVE_INPUT_TYPE_IMAGE_BASE64",
	}
	RetrieveInputType_value = map[string]int32{
		"RETRIEVE_INPUT_TYPE_TEXT":           0,
		"RETRIEVE_INPUT_TYPE_IMAGE_MEDIA_ID": 1,
		"RETRIEVE_INPUT_TYPE_IMAGE_BASE64":   2,
	}
)

func (x RetrieveInputType) Enum() *RetrieveInputType {
	p := new(RetrieveInputType)
	*p = x
	return p
}

func (x RetrieveInputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RetrieveInputType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[13].Descriptor()
}

func (RetrieveInputType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[13]
}

func (x RetrieveInputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RetrieveInputType.Descriptor instead.
func (RetrieveInputType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

type RetrieveHitSourceType int32

const (
	RetrieveHitSourceType_RETRIEVE_HIT_SOURCE_TYPE_DEFAULT RetrieveHitSourceType = 0 // 兜底逻辑
	RetrieveHitSourceType_RETRIEVE_HIT_SOURCE_TYPE_ENGINE  RetrieveHitSourceType = 1 // 检索引擎
)

// Enum value maps for RetrieveHitSourceType.
var (
	RetrieveHitSourceType_name = map[int32]string{
		0: "RETRIEVE_HIT_SOURCE_TYPE_DEFAULT",
		1: "RETRIEVE_HIT_SOURCE_TYPE_ENGINE",
	}
	RetrieveHitSourceType_value = map[string]int32{
		"RETRIEVE_HIT_SOURCE_TYPE_DEFAULT": 0,
		"RETRIEVE_HIT_SOURCE_TYPE_ENGINE":  1,
	}
)

func (x RetrieveHitSourceType) Enum() *RetrieveHitSourceType {
	p := new(RetrieveHitSourceType)
	*p = x
	return p
}

func (x RetrieveHitSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RetrieveHitSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[14].Descriptor()
}

func (RetrieveHitSourceType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[14]
}

func (x RetrieveHitSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RetrieveHitSourceType.Descriptor instead.
func (RetrieveHitSourceType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

type ExtractImageType int32

const (
	ExtractImageType_EXTRACT_IMAGE_TYPE_BASE64   ExtractImageType = 0 // 返回base64
	ExtractImageType_EXTRACT_IMAGE_TYPE_MEDIA_ID ExtractImageType = 1 // 返回mediaID
)

// Enum value maps for ExtractImageType.
var (
	ExtractImageType_name = map[int32]string{
		0: "EXTRACT_IMAGE_TYPE_BASE64",
		1: "EXTRACT_IMAGE_TYPE_MEDIA_ID",
	}
	ExtractImageType_value = map[string]int32{
		"EXTRACT_IMAGE_TYPE_BASE64":   0,
		"EXTRACT_IMAGE_TYPE_MEDIA_ID": 1,
	}
)

func (x ExtractImageType) Enum() *ExtractImageType {
	p := new(ExtractImageType)
	*p = x
	return p
}

func (x ExtractImageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtractImageType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[15].Descriptor()
}

func (ExtractImageType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[15]
}

func (x ExtractImageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtractImageType.Descriptor instead.
func (ExtractImageType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

// 工作流模板状态
type WorkflowTemplateStatus int32

const (
	WorkflowTemplateStatus_WORKFLOW_TEMPLATE_STATUS_INIT         WorkflowTemplateStatus = 0 // 模板初始状态
	WorkflowTemplateStatus_WORKFLOW_TEMPLATE_STATUS_INACTIVE     WorkflowTemplateStatus = 1 // 模板未激活
	WorkflowTemplateStatus_WORKFLOW_TEMPLATE_STATUS_ACTIVE       WorkflowTemplateStatus = 2 // 模板激活
	WorkflowTemplateStatus_WORKFLOW_TEMPLATE_STATUS_DELETED_SOFT WorkflowTemplateStatus = 3 // 模板被软删除
	WorkflowTemplateStatus_WORKFLOW_TEMPLATE_STATUS_DELETED_HARD WorkflowTemplateStatus = 4 // 模板被硬删除
)

// Enum value maps for WorkflowTemplateStatus.
var (
	WorkflowTemplateStatus_name = map[int32]string{
		0: "WORKFLOW_TEMPLATE_STATUS_INIT",
		1: "WORKFLOW_TEMPLATE_STATUS_INACTIVE",
		2: "WORKFLOW_TEMPLATE_STATUS_ACTIVE",
		3: "WORKFLOW_TEMPLATE_STATUS_DELETED_SOFT",
		4: "WORKFLOW_TEMPLATE_STATUS_DELETED_HARD",
	}
	WorkflowTemplateStatus_value = map[string]int32{
		"WORKFLOW_TEMPLATE_STATUS_INIT":         0,
		"WORKFLOW_TEMPLATE_STATUS_INACTIVE":     1,
		"WORKFLOW_TEMPLATE_STATUS_ACTIVE":       2,
		"WORKFLOW_TEMPLATE_STATUS_DELETED_SOFT": 3,
		"WORKFLOW_TEMPLATE_STATUS_DELETED_HARD": 4,
	}
)

func (x WorkflowTemplateStatus) Enum() *WorkflowTemplateStatus {
	p := new(WorkflowTemplateStatus)
	*p = x
	return p
}

func (x WorkflowTemplateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowTemplateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[16].Descriptor()
}

func (WorkflowTemplateStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[16]
}

func (x WorkflowTemplateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowTemplateStatus.Descriptor instead.
func (WorkflowTemplateStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

type RetrieveTagType int32

const (
	RetrieveTagType_RETRIEVE_TAG_TYPE_LANDMARK RetrieveTagType = 0 // 地标
	RetrieveTagType_RETRIEVE_TAG_TYPE_PERSON   RetrieveTagType = 1 // 人脸
)

// Enum value maps for RetrieveTagType.
var (
	RetrieveTagType_name = map[int32]string{
		0: "RETRIEVE_TAG_TYPE_LANDMARK",
		1: "RETRIEVE_TAG_TYPE_PERSON",
	}
	RetrieveTagType_value = map[string]int32{
		"RETRIEVE_TAG_TYPE_LANDMARK": 0,
		"RETRIEVE_TAG_TYPE_PERSON":   1,
	}
)

func (x RetrieveTagType) Enum() *RetrieveTagType {
	p := new(RetrieveTagType)
	*p = x
	return p
}

func (x RetrieveTagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RetrieveTagType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[17].Descriptor()
}

func (RetrieveTagType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[17]
}

func (x RetrieveTagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RetrieveTagType.Descriptor instead.
func (RetrieveTagType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

// 任务状态
type TaskStatus int32

const (
	TaskStatus_TASK_STATUS_INVALID   TaskStatus = 0 // 任务无效
	TaskStatus_TASK_STATUS_CREATED   TaskStatus = 1 // 任务创建并且未进入等待队列
	TaskStatus_TASK_STATUS_WAITING   TaskStatus = 2 // 任务进入等待队列
	TaskStatus_TASK_STATUS_ANALYSING TaskStatus = 3 // 任务分析中
	TaskStatus_TASK_STATUS_ANALYSED  TaskStatus = 4 // 任务分析完成
	TaskStatus_TASK_STATUS_FAILED    TaskStatus = 5 // 任务执行失败
	TaskStatus_TASK_STATUS_STOPED    TaskStatus = 6 // 任务暂停
	TaskStatus_TASK_STATUS_DELETED   TaskStatus = 7 // 任务被删除
	TaskStatus_TASK_STATUS_EXPORTING TaskStatus = 8 // 任务导出中
	TaskStatus_TASK_STATUS_CLEANED   TaskStatus = 9 // 任务已清理
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "TASK_STATUS_INVALID",
		1: "TASK_STATUS_CREATED",
		2: "TASK_STATUS_WAITING",
		3: "TASK_STATUS_ANALYSING",
		4: "TASK_STATUS_ANALYSED",
		5: "TASK_STATUS_FAILED",
		6: "TASK_STATUS_STOPED",
		7: "TASK_STATUS_DELETED",
		8: "TASK_STATUS_EXPORTING",
		9: "TASK_STATUS_CLEANED",
	}
	TaskStatus_value = map[string]int32{
		"TASK_STATUS_INVALID":   0,
		"TASK_STATUS_CREATED":   1,
		"TASK_STATUS_WAITING":   2,
		"TASK_STATUS_ANALYSING": 3,
		"TASK_STATUS_ANALYSED":  4,
		"TASK_STATUS_FAILED":    5,
		"TASK_STATUS_STOPED":    6,
		"TASK_STATUS_DELETED":   7,
		"TASK_STATUS_EXPORTING": 8,
		"TASK_STATUS_CLEANED":   9,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[18].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[18]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

type OperateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       OperateStatus `protobuf:"varint,1,opt,name=Status,proto3,enum=trpc.media.common.OperateStatus" json:"Status,omitempty"`
	FailedReason string        `protobuf:"bytes,2,opt,name=FailedReason,proto3" json:"FailedReason,omitempty"`
}

func (x *OperateResponse) Reset() {
	*x = OperateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateResponse) ProtoMessage() {}

func (x *OperateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateResponse.ProtoReflect.Descriptor instead.
func (*OperateResponse) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *OperateResponse) GetStatus() OperateStatus {
	if x != nil {
		return x.Status
	}
	return OperateStatus_OPERATE_STATUS_SUCCESS
}

func (x *OperateResponse) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

type TaskTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName    string           `protobuf:"bytes,1,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	ApiModule   string           `protobuf:"bytes,2,opt,name=ApiModule,proto3" json:"ApiModule,omitempty"`
	CallbackURL string           `protobuf:"bytes,3,opt,name=CallbackURL,proto3" json:"CallbackURL,omitempty"`
	Parameter   *structpb.Struct `protobuf:"bytes,4,opt,name=Parameter,proto3" json:"Parameter,omitempty"` // 可以接受任何 json 对应参数
}

func (x *TaskTemplate) Reset() {
	*x = TaskTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTemplate) ProtoMessage() {}

func (x *TaskTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTemplate.ProtoReflect.Descriptor instead.
func (*TaskTemplate) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *TaskTemplate) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskTemplate) GetApiModule() string {
	if x != nil {
		return x.ApiModule
	}
	return ""
}

func (x *TaskTemplate) GetCallbackURL() string {
	if x != nil {
		return x.CallbackURL
	}
	return ""
}

func (x *TaskTemplate) GetParameter() *structpb.Struct {
	if x != nil {
		return x.Parameter
	}
	return nil
}

type FlowDirection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpIndex   uint32 `protobuf:"varint,1,opt,name=UpIndex,proto3" json:"UpIndex,omitempty"`
	DownIndex uint32 `protobuf:"varint,2,opt,name=DownIndex,proto3" json:"DownIndex,omitempty"`
}

func (x *FlowDirection) Reset() {
	*x = FlowDirection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowDirection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowDirection) ProtoMessage() {}

func (x *FlowDirection) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowDirection.ProtoReflect.Descriptor instead.
func (*FlowDirection) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *FlowDirection) GetUpIndex() uint32 {
	if x != nil {
		return x.UpIndex
	}
	return 0
}

func (x *FlowDirection) GetDownIndex() uint32 {
	if x != nil {
		return x.DownIndex
	}
	return 0
}

type WorkflowTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskTemplateSet  []*TaskTemplate  `protobuf:"bytes,1,rep,name=TaskTemplateSet,proto3" json:"TaskTemplateSet,omitempty"`
	FlowDirectionSet []*FlowDirection `protobuf:"bytes,2,rep,name=FlowDirectionSet,proto3" json:"FlowDirectionSet,omitempty"`
}

func (x *WorkflowTemplate) Reset() {
	*x = WorkflowTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowTemplate) ProtoMessage() {}

func (x *WorkflowTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowTemplate.ProtoReflect.Descriptor instead.
func (*WorkflowTemplate) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *WorkflowTemplate) GetTaskTemplateSet() []*TaskTemplate {
	if x != nil {
		return x.TaskTemplateSet
	}
	return nil
}

func (x *WorkflowTemplate) GetFlowDirectionSet() []*FlowDirection {
	if x != nil {
		return x.FlowDirectionSet
	}
	return nil
}

type DomainGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainGroupType DomainGroupType `protobuf:"varint,1,opt,name=DomainGroupType,json=group_type,proto3,enum=trpc.media.common.DomainGroupType" json:"DomainGroupType,omitempty"` // 权限类型
	DomainGroupId   string          `protobuf:"bytes,2,opt,name=DomainGroupId,json=group_id,proto3" json:"DomainGroupId,omitempty"`                                               // 群组Id
}

func (x *DomainGroupInfo) Reset() {
	*x = DomainGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainGroupInfo) ProtoMessage() {}

func (x *DomainGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainGroupInfo.ProtoReflect.Descriptor instead.
func (*DomainGroupInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *DomainGroupInfo) GetDomainGroupType() DomainGroupType {
	if x != nil {
		return x.DomainGroupType
	}
	return DomainGroupType_DOMAIN_GROUP_TYPE_PRIVATE
}

func (x *DomainGroupInfo) GetDomainGroupId() string {
	if x != nil {
		return x.DomainGroupId
	}
	return ""
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string     `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                                                // 过滤的字段名
	FilterType FilterType `protobuf:"varint,2,opt,name=FilterType,proto3,enum=trpc.media.common.FilterType" json:"FilterType,omitempty"` // 过滤的字段的关系
	ValueSet   []string   `protobuf:"bytes,3,rep,name=ValueSet,proto3" json:"ValueSet,omitempty"`                                        // 过滤字段对应的值
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *Filter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Filter) GetFilterType() FilterType {
	if x != nil {
		return x.FilterType
	}
	return FilterType_FILTER_TYPE_EQUAL
}

func (x *Filter) GetValueSet() []string {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

type Sorter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                                          // 排序的字段名
	SortType SortType `protobuf:"varint,2,opt,name=SortType,proto3,enum=trpc.media.common.SortType" json:"SortType,omitempty"` // 排序字段的值
}

func (x *Sorter) Reset() {
	*x = Sorter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sorter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sorter) ProtoMessage() {}

func (x *Sorter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sorter.ProtoReflect.Descriptor instead.
func (*Sorter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *Sorter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sorter) GetSortType() SortType {
	if x != nil {
		return x.SortType
	}
	return SortType_SORT_TYPE_ASC
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin           string `protobuf:"bytes,1,opt,name=Uin,proto3" json:"Uin,omitempty"`                     // 用户主账号
	SubAccountUin string `protobuf:"bytes,2,opt,name=SubAccountUin,proto3" json:"SubAccountUin,omitempty"` // 用户子账号
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *UserInfo) GetUin() string {
	if x != nil {
		return x.Uin
	}
	return ""
}

func (x *UserInfo) GetSubAccountUin() string {
	if x != nil {
		return x.SubAccountUin
	}
	return ""
}

type Deleter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string     `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                                                // 删除字段名
	DeleteType DeleteType `protobuf:"varint,2,opt,name=DeleteType,proto3,enum=trpc.media.common.DeleteType" json:"DeleteType,omitempty"` // 删除类型：硬删除/软删除
	ValueSet   []string   `protobuf:"bytes,3,rep,name=ValueSet,proto3" json:"ValueSet,omitempty"`                                        // 删除字段对应的值
}

func (x *Deleter) Reset() {
	*x = Deleter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deleter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deleter) ProtoMessage() {}

func (x *Deleter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deleter.ProtoReflect.Descriptor instead.
func (*Deleter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *Deleter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Deleter) GetDeleteType() DeleteType {
	if x != nil {
		return x.DeleteType
	}
	return DeleteType_DELETE_TYPE_SOFT
}

func (x *Deleter) GetValueSet() []string {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

type StampInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimestamp string `protobuf:"bytes,1,opt,name=StartTimestamp,proto3" json:"StartTimestamp,omitempty"`
	EndTimestamp   string `protobuf:"bytes,2,opt,name=EndTimestamp,proto3" json:"EndTimestamp,omitempty"`
}

func (x *StampInfo) Reset() {
	*x = StampInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StampInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StampInfo) ProtoMessage() {}

func (x *StampInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StampInfo.ProtoReflect.Descriptor instead.
func (*StampInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *StampInfo) GetStartTimestamp() string {
	if x != nil {
		return x.StartTimestamp
	}
	return ""
}

func (x *StampInfo) GetEndTimestamp() string {
	if x != nil {
		return x.EndTimestamp
	}
	return ""
}

type Rect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X      int32 `protobuf:"varint,1,opt,name=X,proto3" json:"X,omitempty"`
	Y      int32 `protobuf:"varint,2,opt,name=Y,proto3" json:"Y,omitempty"`
	Width  int32 `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`
	Height int32 `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (x *Rect) Reset() {
	*x = Rect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rect) ProtoMessage() {}

func (x *Rect) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rect.ProtoReflect.Descriptor instead.
func (*Rect) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *Rect) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Rect) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Rect) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Rect) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Rectf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X      float32 `protobuf:"fixed32,1,opt,name=X,proto3" json:"X,omitempty"`
	Y      float32 `protobuf:"fixed32,2,opt,name=Y,proto3" json:"Y,omitempty"`
	Width  float32 `protobuf:"fixed32,3,opt,name=Width,proto3" json:"Width,omitempty"`
	Height float32 `protobuf:"fixed32,4,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (x *Rectf) Reset() {
	*x = Rectf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rectf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rectf) ProtoMessage() {}

func (x *Rectf) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rectf.ProtoReflect.Descriptor instead.
func (*Rectf) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *Rectf) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Rectf) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Rectf) GetWidth() float32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Rectf) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type TranscodeMediaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranscodeMediaId     string     `protobuf:"bytes,1,opt,name=TranscodeMediaId,proto3" json:"TranscodeMediaId,omitempty"`
	TranscodeMediaStatus TaskStatus `protobuf:"varint,3,opt,name=TranscodeMediaStatus,proto3,enum=trpc.media.common.TaskStatus" json:"TranscodeMediaStatus,omitempty"`
}

func (x *TranscodeMediaInfo) Reset() {
	*x = TranscodeMediaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeMediaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeMediaInfo) ProtoMessage() {}

func (x *TranscodeMediaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeMediaInfo.ProtoReflect.Descriptor instead.
func (*TranscodeMediaInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (x *TranscodeMediaInfo) GetTranscodeMediaId() string {
	if x != nil {
		return x.TranscodeMediaId
	}
	return ""
}

func (x *TranscodeMediaInfo) GetTranscodeMediaStatus() TaskStatus {
	if x != nil {
		return x.TranscodeMediaStatus
	}
	return TaskStatus_TASK_STATUS_INVALID
}

type TimeInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string `protobuf:"bytes,1,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime   string `protobuf:"bytes,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
}

func (x *TimeInterval) Reset() {
	*x = TimeInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeInterval) ProtoMessage() {}

func (x *TimeInterval) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeInterval.ProtoReflect.Descriptor instead.
func (*TimeInterval) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (x *TimeInterval) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TimeInterval) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type TaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId             string              `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	TaskName           string              `protobuf:"bytes,2,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	ApiModule          string              `protobuf:"bytes,3,opt,name=ApiModule,proto3" json:"ApiModule,omitempty"`
	MediaId            string              `protobuf:"bytes,4,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	MediaName          string              `protobuf:"bytes,5,opt,name=MediaName,proto3" json:"MediaName,omitempty"`
	MediaDuration      float32             `protobuf:"fixed32,6,opt,name=MediaDuration,proto3" json:"MediaDuration,omitempty"`
	TaskStatus         TaskStatus          `protobuf:"varint,7,opt,name=TaskStatus,proto3,enum=trpc.media.common.TaskStatus" json:"TaskStatus,omitempty"`
	TaskProgress       float32             `protobuf:"fixed32,8,opt,name=TaskProgress,proto3" json:"TaskProgress,omitempty"`
	TaskTimeCost       uint32              `protobuf:"varint,9,opt,name=TaskTimeCost,proto3" json:"TaskTimeCost,omitempty"`     // Time Cost in seconds
	TaskStartTime      string              `protobuf:"bytes,10,opt,name=TaskStartTime,proto3" json:"TaskStartTime,omitempty"`   // Unix timestamp
	TaskCreateTime     string              `protobuf:"bytes,11,opt,name=TaskCreateTime,proto3" json:"TaskCreateTime,omitempty"` // Unix timestamp
	FailedReason       string              `protobuf:"bytes,12,opt,name=FailedReason,proto3" json:"FailedReason,omitempty"`
	CreateUser         string              `protobuf:"bytes,13,opt,name=CreateUser,proto3" json:"CreateUser,omitempty"`
	TaskUpdateTime     string              `protobuf:"bytes,14,opt,name=TaskUpdateTime,proto3" json:"TaskUpdateTime,omitempty"` // Unix timestamp
	TranscodeMediaInfo *TranscodeMediaInfo `protobuf:"bytes,15,opt,name=TranscodeMediaInfo,proto3" json:"TranscodeMediaInfo,omitempty"`
	FlowId             string              `protobuf:"bytes,16,opt,name=FlowId,proto3" json:"FlowId,omitempty"`
	Parameter          string              `protobuf:"bytes,17,opt,name=Parameter,proto3" json:"Parameter,omitempty"`
	MediaType          MediaType           `protobuf:"varint,18,opt,name=MediaType,proto3,enum=trpc.media.common.MediaType" json:"MediaType,omitempty"`
	MediaTag           CategoryTagType     `protobuf:"varint,19,opt,name=MediaTag,proto3,enum=trpc.media.common.CategoryTagType" json:"MediaTag,omitempty"`
}

func (x *TaskInfo) Reset() {
	*x = TaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfo) ProtoMessage() {}

func (x *TaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfo.ProtoReflect.Descriptor instead.
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *TaskInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskInfo) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskInfo) GetApiModule() string {
	if x != nil {
		return x.ApiModule
	}
	return ""
}

func (x *TaskInfo) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *TaskInfo) GetMediaName() string {
	if x != nil {
		return x.MediaName
	}
	return ""
}

func (x *TaskInfo) GetMediaDuration() float32 {
	if x != nil {
		return x.MediaDuration
	}
	return 0
}

func (x *TaskInfo) GetTaskStatus() TaskStatus {
	if x != nil {
		return x.TaskStatus
	}
	return TaskStatus_TASK_STATUS_INVALID
}

func (x *TaskInfo) GetTaskProgress() float32 {
	if x != nil {
		return x.TaskProgress
	}
	return 0
}

func (x *TaskInfo) GetTaskTimeCost() uint32 {
	if x != nil {
		return x.TaskTimeCost
	}
	return 0
}

func (x *TaskInfo) GetTaskStartTime() string {
	if x != nil {
		return x.TaskStartTime
	}
	return ""
}

func (x *TaskInfo) GetTaskCreateTime() string {
	if x != nil {
		return x.TaskCreateTime
	}
	return ""
}

func (x *TaskInfo) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *TaskInfo) GetCreateUser() string {
	if x != nil {
		return x.CreateUser
	}
	return ""
}

func (x *TaskInfo) GetTaskUpdateTime() string {
	if x != nil {
		return x.TaskUpdateTime
	}
	return ""
}

func (x *TaskInfo) GetTranscodeMediaInfo() *TranscodeMediaInfo {
	if x != nil {
		return x.TranscodeMediaInfo
	}
	return nil
}

func (x *TaskInfo) GetFlowId() string {
	if x != nil {
		return x.FlowId
	}
	return ""
}

func (x *TaskInfo) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

func (x *TaskInfo) GetMediaType() MediaType {
	if x != nil {
		return x.MediaType
	}
	return MediaType_MEDIA_TYPE_OTHER
}

func (x *TaskInfo) GetMediaTag() CategoryTagType {
	if x != nil {
		return x.MediaTag
	}
	return CategoryTagType_CATEGORY_TAG_TYPE_OTHER
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x0f, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa1, 0x01, 0x0a, 0x0c,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x69, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x69,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x12, 0x35, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22,
	0x47, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x55, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x55, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x6f,
	0x77, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44,
	0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xab, 0x01, 0x0a, 0x10, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a,
	0x0f, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x77,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x22, 0x7b, 0x0a, 0x0f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0f, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0x55, 0x0a, 0x06,
	0x53, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x53, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x69,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x75, 0x62, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69, 0x6e, 0x22, 0x78, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x22, 0x57, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26,
	0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x50, 0x0a, 0x04, 0x52, 0x65,
	0x63, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x58,
	0x12, 0x0c, 0x0a, 0x01, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x59, 0x12, 0x14,
	0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x51, 0x0a, 0x05,
	0x52, 0x65, 0x63, 0x74, 0x66, 0x12, 0x0c, 0x0a, 0x01, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x58, 0x12, 0x0c, 0x0a, 0x01, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x59, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x93, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x64, 0x12, 0x51, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x46, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x06,
	0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x70, 0x69, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x41, 0x70, 0x69, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x61, 0x73,
	0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x61, 0x67,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x61, 0x67, 0x2a, 0x46, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xf6, 0x01, 0x0a,
	0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x41, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x53, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x45, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x52, 0x59, 0x10,
	0x05, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x41,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x06, 0x2a, 0xa0, 0x04, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4d, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x20,
	0x0a, 0x1c, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x44, 0x10, 0x08,
	0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x09, 0x12,
	0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x10, 0x0a, 0x12, 0x2c,
	0x0a, 0x28, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x48, 0x41, 0x52, 0x44,
	0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c,
	0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x0f, 0x2a, 0xcd, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x07, 0x2a, 0xbe, 0x02, 0x0a, 0x0f, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x52, 0x4f, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x56, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x56, 0x53,
	0x52, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x4f,
	0x44, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x56, 0x53, 0x43, 0x10, 0x05,
	0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x56, 0x4c, 0x44, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10,
	0x07, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x56, 0x52, 0x4f, 0x54, 0x10, 0x08, 0x12, 0x19,
	0x0a, 0x15, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x54, 0x53, 0x10, 0x09, 0x2a, 0x3b, 0x0a, 0x08, 0x4c, 0x61, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x41, 0x4e, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x4c, 0x41, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x54, 0x4f,
	0x4e, 0x45, 0x53, 0x45, 0x10, 0x01, 0x2a, 0xeb, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10,
	0x05, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x15, 0x0a,
	0x11, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47,
	0x45, 0x58, 0x10, 0x08, 0x2a, 0x90, 0x01, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x57,
	0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x55, 0x42, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0xa0, 0x02, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x4f, 0x52, 0x4b, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x56, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x57, 0x4f, 0x52,
	0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x56,
	0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45,
	0x56, 0x41, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x54,
	0x52, 0x49, 0x45, 0x56, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x57, 0x4f, 0x52, 0x4b,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x54, 0x59, 0x10, 0x05, 0x2a, 0x31, 0x0a, 0x08, 0x53, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x52,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x2a, 0x38, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x41, 0x52, 0x44, 0x10, 0x01, 0x2a, 0x52, 0x0a, 0x08, 0x42, 0x69, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x49, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x2a, 0xdc, 0x01, 0x0a, 0x0f,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f,
	0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x44, 0x45,
	0x50, 0x41, 0x52, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4f,
	0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x1b, 0x0a,
	0x17, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x05, 0x2a, 0x7f, 0x0a, 0x11, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x26, 0x0a,
	0x22, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56,
	0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x36, 0x34, 0x10, 0x02, 0x2a, 0x62, 0x0a, 0x15, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x48, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x45,
	0x5f, 0x48, 0x49, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45,
	0x54, 0x52, 0x49, 0x45, 0x56, 0x45, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x2a,
	0x52, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x36, 0x34,
	0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x49,
	0x44, 0x10, 0x01, 0x2a, 0xdd, 0x01, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x1d, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10,
	0x00, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x45,
	0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x57, 0x4f, 0x52, 0x4b,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x29, 0x0a,
	0x25, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x57, 0x4f, 0x52, 0x4b,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x48, 0x41, 0x52,
	0x44, 0x10, 0x04, 0x2a, 0x4f, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54,
	0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45,
	0x56, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x4e, 0x44,
	0x4d, 0x41, 0x52, 0x4b, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45,
	0x56, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53,
	0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x89, 0x02, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4e,
	0x41, 0x4c, 0x59, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x4f,
	0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x45, 0x44, 0x10, 0x09,
	0x42, 0x59, 0x5a, 0x57, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54,
	0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x73, 0x64, 0x6b,
	0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73, 0x70, 0x65,
	0x63, 0x2f, 0x61, 0x70, 0x69, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 19)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_common_proto_goTypes = []interface{}{
	(OperateStatus)(0),          // 0: trpc.media.common.OperateStatus
	(CategoryTagType)(0),        // 1: trpc.media.common.CategoryTagType
	(MediaStatus)(0),            // 2: trpc.media.common.MediaStatus
	(MediaType)(0),              // 3: trpc.media.common.MediaType
	(MediaSourceType)(0),        // 4: trpc.media.common.MediaSourceType
	(LangType)(0),               // 5: trpc.media.common.LangType
	(FilterType)(0),             // 6: trpc.media.common.FilterType
	(WorkflowMode)(0),           // 7: trpc.media.common.WorkflowMode
	(WorkflowComponentType)(0),  // 8: trpc.media.common.WorkflowComponentType
	(SortType)(0),               // 9: trpc.media.common.SortType
	(DeleteType)(0),             // 10: trpc.media.common.DeleteType
	(BindType)(0),               // 11: trpc.media.common.BindType
	(DomainGroupType)(0),        // 12: trpc.media.common.DomainGroupType
	(RetrieveInputType)(0),      // 13: trpc.media.common.RetrieveInputType
	(RetrieveHitSourceType)(0),  // 14: trpc.media.common.RetrieveHitSourceType
	(ExtractImageType)(0),       // 15: trpc.media.common.ExtractImageType
	(WorkflowTemplateStatus)(0), // 16: trpc.media.common.WorkflowTemplateStatus
	(RetrieveTagType)(0),        // 17: trpc.media.common.RetrieveTagType
	(TaskStatus)(0),             // 18: trpc.media.common.TaskStatus
	(*OperateResponse)(nil),     // 19: trpc.media.common.OperateResponse
	(*TaskTemplate)(nil),        // 20: trpc.media.common.TaskTemplate
	(*FlowDirection)(nil),       // 21: trpc.media.common.FlowDirection
	(*WorkflowTemplate)(nil),    // 22: trpc.media.common.WorkflowTemplate
	(*DomainGroupInfo)(nil),     // 23: trpc.media.common.DomainGroupInfo
	(*Filter)(nil),              // 24: trpc.media.common.Filter
	(*Sorter)(nil),              // 25: trpc.media.common.Sorter
	(*UserInfo)(nil),            // 26: trpc.media.common.UserInfo
	(*Deleter)(nil),             // 27: trpc.media.common.Deleter
	(*StampInfo)(nil),           // 28: trpc.media.common.StampInfo
	(*Rect)(nil),                // 29: trpc.media.common.Rect
	(*Rectf)(nil),               // 30: trpc.media.common.Rectf
	(*TranscodeMediaInfo)(nil),  // 31: trpc.media.common.TranscodeMediaInfo
	(*TimeInterval)(nil),        // 32: trpc.media.common.TimeInterval
	(*TaskInfo)(nil),            // 33: trpc.media.common.TaskInfo
	(*structpb.Struct)(nil),     // 34: google.protobuf.Struct
}
var file_common_proto_depIdxs = []int32{
	0,  // 0: trpc.media.common.OperateResponse.Status:type_name -> trpc.media.common.OperateStatus
	34, // 1: trpc.media.common.TaskTemplate.Parameter:type_name -> google.protobuf.Struct
	20, // 2: trpc.media.common.WorkflowTemplate.TaskTemplateSet:type_name -> trpc.media.common.TaskTemplate
	21, // 3: trpc.media.common.WorkflowTemplate.FlowDirectionSet:type_name -> trpc.media.common.FlowDirection
	12, // 4: trpc.media.common.DomainGroupInfo.DomainGroupType:type_name -> trpc.media.common.DomainGroupType
	6,  // 5: trpc.media.common.Filter.FilterType:type_name -> trpc.media.common.FilterType
	9,  // 6: trpc.media.common.Sorter.SortType:type_name -> trpc.media.common.SortType
	10, // 7: trpc.media.common.Deleter.DeleteType:type_name -> trpc.media.common.DeleteType
	18, // 8: trpc.media.common.TranscodeMediaInfo.TranscodeMediaStatus:type_name -> trpc.media.common.TaskStatus
	18, // 9: trpc.media.common.TaskInfo.TaskStatus:type_name -> trpc.media.common.TaskStatus
	31, // 10: trpc.media.common.TaskInfo.TranscodeMediaInfo:type_name -> trpc.media.common.TranscodeMediaInfo
	3,  // 11: trpc.media.common.TaskInfo.MediaType:type_name -> trpc.media.common.MediaType
	1,  // 12: trpc.media.common.TaskInfo.MediaTag:type_name -> trpc.media.common.CategoryTagType
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowDirection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sorter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deleter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StampInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rectf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeMediaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      19,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
