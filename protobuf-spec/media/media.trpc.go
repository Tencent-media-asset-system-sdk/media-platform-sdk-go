// Code generated by trpc-go/trpc-go-cmdline v2.2.18. DO NOT EDIT.
// source: media.proto

package media

import (
	"context"
	"errors"
	"fmt"

	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/client"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/codec"
	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/http"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/server"
)

// START ======================================= Server Service Definition ======================================= START

// MediaService defines service.
type MediaService interface {
	// CreateMedias 资源管理
	CreateMedias(ctx context.Context, req *CreateMediasRequest, rsp *CreateMediasResponse) (err error) // @alias=/CreateMedias

	CommitMedias(ctx context.Context, req *CommitMediasRequest, rsp *CommitMediasResponse) (err error) // @alias=/CommitMedias

	DescribeMedias(ctx context.Context, req *DescribeMediasRequest, rsp *DescribeMediasResponse) (err error) // @alias=/DescribeMedias

	DescribeMediaDetails(ctx context.Context, req *DescribeMediaDetailsRequest, rsp *DescribeMediaDetailsResponse) (err error) // @alias=/DescribeMediaDetails

	DeleteMedias(ctx context.Context, req *DeleteMediasRequest, rsp *DeleteMediasResponse) (err error) // @alias=/DeleteMedias

	RestoreDeletedMedias(ctx context.Context, req *RestoreDeletedMediasRequest, rsp *RestoreDeletedMediasResponse) (err error) // @alias=/RestoreDeletedMedias

	EmptyTrash(ctx context.Context, req *EmptyTrashRequest, rsp *EmptyTrashResponse) (err error) // @alias=/EmptyTrash

	DescribeCategories(ctx context.Context, req *DescribeCategoriesRequest, rsp *DescribeCategoriesResponse) (err error) // @alias=/DescribeCategories

	ModifyMedia(ctx context.Context, req *ModifyMediaRequest, rsp *ModifyMediaResponse) (err error) // @alias=/ModifyMedia

	RetrieveRelevantTags(ctx context.Context, req *RetrieveRelevantTagsRequest, rsp *RetrieveRelevantTagsResponse) (err error) // @alias=/RetrieveRelevantTags

	RetrieveLexicalEntry(ctx context.Context, req *RetrieveLexicalEntryRequest, rsp *RetrieveLexicalEntryResponse) (err error) // @alias=/RetrieveLexicalEntry
	// RetrieveTitleMedias RetrieveTitleMedias 和 RetrieveContentMedias 目前废弃不用了
	RetrieveTitleMedias(ctx context.Context, req *RetrieveMediasRequest, rsp *RetrieveMediasResponse) (err error) // @alias=/RetrieveTitleMedias

	RetrieveContentMedias(ctx context.Context, req *RetrieveMediasRequest, rsp *RetrieveMediasResponse) (err error) // @alias=/RetrieveContentMedias

	RetrieveTextMultiModalMedias(ctx context.Context, req *RetrieveMediasRequest, rsp *RetrieveMediasResponse) (err error) // @alias=/RetrieveTextMultiModalMedias

	RetrieveTextCrossModalMedias(ctx context.Context, req *RetrieveMediasRequest, rsp *RetrieveMediasResponse) (err error) // @alias=/RetrieveTextCrossModalMedias

	RetrieveSimilarMedias(ctx context.Context, req *RetrieveMediasRequest, rsp *RetrieveMediasResponse) (err error) // @alias=/RetrieveSimilarMedias

	RetrieveFaces(ctx context.Context, req *RetrieveMediasRequest, rsp *RetrieveFacesResponse) (err error) // @alias=/RetrieveFaces

	RetrieveConsistentMedias(ctx context.Context, req *RetrieveConsistentMediasRequest, rsp *RetrieveConsistentMediasResponse) (err error) // @alias=/RetrieveConsistentMedias

	AssociateWords(ctx context.Context, req *AssociateWordsRequest, rsp *AssociateWordsResponse) (err error) // @alias=/AssociateWords

	ExtractImages(ctx context.Context, req *ExtractImagesRequest, rsp *ExtractImagesResponse) (err error) // @alias=/ExtractImages
	// CreateResourcePackage 资源包管理
	CreateResourcePackage(ctx context.Context, req *CreateResourcePackageRequest, rsp *CreateResourcePackageResponse) (err error) // @alias=/CreateResourcePackage

	DeleteResourcePackage(ctx context.Context, req *DeleteResourcePackageRequest, rsp *ResourcePackageOperateResponse) (err error) // @alias=/DeleteResourcePackage

	UpdateResourcePackage(ctx context.Context, req *UpdateResourcePackageRequest, rsp *ResourcePackageOperateResponse) (err error) // @alias=/UpdateResourcePackage

	DescribeResourcePackage(ctx context.Context, req *DescribeResourcePackageRequest, rsp *DescribePackageResponse) (err error) // @alias=/DescribeResourcePackage

	AddResourceToPackage(ctx context.Context, req *AddResourceToPackageRequest, rsp *AddResourceToPackageResponse) (err error) // @alias=/AddResourceToPackage

	DeleteResourceFromPackage(ctx context.Context, req *DeleteResourceFromPackageRequest, rsp *ResourcePackageOperateResponse) (err error) // @alias=/DeleteResourceFromPackage

	UndeleteResourceFromPackage(ctx context.Context, req *UndeleteResourceFromPackageRequest, rsp *ResourcePackageOperateResponse) (err error) // @alias=/UndeleteResourceFromPackage
	// BindMedias 内部接口
	BindMedias(ctx context.Context, req *BindMediasRequest, rsp *BindMediasResponse) (err error) // @alias=/BindMedias

	DescribeMediaDetailsInner(ctx context.Context, req *DescribeMediaDetailsInnerRequest, rsp *DescribeMediaDetailsInnerResponse) (err error) // @alias=/DescribeMediaDetailsInner
}

func MediaService_CreateMedias_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateMediasRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).CreateMedias(ctx, reqbody.(*CreateMediasRequest), rspbody.(*CreateMediasResponse))
	}

	rsp := &CreateMediasResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_CommitMedias_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CommitMediasRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).CommitMedias(ctx, reqbody.(*CommitMediasRequest), rspbody.(*CommitMediasResponse))
	}

	rsp := &CommitMediasResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_DescribeMedias_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeMediasRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).DescribeMedias(ctx, reqbody.(*DescribeMediasRequest), rspbody.(*DescribeMediasResponse))
	}

	rsp := &DescribeMediasResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_DescribeMediaDetails_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeMediaDetailsRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).DescribeMediaDetails(ctx, reqbody.(*DescribeMediaDetailsRequest), rspbody.(*DescribeMediaDetailsResponse))
	}

	rsp := &DescribeMediaDetailsResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_DeleteMedias_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DeleteMediasRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).DeleteMedias(ctx, reqbody.(*DeleteMediasRequest), rspbody.(*DeleteMediasResponse))
	}

	rsp := &DeleteMediasResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_RestoreDeletedMedias_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &RestoreDeletedMediasRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).RestoreDeletedMedias(ctx, reqbody.(*RestoreDeletedMediasRequest), rspbody.(*RestoreDeletedMediasResponse))
	}

	rsp := &RestoreDeletedMediasResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_EmptyTrash_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &EmptyTrashRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).EmptyTrash(ctx, reqbody.(*EmptyTrashRequest), rspbody.(*EmptyTrashResponse))
	}

	rsp := &EmptyTrashResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_DescribeCategories_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeCategoriesRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).DescribeCategories(ctx, reqbody.(*DescribeCategoriesRequest), rspbody.(*DescribeCategoriesResponse))
	}

	rsp := &DescribeCategoriesResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_ModifyMedia_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ModifyMediaRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).ModifyMedia(ctx, reqbody.(*ModifyMediaRequest), rspbody.(*ModifyMediaResponse))
	}

	rsp := &ModifyMediaResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_RetrieveRelevantTags_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &RetrieveRelevantTagsRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).RetrieveRelevantTags(ctx, reqbody.(*RetrieveRelevantTagsRequest), rspbody.(*RetrieveRelevantTagsResponse))
	}

	rsp := &RetrieveRelevantTagsResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_RetrieveLexicalEntry_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &RetrieveLexicalEntryRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).RetrieveLexicalEntry(ctx, reqbody.(*RetrieveLexicalEntryRequest), rspbody.(*RetrieveLexicalEntryResponse))
	}

	rsp := &RetrieveLexicalEntryResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_RetrieveTitleMedias_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &RetrieveMediasRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).RetrieveTitleMedias(ctx, reqbody.(*RetrieveMediasRequest), rspbody.(*RetrieveMediasResponse))
	}

	rsp := &RetrieveMediasResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_RetrieveContentMedias_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &RetrieveMediasRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).RetrieveContentMedias(ctx, reqbody.(*RetrieveMediasRequest), rspbody.(*RetrieveMediasResponse))
	}

	rsp := &RetrieveMediasResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_RetrieveTextMultiModalMedias_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &RetrieveMediasRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).RetrieveTextMultiModalMedias(ctx, reqbody.(*RetrieveMediasRequest), rspbody.(*RetrieveMediasResponse))
	}

	rsp := &RetrieveMediasResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_RetrieveTextCrossModalMedias_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &RetrieveMediasRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).RetrieveTextCrossModalMedias(ctx, reqbody.(*RetrieveMediasRequest), rspbody.(*RetrieveMediasResponse))
	}

	rsp := &RetrieveMediasResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_RetrieveSimilarMedias_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &RetrieveMediasRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).RetrieveSimilarMedias(ctx, reqbody.(*RetrieveMediasRequest), rspbody.(*RetrieveMediasResponse))
	}

	rsp := &RetrieveMediasResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_RetrieveFaces_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &RetrieveMediasRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).RetrieveFaces(ctx, reqbody.(*RetrieveMediasRequest), rspbody.(*RetrieveFacesResponse))
	}

	rsp := &RetrieveFacesResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_RetrieveConsistentMedias_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &RetrieveConsistentMediasRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).RetrieveConsistentMedias(ctx, reqbody.(*RetrieveConsistentMediasRequest), rspbody.(*RetrieveConsistentMediasResponse))
	}

	rsp := &RetrieveConsistentMediasResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_AssociateWords_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AssociateWordsRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).AssociateWords(ctx, reqbody.(*AssociateWordsRequest), rspbody.(*AssociateWordsResponse))
	}

	rsp := &AssociateWordsResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_ExtractImages_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ExtractImagesRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).ExtractImages(ctx, reqbody.(*ExtractImagesRequest), rspbody.(*ExtractImagesResponse))
	}

	rsp := &ExtractImagesResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_CreateResourcePackage_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateResourcePackageRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).CreateResourcePackage(ctx, reqbody.(*CreateResourcePackageRequest), rspbody.(*CreateResourcePackageResponse))
	}

	rsp := &CreateResourcePackageResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_DeleteResourcePackage_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DeleteResourcePackageRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).DeleteResourcePackage(ctx, reqbody.(*DeleteResourcePackageRequest), rspbody.(*ResourcePackageOperateResponse))
	}

	rsp := &ResourcePackageOperateResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_UpdateResourcePackage_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateResourcePackageRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).UpdateResourcePackage(ctx, reqbody.(*UpdateResourcePackageRequest), rspbody.(*ResourcePackageOperateResponse))
	}

	rsp := &ResourcePackageOperateResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_DescribeResourcePackage_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeResourcePackageRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).DescribeResourcePackage(ctx, reqbody.(*DescribeResourcePackageRequest), rspbody.(*DescribePackageResponse))
	}

	rsp := &DescribePackageResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_AddResourceToPackage_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AddResourceToPackageRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).AddResourceToPackage(ctx, reqbody.(*AddResourceToPackageRequest), rspbody.(*AddResourceToPackageResponse))
	}

	rsp := &AddResourceToPackageResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_DeleteResourceFromPackage_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DeleteResourceFromPackageRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).DeleteResourceFromPackage(ctx, reqbody.(*DeleteResourceFromPackageRequest), rspbody.(*ResourcePackageOperateResponse))
	}

	rsp := &ResourcePackageOperateResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_UndeleteResourceFromPackage_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UndeleteResourceFromPackageRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).UndeleteResourceFromPackage(ctx, reqbody.(*UndeleteResourceFromPackageRequest), rspbody.(*ResourcePackageOperateResponse))
	}

	rsp := &ResourcePackageOperateResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_BindMedias_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &BindMediasRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).BindMedias(ctx, reqbody.(*BindMediasRequest), rspbody.(*BindMediasResponse))
	}

	rsp := &BindMediasResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func MediaService_DescribeMediaDetailsInner_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeMediaDetailsInnerRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(MediaService).DescribeMediaDetailsInner(ctx, reqbody.(*DescribeMediaDetailsInnerRequest), rspbody.(*DescribeMediaDetailsInnerResponse))
	}

	rsp := &DescribeMediaDetailsInnerResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// MediaServer_ServiceDesc descriptor for server.RegisterService.
var MediaServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.media.Media",
	HandlerType: ((*MediaService)(nil)),
	Methods: []server.Method{
		{
			Name: "/CreateMedias",
			Func: MediaService_CreateMedias_Handler,
		},
		{
			Name: "/CommitMedias",
			Func: MediaService_CommitMedias_Handler,
		},
		{
			Name: "/DescribeMedias",
			Func: MediaService_DescribeMedias_Handler,
		},
		{
			Name: "/DescribeMediaDetails",
			Func: MediaService_DescribeMediaDetails_Handler,
		},
		{
			Name: "/DeleteMedias",
			Func: MediaService_DeleteMedias_Handler,
		},
		{
			Name: "/RestoreDeletedMedias",
			Func: MediaService_RestoreDeletedMedias_Handler,
		},
		{
			Name: "/EmptyTrash",
			Func: MediaService_EmptyTrash_Handler,
		},
		{
			Name: "/DescribeCategories",
			Func: MediaService_DescribeCategories_Handler,
		},
		{
			Name: "/ModifyMedia",
			Func: MediaService_ModifyMedia_Handler,
		},
		{
			Name: "/RetrieveRelevantTags",
			Func: MediaService_RetrieveRelevantTags_Handler,
		},
		{
			Name: "/RetrieveLexicalEntry",
			Func: MediaService_RetrieveLexicalEntry_Handler,
		},
		{
			Name: "/RetrieveTitleMedias",
			Func: MediaService_RetrieveTitleMedias_Handler,
		},
		{
			Name: "/RetrieveContentMedias",
			Func: MediaService_RetrieveContentMedias_Handler,
		},
		{
			Name: "/RetrieveTextMultiModalMedias",
			Func: MediaService_RetrieveTextMultiModalMedias_Handler,
		},
		{
			Name: "/RetrieveTextCrossModalMedias",
			Func: MediaService_RetrieveTextCrossModalMedias_Handler,
		},
		{
			Name: "/RetrieveSimilarMedias",
			Func: MediaService_RetrieveSimilarMedias_Handler,
		},
		{
			Name: "/RetrieveFaces",
			Func: MediaService_RetrieveFaces_Handler,
		},
		{
			Name: "/RetrieveConsistentMedias",
			Func: MediaService_RetrieveConsistentMedias_Handler,
		},
		{
			Name: "/AssociateWords",
			Func: MediaService_AssociateWords_Handler,
		},
		{
			Name: "/ExtractImages",
			Func: MediaService_ExtractImages_Handler,
		},
		{
			Name: "/CreateResourcePackage",
			Func: MediaService_CreateResourcePackage_Handler,
		},
		{
			Name: "/DeleteResourcePackage",
			Func: MediaService_DeleteResourcePackage_Handler,
		},
		{
			Name: "/UpdateResourcePackage",
			Func: MediaService_UpdateResourcePackage_Handler,
		},
		{
			Name: "/DescribeResourcePackage",
			Func: MediaService_DescribeResourcePackage_Handler,
		},
		{
			Name: "/AddResourceToPackage",
			Func: MediaService_AddResourceToPackage_Handler,
		},
		{
			Name: "/DeleteResourceFromPackage",
			Func: MediaService_DeleteResourceFromPackage_Handler,
		},
		{
			Name: "/UndeleteResourceFromPackage",
			Func: MediaService_UndeleteResourceFromPackage_Handler,
		},
		{
			Name: "/BindMedias",
			Func: MediaService_BindMedias_Handler,
		},
		{
			Name: "/DescribeMediaDetailsInner",
			Func: MediaService_DescribeMediaDetailsInner_Handler,
		},
		{
			Name: "/trpc.media.media.Media/CreateMedias",
			Func: MediaService_CreateMedias_Handler,
		},
		{
			Name: "/trpc.media.media.Media/CommitMedias",
			Func: MediaService_CommitMedias_Handler,
		},
		{
			Name: "/trpc.media.media.Media/DescribeMedias",
			Func: MediaService_DescribeMedias_Handler,
		},
		{
			Name: "/trpc.media.media.Media/DescribeMediaDetails",
			Func: MediaService_DescribeMediaDetails_Handler,
		},
		{
			Name: "/trpc.media.media.Media/DeleteMedias",
			Func: MediaService_DeleteMedias_Handler,
		},
		{
			Name: "/trpc.media.media.Media/RestoreDeletedMedias",
			Func: MediaService_RestoreDeletedMedias_Handler,
		},
		{
			Name: "/trpc.media.media.Media/EmptyTrash",
			Func: MediaService_EmptyTrash_Handler,
		},
		{
			Name: "/trpc.media.media.Media/DescribeCategories",
			Func: MediaService_DescribeCategories_Handler,
		},
		{
			Name: "/trpc.media.media.Media/ModifyMedia",
			Func: MediaService_ModifyMedia_Handler,
		},
		{
			Name: "/trpc.media.media.Media/RetrieveRelevantTags",
			Func: MediaService_RetrieveRelevantTags_Handler,
		},
		{
			Name: "/trpc.media.media.Media/RetrieveLexicalEntry",
			Func: MediaService_RetrieveLexicalEntry_Handler,
		},
		{
			Name: "/trpc.media.media.Media/RetrieveTitleMedias",
			Func: MediaService_RetrieveTitleMedias_Handler,
		},
		{
			Name: "/trpc.media.media.Media/RetrieveContentMedias",
			Func: MediaService_RetrieveContentMedias_Handler,
		},
		{
			Name: "/trpc.media.media.Media/RetrieveTextMultiModalMedias",
			Func: MediaService_RetrieveTextMultiModalMedias_Handler,
		},
		{
			Name: "/trpc.media.media.Media/RetrieveTextCrossModalMedias",
			Func: MediaService_RetrieveTextCrossModalMedias_Handler,
		},
		{
			Name: "/trpc.media.media.Media/RetrieveSimilarMedias",
			Func: MediaService_RetrieveSimilarMedias_Handler,
		},
		{
			Name: "/trpc.media.media.Media/RetrieveFaces",
			Func: MediaService_RetrieveFaces_Handler,
		},
		{
			Name: "/trpc.media.media.Media/RetrieveConsistentMedias",
			Func: MediaService_RetrieveConsistentMedias_Handler,
		},
		{
			Name: "/trpc.media.media.Media/AssociateWords",
			Func: MediaService_AssociateWords_Handler,
		},
		{
			Name: "/trpc.media.media.Media/ExtractImages",
			Func: MediaService_ExtractImages_Handler,
		},
		{
			Name: "/trpc.media.media.Media/CreateResourcePackage",
			Func: MediaService_CreateResourcePackage_Handler,
		},
		{
			Name: "/trpc.media.media.Media/DeleteResourcePackage",
			Func: MediaService_DeleteResourcePackage_Handler,
		},
		{
			Name: "/trpc.media.media.Media/UpdateResourcePackage",
			Func: MediaService_UpdateResourcePackage_Handler,
		},
		{
			Name: "/trpc.media.media.Media/DescribeResourcePackage",
			Func: MediaService_DescribeResourcePackage_Handler,
		},
		{
			Name: "/trpc.media.media.Media/AddResourceToPackage",
			Func: MediaService_AddResourceToPackage_Handler,
		},
		{
			Name: "/trpc.media.media.Media/DeleteResourceFromPackage",
			Func: MediaService_DeleteResourceFromPackage_Handler,
		},
		{
			Name: "/trpc.media.media.Media/UndeleteResourceFromPackage",
			Func: MediaService_UndeleteResourceFromPackage_Handler,
		},
		{
			Name: "/trpc.media.media.Media/BindMedias",
			Func: MediaService_BindMedias_Handler,
		},
		{
			Name: "/trpc.media.media.Media/DescribeMediaDetailsInner",
			Func: MediaService_DescribeMediaDetailsInner_Handler,
		},
	},
}

// RegisterMediaService registers service.
func RegisterMediaService(s server.Service, svr MediaService) {
	if err := s.Register(&MediaServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Media register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedMedia struct{}

// CreateMedias 资源管理
func (s *UnimplementedMedia) CreateMedias(ctx context.Context, req *CreateMediasRequest, rsp *CreateMediasResponse) error {
	return errors.New("rpc CreateMedias of service Media is not implemented")
}
func (s *UnimplementedMedia) CommitMedias(ctx context.Context, req *CommitMediasRequest, rsp *CommitMediasResponse) error {
	return errors.New("rpc CommitMedias of service Media is not implemented")
}
func (s *UnimplementedMedia) DescribeMedias(ctx context.Context, req *DescribeMediasRequest, rsp *DescribeMediasResponse) error {
	return errors.New("rpc DescribeMedias of service Media is not implemented")
}
func (s *UnimplementedMedia) DescribeMediaDetails(ctx context.Context, req *DescribeMediaDetailsRequest, rsp *DescribeMediaDetailsResponse) error {
	return errors.New("rpc DescribeMediaDetails of service Media is not implemented")
}
func (s *UnimplementedMedia) DeleteMedias(ctx context.Context, req *DeleteMediasRequest, rsp *DeleteMediasResponse) error {
	return errors.New("rpc DeleteMedias of service Media is not implemented")
}
func (s *UnimplementedMedia) RestoreDeletedMedias(ctx context.Context, req *RestoreDeletedMediasRequest, rsp *RestoreDeletedMediasResponse) error {
	return errors.New("rpc RestoreDeletedMedias of service Media is not implemented")
}
func (s *UnimplementedMedia) EmptyTrash(ctx context.Context, req *EmptyTrashRequest, rsp *EmptyTrashResponse) error {
	return errors.New("rpc EmptyTrash of service Media is not implemented")
}
func (s *UnimplementedMedia) DescribeCategories(ctx context.Context, req *DescribeCategoriesRequest, rsp *DescribeCategoriesResponse) error {
	return errors.New("rpc DescribeCategories of service Media is not implemented")
}
func (s *UnimplementedMedia) ModifyMedia(ctx context.Context, req *ModifyMediaRequest, rsp *ModifyMediaResponse) error {
	return errors.New("rpc ModifyMedia of service Media is not implemented")
}
func (s *UnimplementedMedia) RetrieveRelevantTags(ctx context.Context, req *RetrieveRelevantTagsRequest, rsp *RetrieveRelevantTagsResponse) error {
	return errors.New("rpc RetrieveRelevantTags of service Media is not implemented")
}
func (s *UnimplementedMedia) RetrieveLexicalEntry(ctx context.Context, req *RetrieveLexicalEntryRequest, rsp *RetrieveLexicalEntryResponse) error {
	return errors.New("rpc RetrieveLexicalEntry of service Media is not implemented")
}

// RetrieveTitleMedias RetrieveTitleMedias 和 RetrieveContentMedias 目前废弃不用了
func (s *UnimplementedMedia) RetrieveTitleMedias(ctx context.Context, req *RetrieveMediasRequest, rsp *RetrieveMediasResponse) error {
	return errors.New("rpc RetrieveTitleMedias of service Media is not implemented")
}
func (s *UnimplementedMedia) RetrieveContentMedias(ctx context.Context, req *RetrieveMediasRequest, rsp *RetrieveMediasResponse) error {
	return errors.New("rpc RetrieveContentMedias of service Media is not implemented")
}
func (s *UnimplementedMedia) RetrieveTextMultiModalMedias(ctx context.Context, req *RetrieveMediasRequest, rsp *RetrieveMediasResponse) error {
	return errors.New("rpc RetrieveTextMultiModalMedias of service Media is not implemented")
}
func (s *UnimplementedMedia) RetrieveTextCrossModalMedias(ctx context.Context, req *RetrieveMediasRequest, rsp *RetrieveMediasResponse) error {
	return errors.New("rpc RetrieveTextCrossModalMedias of service Media is not implemented")
}
func (s *UnimplementedMedia) RetrieveSimilarMedias(ctx context.Context, req *RetrieveMediasRequest, rsp *RetrieveMediasResponse) error {
	return errors.New("rpc RetrieveSimilarMedias of service Media is not implemented")
}
func (s *UnimplementedMedia) RetrieveFaces(ctx context.Context, req *RetrieveMediasRequest, rsp *RetrieveFacesResponse) error {
	return errors.New("rpc RetrieveFaces of service Media is not implemented")
}
func (s *UnimplementedMedia) RetrieveConsistentMedias(ctx context.Context, req *RetrieveConsistentMediasRequest, rsp *RetrieveConsistentMediasResponse) error {
	return errors.New("rpc RetrieveConsistentMedias of service Media is not implemented")
}
func (s *UnimplementedMedia) AssociateWords(ctx context.Context, req *AssociateWordsRequest, rsp *AssociateWordsResponse) error {
	return errors.New("rpc AssociateWords of service Media is not implemented")
}
func (s *UnimplementedMedia) ExtractImages(ctx context.Context, req *ExtractImagesRequest, rsp *ExtractImagesResponse) error {
	return errors.New("rpc ExtractImages of service Media is not implemented")
}

// CreateResourcePackage 资源包管理
func (s *UnimplementedMedia) CreateResourcePackage(ctx context.Context, req *CreateResourcePackageRequest, rsp *CreateResourcePackageResponse) error {
	return errors.New("rpc CreateResourcePackage of service Media is not implemented")
}
func (s *UnimplementedMedia) DeleteResourcePackage(ctx context.Context, req *DeleteResourcePackageRequest, rsp *ResourcePackageOperateResponse) error {
	return errors.New("rpc DeleteResourcePackage of service Media is not implemented")
}
func (s *UnimplementedMedia) UpdateResourcePackage(ctx context.Context, req *UpdateResourcePackageRequest, rsp *ResourcePackageOperateResponse) error {
	return errors.New("rpc UpdateResourcePackage of service Media is not implemented")
}
func (s *UnimplementedMedia) DescribeResourcePackage(ctx context.Context, req *DescribeResourcePackageRequest, rsp *DescribePackageResponse) error {
	return errors.New("rpc DescribeResourcePackage of service Media is not implemented")
}
func (s *UnimplementedMedia) AddResourceToPackage(ctx context.Context, req *AddResourceToPackageRequest, rsp *AddResourceToPackageResponse) error {
	return errors.New("rpc AddResourceToPackage of service Media is not implemented")
}
func (s *UnimplementedMedia) DeleteResourceFromPackage(ctx context.Context, req *DeleteResourceFromPackageRequest, rsp *ResourcePackageOperateResponse) error {
	return errors.New("rpc DeleteResourceFromPackage of service Media is not implemented")
}
func (s *UnimplementedMedia) UndeleteResourceFromPackage(ctx context.Context, req *UndeleteResourceFromPackageRequest, rsp *ResourcePackageOperateResponse) error {
	return errors.New("rpc UndeleteResourceFromPackage of service Media is not implemented")
}

// BindMedias 内部接口
func (s *UnimplementedMedia) BindMedias(ctx context.Context, req *BindMediasRequest, rsp *BindMediasResponse) error {
	return errors.New("rpc BindMedias of service Media is not implemented")
}
func (s *UnimplementedMedia) DescribeMediaDetailsInner(ctx context.Context, req *DescribeMediaDetailsInnerRequest, rsp *DescribeMediaDetailsInnerResponse) error {
	return errors.New("rpc DescribeMediaDetailsInner of service Media is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// MediaClientProxy defines service client proxy
type MediaClientProxy interface {
	// CreateMedias 资源管理
	CreateMedias(ctx context.Context, req *CreateMediasRequest, opts ...client.Option) (rsp *CreateMediasResponse, err error) // @alias=/CreateMedias

	CommitMedias(ctx context.Context, req *CommitMediasRequest, opts ...client.Option) (rsp *CommitMediasResponse, err error) // @alias=/CommitMedias

	DescribeMedias(ctx context.Context, req *DescribeMediasRequest, opts ...client.Option) (rsp *DescribeMediasResponse, err error) // @alias=/DescribeMedias

	DescribeMediaDetails(ctx context.Context, req *DescribeMediaDetailsRequest, opts ...client.Option) (rsp *DescribeMediaDetailsResponse, err error) // @alias=/DescribeMediaDetails

	DeleteMedias(ctx context.Context, req *DeleteMediasRequest, opts ...client.Option) (rsp *DeleteMediasResponse, err error) // @alias=/DeleteMedias

	RestoreDeletedMedias(ctx context.Context, req *RestoreDeletedMediasRequest, opts ...client.Option) (rsp *RestoreDeletedMediasResponse, err error) // @alias=/RestoreDeletedMedias

	EmptyTrash(ctx context.Context, req *EmptyTrashRequest, opts ...client.Option) (rsp *EmptyTrashResponse, err error) // @alias=/EmptyTrash

	DescribeCategories(ctx context.Context, req *DescribeCategoriesRequest, opts ...client.Option) (rsp *DescribeCategoriesResponse, err error) // @alias=/DescribeCategories

	ModifyMedia(ctx context.Context, req *ModifyMediaRequest, opts ...client.Option) (rsp *ModifyMediaResponse, err error) // @alias=/ModifyMedia

	RetrieveRelevantTags(ctx context.Context, req *RetrieveRelevantTagsRequest, opts ...client.Option) (rsp *RetrieveRelevantTagsResponse, err error) // @alias=/RetrieveRelevantTags

	RetrieveLexicalEntry(ctx context.Context, req *RetrieveLexicalEntryRequest, opts ...client.Option) (rsp *RetrieveLexicalEntryResponse, err error) // @alias=/RetrieveLexicalEntry
	// RetrieveTitleMedias RetrieveTitleMedias 和 RetrieveContentMedias 目前废弃不用了
	RetrieveTitleMedias(ctx context.Context, req *RetrieveMediasRequest, opts ...client.Option) (rsp *RetrieveMediasResponse, err error) // @alias=/RetrieveTitleMedias

	RetrieveContentMedias(ctx context.Context, req *RetrieveMediasRequest, opts ...client.Option) (rsp *RetrieveMediasResponse, err error) // @alias=/RetrieveContentMedias

	RetrieveTextMultiModalMedias(ctx context.Context, req *RetrieveMediasRequest, opts ...client.Option) (rsp *RetrieveMediasResponse, err error) // @alias=/RetrieveTextMultiModalMedias

	RetrieveTextCrossModalMedias(ctx context.Context, req *RetrieveMediasRequest, opts ...client.Option) (rsp *RetrieveMediasResponse, err error) // @alias=/RetrieveTextCrossModalMedias

	RetrieveSimilarMedias(ctx context.Context, req *RetrieveMediasRequest, opts ...client.Option) (rsp *RetrieveMediasResponse, err error) // @alias=/RetrieveSimilarMedias

	RetrieveFaces(ctx context.Context, req *RetrieveMediasRequest, opts ...client.Option) (rsp *RetrieveFacesResponse, err error) // @alias=/RetrieveFaces

	RetrieveConsistentMedias(ctx context.Context, req *RetrieveConsistentMediasRequest, opts ...client.Option) (rsp *RetrieveConsistentMediasResponse, err error) // @alias=/RetrieveConsistentMedias

	AssociateWords(ctx context.Context, req *AssociateWordsRequest, opts ...client.Option) (rsp *AssociateWordsResponse, err error) // @alias=/AssociateWords

	ExtractImages(ctx context.Context, req *ExtractImagesRequest, opts ...client.Option) (rsp *ExtractImagesResponse, err error) // @alias=/ExtractImages
	// CreateResourcePackage 资源包管理
	CreateResourcePackage(ctx context.Context, req *CreateResourcePackageRequest, opts ...client.Option) (rsp *CreateResourcePackageResponse, err error) // @alias=/CreateResourcePackage

	DeleteResourcePackage(ctx context.Context, req *DeleteResourcePackageRequest, opts ...client.Option) (rsp *ResourcePackageOperateResponse, err error) // @alias=/DeleteResourcePackage

	UpdateResourcePackage(ctx context.Context, req *UpdateResourcePackageRequest, opts ...client.Option) (rsp *ResourcePackageOperateResponse, err error) // @alias=/UpdateResourcePackage

	DescribeResourcePackage(ctx context.Context, req *DescribeResourcePackageRequest, opts ...client.Option) (rsp *DescribePackageResponse, err error) // @alias=/DescribeResourcePackage

	AddResourceToPackage(ctx context.Context, req *AddResourceToPackageRequest, opts ...client.Option) (rsp *AddResourceToPackageResponse, err error) // @alias=/AddResourceToPackage

	DeleteResourceFromPackage(ctx context.Context, req *DeleteResourceFromPackageRequest, opts ...client.Option) (rsp *ResourcePackageOperateResponse, err error) // @alias=/DeleteResourceFromPackage

	UndeleteResourceFromPackage(ctx context.Context, req *UndeleteResourceFromPackageRequest, opts ...client.Option) (rsp *ResourcePackageOperateResponse, err error) // @alias=/UndeleteResourceFromPackage
	// BindMedias 内部接口
	BindMedias(ctx context.Context, req *BindMediasRequest, opts ...client.Option) (rsp *BindMediasResponse, err error) // @alias=/BindMedias

	DescribeMediaDetailsInner(ctx context.Context, req *DescribeMediaDetailsInnerRequest, opts ...client.Option) (rsp *DescribeMediaDetailsInnerResponse, err error) // @alias=/DescribeMediaDetailsInner
}

type MediaClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewMediaClientProxy = func(opts ...client.Option) MediaClientProxy {
	return &MediaClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *MediaClientProxyImpl) CreateMedias(ctx context.Context, req *CreateMediasRequest, opts ...client.Option) (*CreateMediasResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/CreateMedias")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("CreateMedias")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateMediasResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) CommitMedias(ctx context.Context, req *CommitMediasRequest, opts ...client.Option) (*CommitMediasResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/CommitMedias")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("CommitMedias")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CommitMediasResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) DescribeMedias(ctx context.Context, req *DescribeMediasRequest, opts ...client.Option) (*DescribeMediasResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeMedias")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("DescribeMedias")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeMediasResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) DescribeMediaDetails(ctx context.Context, req *DescribeMediaDetailsRequest, opts ...client.Option) (*DescribeMediaDetailsResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeMediaDetails")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("DescribeMediaDetails")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeMediaDetailsResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) DeleteMedias(ctx context.Context, req *DeleteMediasRequest, opts ...client.Option) (*DeleteMediasResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DeleteMedias")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("DeleteMedias")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DeleteMediasResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) RestoreDeletedMedias(ctx context.Context, req *RestoreDeletedMediasRequest, opts ...client.Option) (*RestoreDeletedMediasResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/RestoreDeletedMedias")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("RestoreDeletedMedias")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &RestoreDeletedMediasResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) EmptyTrash(ctx context.Context, req *EmptyTrashRequest, opts ...client.Option) (*EmptyTrashResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/EmptyTrash")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("EmptyTrash")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &EmptyTrashResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) DescribeCategories(ctx context.Context, req *DescribeCategoriesRequest, opts ...client.Option) (*DescribeCategoriesResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeCategories")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("DescribeCategories")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeCategoriesResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) ModifyMedia(ctx context.Context, req *ModifyMediaRequest, opts ...client.Option) (*ModifyMediaResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/ModifyMedia")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("ModifyMedia")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ModifyMediaResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) RetrieveRelevantTags(ctx context.Context, req *RetrieveRelevantTagsRequest, opts ...client.Option) (*RetrieveRelevantTagsResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/RetrieveRelevantTags")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("RetrieveRelevantTags")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &RetrieveRelevantTagsResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) RetrieveLexicalEntry(ctx context.Context, req *RetrieveLexicalEntryRequest, opts ...client.Option) (*RetrieveLexicalEntryResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/RetrieveLexicalEntry")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("RetrieveLexicalEntry")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &RetrieveLexicalEntryResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) RetrieveTitleMedias(ctx context.Context, req *RetrieveMediasRequest, opts ...client.Option) (*RetrieveMediasResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/RetrieveTitleMedias")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("RetrieveTitleMedias")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &RetrieveMediasResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) RetrieveContentMedias(ctx context.Context, req *RetrieveMediasRequest, opts ...client.Option) (*RetrieveMediasResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/RetrieveContentMedias")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("RetrieveContentMedias")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &RetrieveMediasResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) RetrieveTextMultiModalMedias(ctx context.Context, req *RetrieveMediasRequest, opts ...client.Option) (*RetrieveMediasResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/RetrieveTextMultiModalMedias")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("RetrieveTextMultiModalMedias")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &RetrieveMediasResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) RetrieveTextCrossModalMedias(ctx context.Context, req *RetrieveMediasRequest, opts ...client.Option) (*RetrieveMediasResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/RetrieveTextCrossModalMedias")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("RetrieveTextCrossModalMedias")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &RetrieveMediasResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) RetrieveSimilarMedias(ctx context.Context, req *RetrieveMediasRequest, opts ...client.Option) (*RetrieveMediasResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/RetrieveSimilarMedias")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("RetrieveSimilarMedias")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &RetrieveMediasResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) RetrieveFaces(ctx context.Context, req *RetrieveMediasRequest, opts ...client.Option) (*RetrieveFacesResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/RetrieveFaces")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("RetrieveFaces")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &RetrieveFacesResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) RetrieveConsistentMedias(ctx context.Context, req *RetrieveConsistentMediasRequest, opts ...client.Option) (*RetrieveConsistentMediasResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/RetrieveConsistentMedias")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("RetrieveConsistentMedias")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &RetrieveConsistentMediasResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) AssociateWords(ctx context.Context, req *AssociateWordsRequest, opts ...client.Option) (*AssociateWordsResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/AssociateWords")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("AssociateWords")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &AssociateWordsResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) ExtractImages(ctx context.Context, req *ExtractImagesRequest, opts ...client.Option) (*ExtractImagesResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/ExtractImages")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("ExtractImages")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ExtractImagesResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) CreateResourcePackage(ctx context.Context, req *CreateResourcePackageRequest, opts ...client.Option) (*CreateResourcePackageResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/CreateResourcePackage")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("CreateResourcePackage")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateResourcePackageResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) DeleteResourcePackage(ctx context.Context, req *DeleteResourcePackageRequest, opts ...client.Option) (*ResourcePackageOperateResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DeleteResourcePackage")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("DeleteResourcePackage")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ResourcePackageOperateResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) UpdateResourcePackage(ctx context.Context, req *UpdateResourcePackageRequest, opts ...client.Option) (*ResourcePackageOperateResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/UpdateResourcePackage")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("UpdateResourcePackage")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ResourcePackageOperateResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) DescribeResourcePackage(ctx context.Context, req *DescribeResourcePackageRequest, opts ...client.Option) (*DescribePackageResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeResourcePackage")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("DescribeResourcePackage")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribePackageResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) AddResourceToPackage(ctx context.Context, req *AddResourceToPackageRequest, opts ...client.Option) (*AddResourceToPackageResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/AddResourceToPackage")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("AddResourceToPackage")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &AddResourceToPackageResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) DeleteResourceFromPackage(ctx context.Context, req *DeleteResourceFromPackageRequest, opts ...client.Option) (*ResourcePackageOperateResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DeleteResourceFromPackage")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("DeleteResourceFromPackage")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ResourcePackageOperateResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) UndeleteResourceFromPackage(ctx context.Context, req *UndeleteResourceFromPackageRequest, opts ...client.Option) (*ResourcePackageOperateResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/UndeleteResourceFromPackage")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("UndeleteResourceFromPackage")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ResourcePackageOperateResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) BindMedias(ctx context.Context, req *BindMediasRequest, opts ...client.Option) (*BindMediasResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/BindMedias")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("BindMedias")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &BindMediasResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *MediaClientProxyImpl) DescribeMediaDetailsInner(ctx context.Context, req *DescribeMediaDetailsInnerRequest, opts ...client.Option) (*DescribeMediaDetailsInnerResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeMediaDetailsInner")
	msg.WithCalleeServiceName(MediaServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("media")
	msg.WithCalleeService("Media")
	msg.WithCalleeMethod("DescribeMediaDetailsInner")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeMediaDetailsInnerResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
