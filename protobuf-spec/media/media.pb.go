// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: media.proto

package media

import (
	reflect "reflect"
	sync "sync"

	apicommon "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/apicommon"
	taskdata "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/taskdata"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 检索引擎
type IntentType int32

const (
	IntentType_INTENT_TYPE_NONE     IntentType = 0
	IntentType_INTENT_TYPE_LANDMARK IntentType = 1
)

// Enum value maps for IntentType.
var (
	IntentType_name = map[int32]string{
		0: "INTENT_TYPE_NONE",
		1: "INTENT_TYPE_LANDMARK",
	}
	IntentType_value = map[string]int32{
		"INTENT_TYPE_NONE":     0,
		"INTENT_TYPE_LANDMARK": 1,
	}
)

func (x IntentType) Enum() *IntentType {
	p := new(IntentType)
	*p = x
	return p
}

func (x IntentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntentType) Descriptor() protoreflect.EnumDescriptor {
	return file_media_proto_enumTypes[0].Descriptor()
}

func (IntentType) Type() protoreflect.EnumType {
	return &file_media_proto_enumTypes[0]
}

func (x IntentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntentType.Descriptor instead.
func (IntentType) EnumDescriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{0}
}

type AlgoType int32

const (
	AlgoType_ALGO_TYPE_NONE        AlgoType = 0
	AlgoType_ALGO_TYPE_FULLTEXT    AlgoType = 1
	AlgoType_ALGO_TYPE_IMAGE2IMAGE AlgoType = 2
	AlgoType_ALGO_TYPE_IMAGE2VIDEO AlgoType = 3
	AlgoType_ALGO_TYPE_TEXT2TEXT   AlgoType = 4
	AlgoType_ALGO_TYPE_TEXT2IMAGE  AlgoType = 5
	AlgoType_ALGO_TYPE_TEXT2VIDEO  AlgoType = 6
	AlgoType_ALGO_TYPE_MULTIMODAL  AlgoType = 7
)

// Enum value maps for AlgoType.
var (
	AlgoType_name = map[int32]string{
		0: "ALGO_TYPE_NONE",
		1: "ALGO_TYPE_FULLTEXT",
		2: "ALGO_TYPE_IMAGE2IMAGE",
		3: "ALGO_TYPE_IMAGE2VIDEO",
		4: "ALGO_TYPE_TEXT2TEXT",
		5: "ALGO_TYPE_TEXT2IMAGE",
		6: "ALGO_TYPE_TEXT2VIDEO",
		7: "ALGO_TYPE_MULTIMODAL",
	}
	AlgoType_value = map[string]int32{
		"ALGO_TYPE_NONE":        0,
		"ALGO_TYPE_FULLTEXT":    1,
		"ALGO_TYPE_IMAGE2IMAGE": 2,
		"ALGO_TYPE_IMAGE2VIDEO": 3,
		"ALGO_TYPE_TEXT2TEXT":   4,
		"ALGO_TYPE_TEXT2IMAGE":  5,
		"ALGO_TYPE_TEXT2VIDEO":  6,
		"ALGO_TYPE_MULTIMODAL":  7,
	}
)

func (x AlgoType) Enum() *AlgoType {
	p := new(AlgoType)
	*p = x
	return p
}

func (x AlgoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlgoType) Descriptor() protoreflect.EnumDescriptor {
	return file_media_proto_enumTypes[1].Descriptor()
}

func (AlgoType) Type() protoreflect.EnumType {
	return &file_media_proto_enumTypes[1]
}

func (x AlgoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlgoType.Descriptor instead.
func (AlgoType) EnumDescriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{1}
}

type SourceType int32

const (
	SourceType_SOURCE_TYPE_NONE           SourceType = 0
	SourceType_SOURCE_TYPE_FILENAME       SourceType = 1
	SourceType_SOURCE_TYPE_TITLE          SourceType = 2
	SourceType_SOURCE_TYPE_PERSON_TAG     SourceType = 3
	SourceType_SOURCE_TYPE_CV_TAG         SourceType = 4
	SourceType_SOURCE_TYPE_SUMMARY        SourceType = 5
	SourceType_SOURCE_TYPE_NER            SourceType = 6
	SourceType_SOURCE_TYPE_KEYWORD        SourceType = 7
	SourceType_SOURCE_TYPE_ASR            SourceType = 8
	SourceType_SOURCE_TYPE_OCR_CAPTION    SourceType = 9
	SourceType_SOURCE_TYPE_BACKGROUND     SourceType = 10
	SourceType_SOURCE_TYPE_FULLTEXT       SourceType = 11
	SourceType_SOURCE_TYPE_FEATURE        SourceType = 12
	SourceType_SOURCE_TYPE_MULTIMODAL     SourceType = 13
	SourceType_SOURCE_TYPE_CUSTOM_MESSAGE SourceType = 14
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0:  "SOURCE_TYPE_NONE",
		1:  "SOURCE_TYPE_FILENAME",
		2:  "SOURCE_TYPE_TITLE",
		3:  "SOURCE_TYPE_PERSON_TAG",
		4:  "SOURCE_TYPE_CV_TAG",
		5:  "SOURCE_TYPE_SUMMARY",
		6:  "SOURCE_TYPE_NER",
		7:  "SOURCE_TYPE_KEYWORD",
		8:  "SOURCE_TYPE_ASR",
		9:  "SOURCE_TYPE_OCR_CAPTION",
		10: "SOURCE_TYPE_BACKGROUND",
		11: "SOURCE_TYPE_FULLTEXT",
		12: "SOURCE_TYPE_FEATURE",
		13: "SOURCE_TYPE_MULTIMODAL",
		14: "SOURCE_TYPE_CUSTOM_MESSAGE",
	}
	SourceType_value = map[string]int32{
		"SOURCE_TYPE_NONE":           0,
		"SOURCE_TYPE_FILENAME":       1,
		"SOURCE_TYPE_TITLE":          2,
		"SOURCE_TYPE_PERSON_TAG":     3,
		"SOURCE_TYPE_CV_TAG":         4,
		"SOURCE_TYPE_SUMMARY":        5,
		"SOURCE_TYPE_NER":            6,
		"SOURCE_TYPE_KEYWORD":        7,
		"SOURCE_TYPE_ASR":            8,
		"SOURCE_TYPE_OCR_CAPTION":    9,
		"SOURCE_TYPE_BACKGROUND":     10,
		"SOURCE_TYPE_FULLTEXT":       11,
		"SOURCE_TYPE_FEATURE":        12,
		"SOURCE_TYPE_MULTIMODAL":     13,
		"SOURCE_TYPE_CUSTOM_MESSAGE": 14,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_media_proto_enumTypes[2].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_media_proto_enumTypes[2]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{2}
}

type MatchLevelType int32

const (
	MatchLevelType_MATCH_LEVEL_TYPE_NONE   MatchLevelType = 0
	MatchLevelType_MATCH_LEVEL_TYPE_LOW    MatchLevelType = 1 // 匹配级别低
	MatchLevelType_MATCH_LEVEL_TYPE_MIDDLE MatchLevelType = 2 // 匹配级别中(类似结果)
	MatchLevelType_MATCH_LEVEL_TYPE_HIGH   MatchLevelType = 3 // 匹配级别高(匹配结果)
)

// Enum value maps for MatchLevelType.
var (
	MatchLevelType_name = map[int32]string{
		0: "MATCH_LEVEL_TYPE_NONE",
		1: "MATCH_LEVEL_TYPE_LOW",
		2: "MATCH_LEVEL_TYPE_MIDDLE",
		3: "MATCH_LEVEL_TYPE_HIGH",
	}
	MatchLevelType_value = map[string]int32{
		"MATCH_LEVEL_TYPE_NONE":   0,
		"MATCH_LEVEL_TYPE_LOW":    1,
		"MATCH_LEVEL_TYPE_MIDDLE": 2,
		"MATCH_LEVEL_TYPE_HIGH":   3,
	}
)

func (x MatchLevelType) Enum() *MatchLevelType {
	p := new(MatchLevelType)
	*p = x
	return p
}

func (x MatchLevelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchLevelType) Descriptor() protoreflect.EnumDescriptor {
	return file_media_proto_enumTypes[3].Descriptor()
}

func (MatchLevelType) Type() protoreflect.EnumType {
	return &file_media_proto_enumTypes[3]
}

func (x MatchLevelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchLevelType.Descriptor instead.
func (MatchLevelType) EnumDescriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{3}
}

type MediaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentMediaId    string                    `protobuf:"bytes,1,opt,name=ParentMediaId,proto3" json:"ParentMediaId,omitempty"`                                     // 父资源ID
	MediaType        apicommon.MediaType       `protobuf:"varint,2,opt,name=MediaType,proto3,enum=trpc.media.common.MediaType" json:"MediaType,omitempty"`           // 资源类型
	MediaName        string                    `protobuf:"bytes,3,opt,name=MediaName,proto3" json:"MediaName,omitempty"`                                             // 资源名称
	MediaDescription string                    `protobuf:"bytes,4,opt,name=MediaDescription,proto3" json:"MediaDescription,omitempty"`                               // 资源简介
	MediaSource      apicommon.MediaSourceType `protobuf:"varint,5,opt,name=MediaSource,proto3,enum=trpc.media.common.MediaSourceType" json:"MediaSource,omitempty"` // 资源来源
	MediaTag         apicommon.CategoryTagType `protobuf:"varint,6,opt,name=MediaTag,proto3,enum=trpc.media.common.CategoryTagType" json:"MediaTag,omitempty"`       // 资源标签
	MediaSecondTag   string                    `protobuf:"bytes,7,opt,name=MediaSecondTag,proto3" json:"MediaSecondTag,omitempty"`                                   // 资源二级标签
	MediaLang        apicommon.LangType        `protobuf:"varint,8,opt,name=MediaLang,proto3,enum=trpc.media.common.LangType" json:"MediaLang,omitempty"`            // 语言类型
	MediaExpiry      uint32                    `protobuf:"varint,9,opt,name=MediaExpiry,proto3" json:"MediaExpiry,omitempty"`                                        // 过期时间(小时)
	MediaCallbackURL string                    `protobuf:"bytes,10,opt,name=MediaCallbackURL,proto3" json:"MediaCallbackURL,omitempty"`                              // 创建资源后的回调地址
}

func (x *MediaInfo) Reset() {
	*x = MediaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaInfo) ProtoMessage() {}

func (x *MediaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaInfo.ProtoReflect.Descriptor instead.
func (*MediaInfo) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{0}
}

func (x *MediaInfo) GetParentMediaId() string {
	if x != nil {
		return x.ParentMediaId
	}
	return ""
}

func (x *MediaInfo) GetMediaType() apicommon.MediaType {
	if x != nil {
		return x.MediaType
	}
	return apicommon.MediaType_MEDIA_TYPE_OTHER
}

func (x *MediaInfo) GetMediaName() string {
	if x != nil {
		return x.MediaName
	}
	return ""
}

func (x *MediaInfo) GetMediaDescription() string {
	if x != nil {
		return x.MediaDescription
	}
	return ""
}

func (x *MediaInfo) GetMediaSource() apicommon.MediaSourceType {
	if x != nil {
		return x.MediaSource
	}
	return apicommon.MediaSourceType_MEDIA_SOURCE_TYPE_OTHER
}

func (x *MediaInfo) GetMediaTag() apicommon.CategoryTagType {
	if x != nil {
		return x.MediaTag
	}
	return apicommon.CategoryTagType_CATEGORY_TAG_TYPE_OTHER
}

func (x *MediaInfo) GetMediaSecondTag() string {
	if x != nil {
		return x.MediaSecondTag
	}
	return ""
}

func (x *MediaInfo) GetMediaLang() apicommon.LangType {
	if x != nil {
		return x.MediaLang
	}
	return apicommon.LangType_LANG_TYPE_MANDARIN
}

func (x *MediaInfo) GetMediaExpiry() uint32 {
	if x != nil {
		return x.MediaExpiry
	}
	return 0
}

func (x *MediaInfo) GetMediaCallbackURL() string {
	if x != nil {
		return x.MediaCallbackURL
	}
	return ""
}

type TranscodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranscodeFormat  string `protobuf:"bytes,1,opt,name=TranscodeFormat,proto3" json:"TranscodeFormat,omitempty"`    // 转码后的视频格式
	TranscodeBitRate uint32 `protobuf:"varint,2,opt,name=TranscodeBitRate,proto3" json:"TranscodeBitRate,omitempty"` // 转码后的码率
	TranscodeWidth   uint32 `protobuf:"varint,3,opt,name=TranscodeWidth,proto3" json:"TranscodeWidth,omitempty"`     // 转码后的宽
	TranscodeHeight  uint32 `protobuf:"varint,4,opt,name=TranscodeHeight,proto3" json:"TranscodeHeight,omitempty"`   // 转码后的高
}

func (x *TranscodeInfo) Reset() {
	*x = TranscodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeInfo) ProtoMessage() {}

func (x *TranscodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeInfo.ProtoReflect.Descriptor instead.
func (*TranscodeInfo) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{1}
}

func (x *TranscodeInfo) GetTranscodeFormat() string {
	if x != nil {
		return x.TranscodeFormat
	}
	return ""
}

func (x *TranscodeInfo) GetTranscodeBitRate() uint32 {
	if x != nil {
		return x.TranscodeBitRate
	}
	return 0
}

func (x *TranscodeInfo) GetTranscodeWidth() uint32 {
	if x != nil {
		return x.TranscodeWidth
	}
	return 0
}

func (x *TranscodeInfo) GetTranscodeHeight() uint32 {
	if x != nil {
		return x.TranscodeHeight
	}
	return 0
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName      string  `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`           // 文件名
	FileType      string  `protobuf:"bytes,2,opt,name=FileType,proto3" json:"FileType,omitempty"`           // 文件类型
	FileSize      float32 `protobuf:"fixed32,3,opt,name=FileSize,proto3" json:"FileSize,omitempty"`         // 文件字节数
	ContentMD5    string  `protobuf:"bytes,4,opt,name=ContentMD5,proto3" json:"ContentMD5,omitempty"`       // 文件内容的MD5值
	Key           string  `protobuf:"bytes,5,opt,name=Key,proto3" json:"Key,omitempty"`                     // 文件的Key
	Bucket        string  `protobuf:"bytes,6,opt,name=Bucket,proto3" json:"Bucket,omitempty"`               // 文件的Bucket
	UploadId      string  `protobuf:"bytes,7,opt,name=UploadId,proto3" json:"UploadId,omitempty"`           // 文件的UploadId
	FileExtension string  `protobuf:"bytes,8,opt,name=FileExtension,proto3" json:"FileExtension,omitempty"` // 文件扩展名
	FileURL       string  `protobuf:"bytes,9,opt,name=FileURL,proto3" json:"FileURL,omitempty"`             // 文件网络下载地址 URL
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{2}
}

func (x *FileInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileInfo) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *FileInfo) GetFileSize() float32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileInfo) GetContentMD5() string {
	if x != nil {
		return x.ContentMD5
	}
	return ""
}

func (x *FileInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FileInfo) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *FileInfo) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *FileInfo) GetFileExtension() string {
	if x != nil {
		return x.FileExtension
	}
	return ""
}

func (x *FileInfo) GetFileURL() string {
	if x != nil {
		return x.FileURL
	}
	return ""
}

type MediaWorkflowTemplateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowTemplateId string                 `protobuf:"bytes,1,opt,name=WorkflowTemplateId,proto3" json:"WorkflowTemplateId,omitempty"`                          // 入库配置对应的Id，1.0版本不需要填，会自动根据媒体类型获取
	WorkflowMode       apicommon.WorkflowMode `protobuf:"varint,2,opt,name=WorkflowMode,proto3,enum=trpc.media.common.WorkflowMode" json:"WorkflowMode,omitempty"` // 入库模式
	AutoMatchTemplate  bool                   `protobuf:"varint,3,opt,name=AutoMatchTemplate,proto3" json:"AutoMatchTemplate,omitempty"`                           // 是否需要入库
}

func (x *MediaWorkflowTemplateInfo) Reset() {
	*x = MediaWorkflowTemplateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaWorkflowTemplateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaWorkflowTemplateInfo) ProtoMessage() {}

func (x *MediaWorkflowTemplateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaWorkflowTemplateInfo.ProtoReflect.Descriptor instead.
func (*MediaWorkflowTemplateInfo) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{3}
}

func (x *MediaWorkflowTemplateInfo) GetWorkflowTemplateId() string {
	if x != nil {
		return x.WorkflowTemplateId
	}
	return ""
}

func (x *MediaWorkflowTemplateInfo) GetWorkflowMode() apicommon.WorkflowMode {
	if x != nil {
		return x.WorkflowMode
	}
	return apicommon.WorkflowMode_WORKFLOW_MODE_SYSTEM
}

func (x *MediaWorkflowTemplateInfo) GetAutoMatchTemplate() bool {
	if x != nil {
		return x.AutoMatchTemplate
	}
	return false
}

type OptionalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source          string `protobuf:"bytes,1,opt,name=Source,proto3" json:"Source,omitempty"`
	OriginalFileURL string `protobuf:"bytes,2,opt,name=OriginalFileURL,proto3" json:"OriginalFileURL,omitempty"`
	CustomMessage   string `protobuf:"bytes,3,opt,name=CustomMessage,proto3" json:"CustomMessage,omitempty"`
}

func (x *OptionalInfo) Reset() {
	*x = OptionalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalInfo) ProtoMessage() {}

func (x *OptionalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalInfo.ProtoReflect.Descriptor instead.
func (*OptionalInfo) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{4}
}

func (x *OptionalInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *OptionalInfo) GetOriginalFileURL() string {
	if x != nil {
		return x.OriginalFileURL
	}
	return ""
}

func (x *OptionalInfo) GetCustomMessage() string {
	if x != nil {
		return x.CustomMessage
	}
	return ""
}

type MediaUnionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaInfo                 *MediaInfo                 `protobuf:"bytes,1,opt,name=MediaInfo,proto3" json:"MediaInfo,omitempty"`                                 // 资源信息
	TranscodeInfo             *TranscodeInfo             `protobuf:"bytes,2,opt,name=TranscodeInfo,proto3" json:"TranscodeInfo,omitempty"`                         // 转码信息
	DomainGroupInfo           *apicommon.DomainGroupInfo `protobuf:"bytes,3,opt,name=DomainGroupInfo,proto3" json:"DomainGroupInfo,omitempty"`                     // 群组信息： 私有/公共/群组
	FileInfo                  *FileInfo                  `protobuf:"bytes,4,opt,name=FileInfo,proto3" json:"FileInfo,omitempty"`                                   // 文件信息
	MediaWorkflowTemplateInfo *MediaWorkflowTemplateInfo `protobuf:"bytes,5,opt,name=MediaWorkflowTemplateInfo,proto3" json:"MediaWorkflowTemplateInfo,omitempty"` // 入库配置对应的模板信息，后续扩展
	OptionalInfo              *OptionalInfo              `protobuf:"bytes,6,opt,name=OptionalInfo,proto3" json:"OptionalInfo,omitempty"`                           // 可选信息
}

func (x *MediaUnionInfo) Reset() {
	*x = MediaUnionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaUnionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaUnionInfo) ProtoMessage() {}

func (x *MediaUnionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaUnionInfo.ProtoReflect.Descriptor instead.
func (*MediaUnionInfo) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{5}
}

func (x *MediaUnionInfo) GetMediaInfo() *MediaInfo {
	if x != nil {
		return x.MediaInfo
	}
	return nil
}

func (x *MediaUnionInfo) GetTranscodeInfo() *TranscodeInfo {
	if x != nil {
		return x.TranscodeInfo
	}
	return nil
}

func (x *MediaUnionInfo) GetDomainGroupInfo() *apicommon.DomainGroupInfo {
	if x != nil {
		return x.DomainGroupInfo
	}
	return nil
}

func (x *MediaUnionInfo) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *MediaUnionInfo) GetMediaWorkflowTemplateInfo() *MediaWorkflowTemplateInfo {
	if x != nil {
		return x.MediaWorkflowTemplateInfo
	}
	return nil
}

func (x *MediaUnionInfo) GetOptionalInfo() *OptionalInfo {
	if x != nil {
		return x.OptionalInfo
	}
	return nil
}

type CreateMediasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaUnionInfoSet []*MediaUnionInfo `protobuf:"bytes,1,rep,name=MediaUnionInfoSet,proto3" json:"MediaUnionInfoSet,omitempty"`
}

func (x *CreateMediasRequest) Reset() {
	*x = CreateMediasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMediasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMediasRequest) ProtoMessage() {}

func (x *CreateMediasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMediasRequest.ProtoReflect.Descriptor instead.
func (*CreateMediasRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{6}
}

func (x *CreateMediasRequest) GetMediaUnionInfoSet() []*MediaUnionInfo {
	if x != nil {
		return x.MediaUnionInfoSet
	}
	return nil
}

type CreateMediasOperateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key             string                     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`         // 唯一确定一个文件
	MediaId         string                     `protobuf:"bytes,2,opt,name=MediaId,proto3" json:"MediaId,omitempty"` // 资源Id
	OperateResponse *apicommon.OperateResponse `protobuf:"bytes,3,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
	FileURL         string                     `protobuf:"bytes,4,opt,name=FileURL,proto3" json:"FileURL,omitempty"` // 资源下载地址
}

func (x *CreateMediasOperateResponse) Reset() {
	*x = CreateMediasOperateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMediasOperateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMediasOperateResponse) ProtoMessage() {}

func (x *CreateMediasOperateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMediasOperateResponse.ProtoReflect.Descriptor instead.
func (*CreateMediasOperateResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{7}
}

func (x *CreateMediasOperateResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CreateMediasOperateResponse) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *CreateMediasOperateResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

func (x *CreateMediasOperateResponse) GetFileURL() string {
	if x != nil {
		return x.FileURL
	}
	return ""
}

type CreateMediasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaOperateResponseSet []*CreateMediasOperateResponse `protobuf:"bytes,1,rep,name=MediaOperateResponseSet,proto3" json:"MediaOperateResponseSet,omitempty"`
}

func (x *CreateMediasResponse) Reset() {
	*x = CreateMediasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMediasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMediasResponse) ProtoMessage() {}

func (x *CreateMediasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMediasResponse.ProtoReflect.Descriptor instead.
func (*CreateMediasResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{8}
}

func (x *CreateMediasResponse) GetMediaOperateResponseSet() []*CreateMediasOperateResponse {
	if x != nil {
		return x.MediaOperateResponseSet
	}
	return nil
}

type MediaCommitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId        string `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`               // 资源Id
	UploadStatus   string `protobuf:"bytes,2,opt,name=UploadStatus,proto3" json:"UploadStatus,omitempty"`     // 资源上传状态
	UploadMessage  string `protobuf:"bytes,3,opt,name=UploadMessage,proto3" json:"UploadMessage,omitempty"`   // 资源上传的错误信息
	UploadProgress string `protobuf:"bytes,4,opt,name=UploadProgress,proto3" json:"UploadProgress,omitempty"` // 资源上传进度
}

func (x *MediaCommitInfo) Reset() {
	*x = MediaCommitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaCommitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaCommitInfo) ProtoMessage() {}

func (x *MediaCommitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaCommitInfo.ProtoReflect.Descriptor instead.
func (*MediaCommitInfo) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{9}
}

func (x *MediaCommitInfo) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *MediaCommitInfo) GetUploadStatus() string {
	if x != nil {
		return x.UploadStatus
	}
	return ""
}

func (x *MediaCommitInfo) GetUploadMessage() string {
	if x != nil {
		return x.UploadMessage
	}
	return ""
}

func (x *MediaCommitInfo) GetUploadProgress() string {
	if x != nil {
		return x.UploadProgress
	}
	return ""
}

type CommitMediasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaCommitInfoSet []*MediaCommitInfo `protobuf:"bytes,1,rep,name=MediaCommitInfoSet,proto3" json:"MediaCommitInfoSet,omitempty"`
}

func (x *CommitMediasRequest) Reset() {
	*x = CommitMediasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMediasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMediasRequest) ProtoMessage() {}

func (x *CommitMediasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMediasRequest.ProtoReflect.Descriptor instead.
func (*CommitMediasRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{10}
}

func (x *CommitMediasRequest) GetMediaCommitInfoSet() []*MediaCommitInfo {
	if x != nil {
		return x.MediaCommitInfoSet
	}
	return nil
}

type MediaOperateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId         string                     `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"` // 资源Id
	OperateResponse *apicommon.OperateResponse `protobuf:"bytes,2,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
}

func (x *MediaOperateResponse) Reset() {
	*x = MediaOperateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaOperateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaOperateResponse) ProtoMessage() {}

func (x *MediaOperateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaOperateResponse.ProtoReflect.Descriptor instead.
func (*MediaOperateResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{11}
}

func (x *MediaOperateResponse) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *MediaOperateResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

type CommitMediasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaOperateResponseSet []*MediaOperateResponse `protobuf:"bytes,1,rep,name=MediaOperateResponseSet,proto3" json:"MediaOperateResponseSet,omitempty"`
}

func (x *CommitMediasResponse) Reset() {
	*x = CommitMediasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitMediasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitMediasResponse) ProtoMessage() {}

func (x *CommitMediasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitMediasResponse.ProtoReflect.Descriptor instead.
func (*CommitMediasResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{12}
}

func (x *CommitMediasResponse) GetMediaOperateResponseSet() []*MediaOperateResponse {
	if x != nil {
		return x.MediaOperateResponseSet
	}
	return nil
}

type MediaMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration      float32 `protobuf:"fixed32,1,opt,name=Duration,proto3" json:"Duration,omitempty"`          // 资源时长，仅限视频和音频
	Width         uint32  `protobuf:"varint,2,opt,name=Width,proto3" json:"Width,omitempty"`                 // 资源宽，仅限视频和图片
	Height        uint32  `protobuf:"varint,3,opt,name=Height,proto3" json:"Height,omitempty"`               // 资源高，仅限视频和图片
	FPS           float32 `protobuf:"fixed32,4,opt,name=FPS,proto3" json:"FPS,omitempty"`                    // 资源帧率，仅限视频
	BitRate       uint32  `protobuf:"varint,5,opt,name=BitRate,proto3" json:"BitRate,omitempty"`             // 资源码率，仅限视频
	Format        string  `protobuf:"bytes,6,opt,name=Format,proto3" json:"Format,omitempty"`                // 资源格式，仅限视频/图片/音频
	NumFrames     uint32  `protobuf:"varint,7,opt,name=NumFrames,proto3" json:"NumFrames,omitempty"`         // 资源帧数，仅限视频
	EncodeFormat  string  `protobuf:"bytes,8,opt,name=EncodeFormat,proto3" json:"EncodeFormat,omitempty"`    // 视频/音频编码格式
	Longitude     float32 `protobuf:"fixed32,9,opt,name=Longitude,proto3" json:"Longitude,omitempty"`        // 图片经度
	Latitude      float32 `protobuf:"fixed32,10,opt,name=Latitude,proto3" json:"Latitude,omitempty"`         // 图片纬度
	CodecType     string  `protobuf:"bytes,11,opt,name=CodecType,proto3" json:"CodecType,omitempty"`         // 解码器格式
	SampleRate    float32 `protobuf:"fixed32,12,opt,name=SampleRate,proto3" json:"SampleRate,omitempty"`     // 采样率
	ChannelLayout string  `protobuf:"bytes,13,opt,name=ChannelLayout,proto3" json:"ChannelLayout,omitempty"` // 音频声道
	Channels      uint32  `protobuf:"varint,14,opt,name=Channels,proto3" json:"Channels,omitempty"`          // 通道数
}

func (x *MediaMeta) Reset() {
	*x = MediaMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaMeta) ProtoMessage() {}

func (x *MediaMeta) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaMeta.ProtoReflect.Descriptor instead.
func (*MediaMeta) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{13}
}

func (x *MediaMeta) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *MediaMeta) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MediaMeta) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MediaMeta) GetFPS() float32 {
	if x != nil {
		return x.FPS
	}
	return 0
}

func (x *MediaMeta) GetBitRate() uint32 {
	if x != nil {
		return x.BitRate
	}
	return 0
}

func (x *MediaMeta) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *MediaMeta) GetNumFrames() uint32 {
	if x != nil {
		return x.NumFrames
	}
	return 0
}

func (x *MediaMeta) GetEncodeFormat() string {
	if x != nil {
		return x.EncodeFormat
	}
	return ""
}

func (x *MediaMeta) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *MediaMeta) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *MediaMeta) GetCodecType() string {
	if x != nil {
		return x.CodecType
	}
	return ""
}

func (x *MediaMeta) GetSampleRate() float32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *MediaMeta) GetChannelLayout() string {
	if x != nil {
		return x.ChannelLayout
	}
	return ""
}

func (x *MediaMeta) GetChannels() uint32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

type CoverInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoverMediaIdSet    []string `protobuf:"bytes,1,rep,name=CoverMediaIdSet,proto3" json:"CoverMediaIdSet,omitempty"`       // 封面图MediaID集合
	TargetCoverMediaId string   `protobuf:"bytes,2,opt,name=TargetCoverMediaId,proto3" json:"TargetCoverMediaId,omitempty"` // 被选中的封面图Id
}

func (x *CoverInfo) Reset() {
	*x = CoverInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverInfo) ProtoMessage() {}

func (x *CoverInfo) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverInfo.ProtoReflect.Descriptor instead.
func (*CoverInfo) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{14}
}

func (x *CoverInfo) GetCoverMediaIdSet() []string {
	if x != nil {
		return x.CoverMediaIdSet
	}
	return nil
}

func (x *CoverInfo) GetTargetCoverMediaId() string {
	if x != nil {
		return x.TargetCoverMediaId
	}
	return ""
}

type MediaStorageProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TranscodeStatus      apicommon.TaskStatus `protobuf:"varint,1,opt,name=TranscodeStatus,proto3,enum=trpc.media.common.TaskStatus" json:"TranscodeStatus,omitempty"`
	CoverExtractStatus   apicommon.TaskStatus `protobuf:"varint,2,opt,name=CoverExtractStatus,proto3,enum=trpc.media.common.TaskStatus" json:"CoverExtractStatus,omitempty"`
	IVLDStatus           apicommon.TaskStatus `protobuf:"varint,3,opt,name=IVLDStatus,proto3,enum=trpc.media.common.TaskStatus" json:"IVLDStatus,omitempty"`
	FeatureStorageStatus apicommon.TaskStatus `protobuf:"varint,4,opt,name=FeatureStorageStatus,proto3,enum=trpc.media.common.TaskStatus" json:"FeatureStorageStatus,omitempty"`
}

func (x *MediaStorageProgress) Reset() {
	*x = MediaStorageProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaStorageProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaStorageProgress) ProtoMessage() {}

func (x *MediaStorageProgress) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaStorageProgress.ProtoReflect.Descriptor instead.
func (*MediaStorageProgress) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{15}
}

func (x *MediaStorageProgress) GetTranscodeStatus() apicommon.TaskStatus {
	if x != nil {
		return x.TranscodeStatus
	}
	return apicommon.TaskStatus_TASK_STATUS_INVALID
}

func (x *MediaStorageProgress) GetCoverExtractStatus() apicommon.TaskStatus {
	if x != nil {
		return x.CoverExtractStatus
	}
	return apicommon.TaskStatus_TASK_STATUS_INVALID
}

func (x *MediaStorageProgress) GetIVLDStatus() apicommon.TaskStatus {
	if x != nil {
		return x.IVLDStatus
	}
	return apicommon.TaskStatus_TASK_STATUS_INVALID
}

func (x *MediaStorageProgress) GetFeatureStorageStatus() apicommon.TaskStatus {
	if x != nil {
		return x.FeatureStorageStatus
	}
	return apicommon.TaskStatus_TASK_STATUS_INVALID
}

type MediaObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId                   string                     `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`                                             // 资源Id
	MediaStatus               apicommon.MediaStatus      `protobuf:"varint,2,opt,name=MediaStatus,proto3,enum=trpc.media.common.MediaStatus" json:"MediaStatus,omitempty"` // 资源状态
	FailedReason              string                     `protobuf:"bytes,3,opt,name=FailedReason,proto3" json:"FailedReason,omitempty"`                                   // 资源状态对应的错误信息
	CreateUserInfo            *apicommon.UserInfo        `protobuf:"bytes,4,opt,name=CreateUserInfo,proto3" json:"CreateUserInfo,omitempty"`                               // 资源的创建者信息
	ModifyUserInfo            *apicommon.UserInfo        `protobuf:"bytes,5,opt,name=ModifyUserInfo,proto3" json:"ModifyUserInfo,omitempty"`                               // 资源的修改者信息
	MediaInfo                 *MediaInfo                 `protobuf:"bytes,6,opt,name=MediaInfo,proto3" json:"MediaInfo,omitempty"`                                         // 资源信息
	DomainGroupInfo           *apicommon.DomainGroupInfo `protobuf:"bytes,7,opt,name=DomainGroupInfo,proto3" json:"DomainGroupInfo,omitempty"`                             // 群组信息
	FileInfo                  *FileInfo                  `protobuf:"bytes,8,opt,name=FileInfo,proto3" json:"FileInfo,omitempty"`                                           // 文件信息
	MediaWorkflowTemplateInfo *MediaWorkflowTemplateInfo `protobuf:"bytes,9,opt,name=MediaWorkflowTemplateInfo,proto3" json:"MediaWorkflowTemplateInfo,omitempty"`         // 入库配置对应的模板信息
	MediaMeta                 *MediaMeta                 `protobuf:"bytes,10,opt,name=MediaMeta,proto3" json:"MediaMeta,omitempty"`                                        // 媒体信息
	DownloadUrl               string                     `protobuf:"bytes,11,opt,name=DownloadUrl,proto3" json:"DownloadUrl,omitempty"`                                    // 下载路径
	CoverInfo                 *CoverInfo                 `protobuf:"bytes,12,opt,name=CoverInfo,proto3" json:"CoverInfo,omitempty"`                                        // 封面图信息
	TaskData                  *taskdata.AllTaskData      `protobuf:"bytes,13,opt,name=TaskData,proto3" json:"TaskData,omitempty"`                                          // 结构化数据
	MediaCreateTime           string                     `protobuf:"bytes,14,opt,name=MediaCreateTime,proto3" json:"MediaCreateTime,omitempty"`                            // 资源创建时间
	MediaModifyTime           string                     `protobuf:"bytes,15,opt,name=MediaModifyTime,proto3" json:"MediaModifyTime,omitempty"`                            // 资源修改时间
	CostTime                  string                     `protobuf:"bytes,16,opt,name=CostTime,proto3" json:"CostTime,omitempty"`                                          // 资源入库消耗的时间
	TaskId                    string                     `protobuf:"bytes,17,opt,name=TaskId,proto3" json:"TaskId,omitempty"`                                              // 对应的任务Id，方便进行标签操作
	SubVersionCount           uint32                     `protobuf:"varint,18,opt,name=SubVersionCount,proto3" json:"SubVersionCount,omitempty"`                           // 子版本数量
	SubVersionMediaIdSet      []string                   `protobuf:"bytes,19,rep,name=SubVersionMediaIdSet,proto3" json:"SubVersionMediaIdSet,omitempty"`                  // 子版本的MediaId列表
	TaskModifyTime            string                     `protobuf:"bytes,20,opt,name=TaskModifyTime,proto3" json:"TaskModifyTime,omitempty"`                              // 对应的任务的更新时间，方便进行检索引擎的同步操作
	TransCodeMediaId          string                     `protobuf:"bytes,21,opt,name=TransCodeMediaId,proto3" json:"TransCodeMediaId,omitempty"`                          // 转码后的素材Id
	MediaStorageProgress      *MediaStorageProgress      `protobuf:"bytes,22,opt,name=MediaStorageProgress,proto3" json:"MediaStorageProgress,omitempty"`                  // 资源入库的进度
	OptionalInfo              *OptionalInfo              `protobuf:"bytes,23,opt,name=OptionalInfo,proto3" json:"OptionalInfo,omitempty"`                                  // 可选信息
	PackageIdSet              []string                   `protobuf:"bytes,24,rep,name=PackageIdSet,proto3" json:"PackageIdSet,omitempty"`                                  // 资源所属资源包信息
}

func (x *MediaObject) Reset() {
	*x = MediaObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaObject) ProtoMessage() {}

func (x *MediaObject) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaObject.ProtoReflect.Descriptor instead.
func (*MediaObject) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{16}
}

func (x *MediaObject) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *MediaObject) GetMediaStatus() apicommon.MediaStatus {
	if x != nil {
		return x.MediaStatus
	}
	return apicommon.MediaStatus_MEDIA_STATUS_INVALID
}

func (x *MediaObject) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *MediaObject) GetCreateUserInfo() *apicommon.UserInfo {
	if x != nil {
		return x.CreateUserInfo
	}
	return nil
}

func (x *MediaObject) GetModifyUserInfo() *apicommon.UserInfo {
	if x != nil {
		return x.ModifyUserInfo
	}
	return nil
}

func (x *MediaObject) GetMediaInfo() *MediaInfo {
	if x != nil {
		return x.MediaInfo
	}
	return nil
}

func (x *MediaObject) GetDomainGroupInfo() *apicommon.DomainGroupInfo {
	if x != nil {
		return x.DomainGroupInfo
	}
	return nil
}

func (x *MediaObject) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *MediaObject) GetMediaWorkflowTemplateInfo() *MediaWorkflowTemplateInfo {
	if x != nil {
		return x.MediaWorkflowTemplateInfo
	}
	return nil
}

func (x *MediaObject) GetMediaMeta() *MediaMeta {
	if x != nil {
		return x.MediaMeta
	}
	return nil
}

func (x *MediaObject) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *MediaObject) GetCoverInfo() *CoverInfo {
	if x != nil {
		return x.CoverInfo
	}
	return nil
}

func (x *MediaObject) GetTaskData() *taskdata.AllTaskData {
	if x != nil {
		return x.TaskData
	}
	return nil
}

func (x *MediaObject) GetMediaCreateTime() string {
	if x != nil {
		return x.MediaCreateTime
	}
	return ""
}

func (x *MediaObject) GetMediaModifyTime() string {
	if x != nil {
		return x.MediaModifyTime
	}
	return ""
}

func (x *MediaObject) GetCostTime() string {
	if x != nil {
		return x.CostTime
	}
	return ""
}

func (x *MediaObject) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *MediaObject) GetSubVersionCount() uint32 {
	if x != nil {
		return x.SubVersionCount
	}
	return 0
}

func (x *MediaObject) GetSubVersionMediaIdSet() []string {
	if x != nil {
		return x.SubVersionMediaIdSet
	}
	return nil
}

func (x *MediaObject) GetTaskModifyTime() string {
	if x != nil {
		return x.TaskModifyTime
	}
	return ""
}

func (x *MediaObject) GetTransCodeMediaId() string {
	if x != nil {
		return x.TransCodeMediaId
	}
	return ""
}

func (x *MediaObject) GetMediaStorageProgress() *MediaStorageProgress {
	if x != nil {
		return x.MediaStorageProgress
	}
	return nil
}

func (x *MediaObject) GetOptionalInfo() *OptionalInfo {
	if x != nil {
		return x.OptionalInfo
	}
	return nil
}

func (x *MediaObject) GetPackageIdSet() []string {
	if x != nil {
		return x.PackageIdSet
	}
	return nil
}

type DescribeMediasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber         uint32              `protobuf:"varint,1,opt,name=PageNumber,proto3" json:"PageNumber,omitempty"`                 // 分页Id
	PageSize           uint32              `protobuf:"varint,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"`                     // 分页的大小
	FilterSet          []*apicommon.Filter `protobuf:"bytes,3,rep,name=FilterSet,proto3" json:"FilterSet,omitempty"`                    // 过滤条件
	SorterSet          []*apicommon.Sorter `protobuf:"bytes,4,rep,name=SorterSet,proto3" json:"SorterSet,omitempty"`                    // 排序条件
	IsSubVersionExpand bool                `protobuf:"varint,5,opt,name=IsSubVersionExpand,proto3" json:"IsSubVersionExpand,omitempty"` // 是否展开子版本显示
	Offset             uint32              `protobuf:"varint,6,opt,name=Offset,proto3" json:"Offset,omitempty"`                         // 查询 Offset，优先用 PageNumber 和 PageSize
	Limit              uint32              `protobuf:"varint,7,opt,name=Limit,proto3" json:"Limit,omitempty"`                           // 查询 Limit，优先用 PageNumber 和 PageSize
	IsDeleted          bool                `protobuf:"varint,8,opt,name=IsDeleted,proto3" json:"IsDeleted,omitempty"`                   // 回收站的过滤条件
	CreateDayRange     *apicommon.DayRange `protobuf:"bytes,9,opt,name=CreateDayRange,proto3" json:"CreateDayRange,omitempty"`          // 筛选创建时间区间
}

func (x *DescribeMediasRequest) Reset() {
	*x = DescribeMediasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMediasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMediasRequest) ProtoMessage() {}

func (x *DescribeMediasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMediasRequest.ProtoReflect.Descriptor instead.
func (*DescribeMediasRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{17}
}

func (x *DescribeMediasRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *DescribeMediasRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribeMediasRequest) GetFilterSet() []*apicommon.Filter {
	if x != nil {
		return x.FilterSet
	}
	return nil
}

func (x *DescribeMediasRequest) GetSorterSet() []*apicommon.Sorter {
	if x != nil {
		return x.SorterSet
	}
	return nil
}

func (x *DescribeMediasRequest) GetIsSubVersionExpand() bool {
	if x != nil {
		return x.IsSubVersionExpand
	}
	return false
}

func (x *DescribeMediasRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DescribeMediasRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DescribeMediasRequest) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *DescribeMediasRequest) GetCreateDayRange() *apicommon.DayRange {
	if x != nil {
		return x.CreateDayRange
	}
	return nil
}

type DescribeMediasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse *apicommon.OperateResponse `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
	MediaObjectSet  []*MediaObject             `protobuf:"bytes,2,rep,name=MediaObjectSet,proto3" json:"MediaObjectSet,omitempty"` // 返回的资源信息
	TotalCount      uint32                     `protobuf:"varint,3,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`        // 返回的资源个数
}

func (x *DescribeMediasResponse) Reset() {
	*x = DescribeMediasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMediasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMediasResponse) ProtoMessage() {}

func (x *DescribeMediasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMediasResponse.ProtoReflect.Descriptor instead.
func (*DescribeMediasResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{18}
}

func (x *DescribeMediasResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

func (x *DescribeMediasResponse) GetMediaObjectSet() []*MediaObject {
	if x != nil {
		return x.MediaObjectSet
	}
	return nil
}

func (x *DescribeMediasResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type DescribeMediaDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaIdSet []string `protobuf:"bytes,1,rep,name=MediaIdSet,proto3" json:"MediaIdSet,omitempty"` // 资源Id集合
}

func (x *DescribeMediaDetailsRequest) Reset() {
	*x = DescribeMediaDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMediaDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMediaDetailsRequest) ProtoMessage() {}

func (x *DescribeMediaDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMediaDetailsRequest.ProtoReflect.Descriptor instead.
func (*DescribeMediaDetailsRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{19}
}

func (x *DescribeMediaDetailsRequest) GetMediaIdSet() []string {
	if x != nil {
		return x.MediaIdSet
	}
	return nil
}

type DescribeMediaDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse *apicommon.OperateResponse `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
	MediaObjectSet  []*MediaObject             `protobuf:"bytes,2,rep,name=MediaObjectSet,proto3" json:"MediaObjectSet,omitempty"` // 返回的资源信息
	TotalCount      uint32                     `protobuf:"varint,3,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`        // 返回的资源个数
}

func (x *DescribeMediaDetailsResponse) Reset() {
	*x = DescribeMediaDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMediaDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMediaDetailsResponse) ProtoMessage() {}

func (x *DescribeMediaDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMediaDetailsResponse.ProtoReflect.Descriptor instead.
func (*DescribeMediaDetailsResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{20}
}

func (x *DescribeMediaDetailsResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

func (x *DescribeMediaDetailsResponse) GetMediaObjectSet() []*MediaObject {
	if x != nil {
		return x.MediaObjectSet
	}
	return nil
}

func (x *DescribeMediaDetailsResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type DeleteMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId        string   `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	DeleteAllTasks bool     `protobuf:"varint,2,opt,name=DeleteAllTasks,proto3" json:"DeleteAllTasks,omitempty"` // 是否删除全部绑定的任务
	DeleteTaskSet  []string `protobuf:"bytes,3,rep,name=DeleteTaskSet,proto3" json:"DeleteTaskSet,omitempty"`    // 同时删除的任务
}

func (x *DeleteMedia) Reset() {
	*x = DeleteMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMedia) ProtoMessage() {}

func (x *DeleteMedia) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMedia.ProtoReflect.Descriptor instead.
func (*DeleteMedia) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteMedia) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *DeleteMedia) GetDeleteAllTasks() bool {
	if x != nil {
		return x.DeleteAllTasks
	}
	return false
}

func (x *DeleteMedia) GetDeleteTaskSet() []string {
	if x != nil {
		return x.DeleteTaskSet
	}
	return nil
}

type DeleteMediasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteType apicommon.DeleteType `protobuf:"varint,1,opt,name=DeleteType,proto3,enum=trpc.media.common.DeleteType" json:"DeleteType,omitempty"` // 删除类型
	DeleteSet  []*DeleteMedia       `protobuf:"bytes,2,rep,name=DeleteSet,proto3" json:"DeleteSet,omitempty"`                                      // 删除的媒体
}

func (x *DeleteMediasRequest) Reset() {
	*x = DeleteMediasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMediasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMediasRequest) ProtoMessage() {}

func (x *DeleteMediasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMediasRequest.ProtoReflect.Descriptor instead.
func (*DeleteMediasRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteMediasRequest) GetDeleteType() apicommon.DeleteType {
	if x != nil {
		return x.DeleteType
	}
	return apicommon.DeleteType_DELETE_TYPE_SOFT
}

func (x *DeleteMediasRequest) GetDeleteSet() []*DeleteMedia {
	if x != nil {
		return x.DeleteSet
	}
	return nil
}

type DeleteMediasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaOperateResponseSet []*MediaOperateResponse `protobuf:"bytes,1,rep,name=MediaOperateResponseSet,proto3" json:"MediaOperateResponseSet,omitempty"`
}

func (x *DeleteMediasResponse) Reset() {
	*x = DeleteMediasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMediasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMediasResponse) ProtoMessage() {}

func (x *DeleteMediasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMediasResponse.ProtoReflect.Descriptor instead.
func (*DeleteMediasResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteMediasResponse) GetMediaOperateResponseSet() []*MediaOperateResponse {
	if x != nil {
		return x.MediaOperateResponseSet
	}
	return nil
}

type RestoreDeletedMediasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedMediaIdSet []string `protobuf:"bytes,1,rep,name=DeletedMediaIdSet,proto3" json:"DeletedMediaIdSet,omitempty"` // 需要恢复的已经被删除的媒体ID
}

func (x *RestoreDeletedMediasRequest) Reset() {
	*x = RestoreDeletedMediasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreDeletedMediasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreDeletedMediasRequest) ProtoMessage() {}

func (x *RestoreDeletedMediasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreDeletedMediasRequest.ProtoReflect.Descriptor instead.
func (*RestoreDeletedMediasRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{24}
}

func (x *RestoreDeletedMediasRequest) GetDeletedMediaIdSet() []string {
	if x != nil {
		return x.DeletedMediaIdSet
	}
	return nil
}

type RestoreDeletedMediasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaOperateResponseSet []*MediaOperateResponse `protobuf:"bytes,1,rep,name=MediaOperateResponseSet,proto3" json:"MediaOperateResponseSet,omitempty"`
}

func (x *RestoreDeletedMediasResponse) Reset() {
	*x = RestoreDeletedMediasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreDeletedMediasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreDeletedMediasResponse) ProtoMessage() {}

func (x *RestoreDeletedMediasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreDeletedMediasResponse.ProtoReflect.Descriptor instead.
func (*RestoreDeletedMediasResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{25}
}

func (x *RestoreDeletedMediasResponse) GetMediaOperateResponseSet() []*MediaOperateResponse {
	if x != nil {
		return x.MediaOperateResponseSet
	}
	return nil
}

type EmptyTrashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyTrashRequest) Reset() {
	*x = EmptyTrashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyTrashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyTrashRequest) ProtoMessage() {}

func (x *EmptyTrashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyTrashRequest.ProtoReflect.Descriptor instead.
func (*EmptyTrashRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{26}
}

type EmptyTrashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount uint32 `protobuf:"varint,1,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"` // 清理的媒体的数量
}

func (x *EmptyTrashResponse) Reset() {
	*x = EmptyTrashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyTrashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyTrashResponse) ProtoMessage() {}

func (x *EmptyTrashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyTrashResponse.ProtoReflect.Descriptor instead.
func (*EmptyTrashResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{27}
}

func (x *EmptyTrashResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type DescribeCategoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DescribeCategoriesRequest) Reset() {
	*x = DescribeCategoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCategoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCategoriesRequest) ProtoMessage() {}

func (x *DescribeCategoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCategoriesRequest.ProtoReflect.Descriptor instead.
func (*DescribeCategoriesRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{28}
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaType apicommon.MediaType         `protobuf:"varint,1,opt,name=MediaType,proto3,enum=trpc.media.common.MediaType" json:"MediaType,omitempty"`        // 资源类型
	TagSet    []apicommon.CategoryTagType `protobuf:"varint,2,rep,packed,name=TagSet,proto3,enum=trpc.media.common.CategoryTagType" json:"TagSet,omitempty"` // 对应的资源类型可选的标签
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{29}
}

func (x *Category) GetMediaType() apicommon.MediaType {
	if x != nil {
		return x.MediaType
	}
	return apicommon.MediaType_MEDIA_TYPE_OTHER
}

func (x *Category) GetTagSet() []apicommon.CategoryTagType {
	if x != nil {
		return x.TagSet
	}
	return nil
}

type DescribeCategoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse *apicommon.OperateResponse `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
	CategorySet     []*Category                `protobuf:"bytes,2,rep,name=CategorySet,proto3" json:"CategorySet,omitempty"` // 资源的类别信息
}

func (x *DescribeCategoriesResponse) Reset() {
	*x = DescribeCategoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeCategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeCategoriesResponse) ProtoMessage() {}

func (x *DescribeCategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeCategoriesResponse.ProtoReflect.Descriptor instead.
func (*DescribeCategoriesResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{30}
}

func (x *DescribeCategoriesResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

func (x *DescribeCategoriesResponse) GetCategorySet() []*Category {
	if x != nil {
		return x.CategorySet
	}
	return nil
}

type ModifyMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId                   string                     `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`                                     // 资源Id
	MediaInfo                 *MediaInfo                 `protobuf:"bytes,2,opt,name=MediaInfo,proto3" json:"MediaInfo,omitempty"`                                 // 修改后的资源信息
	DomainGroupInfo           *apicommon.DomainGroupInfo `protobuf:"bytes,3,opt,name=DomainGroupInfo,proto3" json:"DomainGroupInfo,omitempty"`                     // 修改后的群组
	CoverInfo                 *CoverInfo                 `protobuf:"bytes,4,opt,name=CoverInfo,proto3" json:"CoverInfo,omitempty"`                                 // 修改后的封面图信息
	MediaWorkflowTemplateInfo *MediaWorkflowTemplateInfo `protobuf:"bytes,5,opt,name=MediaWorkflowTemplateInfo,proto3" json:"MediaWorkflowTemplateInfo,omitempty"` // 修改后的入库模板信息
	EmptyReplace              bool                       `protobuf:"varint,6,opt,name=EmptyReplace,proto3" json:"EmptyReplace,omitempty"`
	OptionalInfo              *OptionalInfo              `protobuf:"bytes,7,opt,name=OptionalInfo,proto3" json:"OptionalInfo,omitempty"` // 修改后的可选信息
}

func (x *ModifyMediaRequest) Reset() {
	*x = ModifyMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyMediaRequest) ProtoMessage() {}

func (x *ModifyMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyMediaRequest.ProtoReflect.Descriptor instead.
func (*ModifyMediaRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{31}
}

func (x *ModifyMediaRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *ModifyMediaRequest) GetMediaInfo() *MediaInfo {
	if x != nil {
		return x.MediaInfo
	}
	return nil
}

func (x *ModifyMediaRequest) GetDomainGroupInfo() *apicommon.DomainGroupInfo {
	if x != nil {
		return x.DomainGroupInfo
	}
	return nil
}

func (x *ModifyMediaRequest) GetCoverInfo() *CoverInfo {
	if x != nil {
		return x.CoverInfo
	}
	return nil
}

func (x *ModifyMediaRequest) GetMediaWorkflowTemplateInfo() *MediaWorkflowTemplateInfo {
	if x != nil {
		return x.MediaWorkflowTemplateInfo
	}
	return nil
}

func (x *ModifyMediaRequest) GetEmptyReplace() bool {
	if x != nil {
		return x.EmptyReplace
	}
	return false
}

func (x *ModifyMediaRequest) GetOptionalInfo() *OptionalInfo {
	if x != nil {
		return x.OptionalInfo
	}
	return nil
}

type ModifyMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse *apicommon.OperateResponse `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
}

func (x *ModifyMediaResponse) Reset() {
	*x = ModifyMediaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyMediaResponse) ProtoMessage() {}

func (x *ModifyMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyMediaResponse.ProtoReflect.Descriptor instead.
func (*ModifyMediaResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{32}
}

func (x *ModifyMediaResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

type MediaSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeStamp *float32 `protobuf:"fixed32,1,opt,name=StartTimeStamp,proto3,oneof" json:"StartTimeStamp,omitempty"` // 片段开始时间
	EndTimeStamp   *float32 `protobuf:"fixed32,2,opt,name=EndTimeStamp,proto3,oneof" json:"EndTimeStamp,omitempty"`     // 片段结束时间
	Confidence     *float32 `protobuf:"fixed32,3,opt,name=Confidence,proto3,oneof" json:"Confidence,omitempty"`         // 置信度
}

func (x *MediaSegment) Reset() {
	*x = MediaSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaSegment) ProtoMessage() {}

func (x *MediaSegment) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaSegment.ProtoReflect.Descriptor instead.
func (*MediaSegment) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{33}
}

func (x *MediaSegment) GetStartTimeStamp() float32 {
	if x != nil && x.StartTimeStamp != nil {
		return *x.StartTimeStamp
	}
	return 0
}

func (x *MediaSegment) GetEndTimeStamp() float32 {
	if x != nil && x.EndTimeStamp != nil {
		return *x.EndTimeStamp
	}
	return 0
}

func (x *MediaSegment) GetConfidence() float32 {
	if x != nil && x.Confidence != nil {
		return *x.Confidence
	}
	return 0
}

type RetrieveHitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaObject       *MediaObject    `protobuf:"bytes,1,opt,name=MediaObject,proto3" json:"MediaObject,omitempty"`                                     // 资源信息
	RetrieveHitTagSet []string        `protobuf:"bytes,2,rep,name=RetrieveHitTagSet,proto3" json:"RetrieveHitTagSet,omitempty"`                         // 被选中的标签集合
	HitSegmentSet     []*MediaSegment `protobuf:"bytes,3,rep,name=HitSegmentSet,proto3" json:"HitSegmentSet,omitempty"`                                 // 被选中的片段集合
	MatchLevel        MatchLevelType  `protobuf:"varint,4,opt,name=MatchLevel,proto3,enum=trpc.media.media.MatchLevelType" json:"MatchLevel,omitempty"` // 匹配级别
	AlgoType          AlgoType        `protobuf:"varint,5,opt,name=AlgoType,proto3,enum=trpc.media.media.AlgoType" json:"AlgoType,omitempty"`           // 命中的算法类型
	Key               string          `protobuf:"bytes,6,opt,name=Key,proto3" json:"Key,omitempty"`                                                     // 如果命中自定义消息, 返回自定消息的 key
}

func (x *RetrieveHitInfo) Reset() {
	*x = RetrieveHitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveHitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveHitInfo) ProtoMessage() {}

func (x *RetrieveHitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveHitInfo.ProtoReflect.Descriptor instead.
func (*RetrieveHitInfo) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{34}
}

func (x *RetrieveHitInfo) GetMediaObject() *MediaObject {
	if x != nil {
		return x.MediaObject
	}
	return nil
}

func (x *RetrieveHitInfo) GetRetrieveHitTagSet() []string {
	if x != nil {
		return x.RetrieveHitTagSet
	}
	return nil
}

func (x *RetrieveHitInfo) GetHitSegmentSet() []*MediaSegment {
	if x != nil {
		return x.HitSegmentSet
	}
	return nil
}

func (x *RetrieveHitInfo) GetMatchLevel() MatchLevelType {
	if x != nil {
		return x.MatchLevel
	}
	return MatchLevelType_MATCH_LEVEL_TYPE_NONE
}

func (x *RetrieveHitInfo) GetAlgoType() AlgoType {
	if x != nil {
		return x.AlgoType
	}
	return AlgoType_ALGO_TYPE_NONE
}

func (x *RetrieveHitInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type RetrieveHitMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaObject   *MediaObject    `protobuf:"bytes,1,opt,name=MediaObject,proto3" json:"MediaObject,omitempty"`     // 资源信息
	HitSegmentSet []*MediaSegment `protobuf:"bytes,3,rep,name=HitSegmentSet,proto3" json:"HitSegmentSet,omitempty"` // 被选中的片段集合
}

func (x *RetrieveHitMedia) Reset() {
	*x = RetrieveHitMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveHitMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveHitMedia) ProtoMessage() {}

func (x *RetrieveHitMedia) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveHitMedia.ProtoReflect.Descriptor instead.
func (*RetrieveHitMedia) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{35}
}

func (x *RetrieveHitMedia) GetMediaObject() *MediaObject {
	if x != nil {
		return x.MediaObject
	}
	return nil
}

func (x *RetrieveHitMedia) GetHitSegmentSet() []*MediaSegment {
	if x != nil {
		return x.HitSegmentSet
	}
	return nil
}

type RetrieveHitFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string              `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Job               string              `protobuf:"bytes,2,opt,name=Job,proto3" json:"Job,omitempty"`
	Label             string              `protobuf:"bytes,3,opt,name=Label,proto3" json:"Label,omitempty"`
	SecondLabel       string              `protobuf:"bytes,4,opt,name=SecondLabel,proto3" json:"SecondLabel,omitempty"`
	ImageURL          string              `protobuf:"bytes,5,opt,name=ImageURL,proto3" json:"ImageURL,omitempty"`
	FaceId            string              `protobuf:"bytes,6,opt,name=FaceId,proto3" json:"FaceId,omitempty"`
	IsUnknown         int32               `protobuf:"varint,7,opt,name=IsUnknown,proto3" json:"IsUnknown,omitempty"`
	PutLibraryAllowed bool                `protobuf:"varint,8,opt,name=PutLibraryAllowed,proto3" json:"PutLibraryAllowed,omitempty"`
	HitMediaSet       []*RetrieveHitMedia `protobuf:"bytes,9,rep,name=HitMediaSet,proto3" json:"HitMediaSet,omitempty"`
	AttachPersonId    string              `protobuf:"bytes,10,opt,name=AttachPersonId,proto3" json:"AttachPersonId,omitempty"`
	Rect              *apicommon.Rect     `protobuf:"bytes,11,opt,name=Rect,proto3" json:"Rect,omitempty"` // 在检索图像中出现的矩形框
	Sensitive         int32               `protobuf:"varint,12,opt,name=Sensitive,proto3" json:"Sensitive,omitempty"`
	Quality           float32             `protobuf:"fixed32,13,opt,name=Quality,proto3" json:"Quality,omitempty"`
	Confidence        float32             `protobuf:"fixed32,14,opt,name=Confidence,proto3" json:"Confidence,omitempty"`
	GroupIdSet        []string            `protobuf:"bytes,15,rep,name=GroupIdSet,proto3" json:"GroupIdSet,omitempty"`
}

func (x *RetrieveHitFace) Reset() {
	*x = RetrieveHitFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveHitFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveHitFace) ProtoMessage() {}

func (x *RetrieveHitFace) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveHitFace.ProtoReflect.Descriptor instead.
func (*RetrieveHitFace) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{36}
}

func (x *RetrieveHitFace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RetrieveHitFace) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *RetrieveHitFace) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *RetrieveHitFace) GetSecondLabel() string {
	if x != nil {
		return x.SecondLabel
	}
	return ""
}

func (x *RetrieveHitFace) GetImageURL() string {
	if x != nil {
		return x.ImageURL
	}
	return ""
}

func (x *RetrieveHitFace) GetFaceId() string {
	if x != nil {
		return x.FaceId
	}
	return ""
}

func (x *RetrieveHitFace) GetIsUnknown() int32 {
	if x != nil {
		return x.IsUnknown
	}
	return 0
}

func (x *RetrieveHitFace) GetPutLibraryAllowed() bool {
	if x != nil {
		return x.PutLibraryAllowed
	}
	return false
}

func (x *RetrieveHitFace) GetHitMediaSet() []*RetrieveHitMedia {
	if x != nil {
		return x.HitMediaSet
	}
	return nil
}

func (x *RetrieveHitFace) GetAttachPersonId() string {
	if x != nil {
		return x.AttachPersonId
	}
	return ""
}

func (x *RetrieveHitFace) GetRect() *apicommon.Rect {
	if x != nil {
		return x.Rect
	}
	return nil
}

func (x *RetrieveHitFace) GetSensitive() int32 {
	if x != nil {
		return x.Sensitive
	}
	return 0
}

func (x *RetrieveHitFace) GetQuality() float32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *RetrieveHitFace) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *RetrieveHitFace) GetGroupIdSet() []string {
	if x != nil {
		return x.GroupIdSet
	}
	return nil
}

type LexicalEntryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LexicalEntryTitle     string `protobuf:"bytes,1,opt,name=LexicalEntryTitle,proto3" json:"LexicalEntryTitle,omitempty"`         // 知识库词条标题
	LexicalEntryContent   string `protobuf:"bytes,2,opt,name=LexicalEntryContent,proto3" json:"LexicalEntryContent,omitempty"`     // 知识库词条内容
	LexicalEntryThumbnail string `protobuf:"bytes,3,opt,name=LexicalEntryThumbnail,proto3" json:"LexicalEntryThumbnail,omitempty"` // 知识库缩略图
}

func (x *LexicalEntryInfo) Reset() {
	*x = LexicalEntryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LexicalEntryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LexicalEntryInfo) ProtoMessage() {}

func (x *LexicalEntryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LexicalEntryInfo.ProtoReflect.Descriptor instead.
func (*LexicalEntryInfo) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{37}
}

func (x *LexicalEntryInfo) GetLexicalEntryTitle() string {
	if x != nil {
		return x.LexicalEntryTitle
	}
	return ""
}

func (x *LexicalEntryInfo) GetLexicalEntryContent() string {
	if x != nil {
		return x.LexicalEntryContent
	}
	return ""
}

func (x *LexicalEntryInfo) GetLexicalEntryThumbnail() string {
	if x != nil {
		return x.LexicalEntryThumbnail
	}
	return ""
}

type RetrieveRelevantTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetrieveInputType apicommon.RetrieveInputType `protobuf:"varint,1,opt,name=RetrieveInputType,proto3,enum=trpc.media.common.RetrieveInputType" json:"RetrieveInputType,omitempty"` // 检索输入数据类别
	RetrieveInputData string                      `protobuf:"bytes,2,opt,name=RetrieveInputData,proto3" json:"RetrieveInputData,omitempty"`                                           // 检索输入数据
}

func (x *RetrieveRelevantTagsRequest) Reset() {
	*x = RetrieveRelevantTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRelevantTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRelevantTagsRequest) ProtoMessage() {}

func (x *RetrieveRelevantTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRelevantTagsRequest.ProtoReflect.Descriptor instead.
func (*RetrieveRelevantTagsRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{38}
}

func (x *RetrieveRelevantTagsRequest) GetRetrieveInputType() apicommon.RetrieveInputType {
	if x != nil {
		return x.RetrieveInputType
	}
	return apicommon.RetrieveInputType_RETRIEVE_INPUT_TYPE_TEXT
}

func (x *RetrieveRelevantTagsRequest) GetRetrieveInputData() string {
	if x != nil {
		return x.RetrieveInputData
	}
	return ""
}

type RetrieveTagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetrieveTagType apicommon.RetrieveTagType `protobuf:"varint,1,opt,name=RetrieveTagType,proto3,enum=trpc.media.common.RetrieveTagType" json:"RetrieveTagType,omitempty"`
	TagContent      string                    `protobuf:"bytes,2,opt,name=TagContent,proto3" json:"TagContent,omitempty"`
}

func (x *RetrieveTagInfo) Reset() {
	*x = RetrieveTagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveTagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveTagInfo) ProtoMessage() {}

func (x *RetrieveTagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveTagInfo.ProtoReflect.Descriptor instead.
func (*RetrieveTagInfo) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{39}
}

func (x *RetrieveTagInfo) GetRetrieveTagType() apicommon.RetrieveTagType {
	if x != nil {
		return x.RetrieveTagType
	}
	return apicommon.RetrieveTagType_RETRIEVE_TAG_TYPE_LANDMARK
}

func (x *RetrieveTagInfo) GetTagContent() string {
	if x != nil {
		return x.TagContent
	}
	return ""
}

type RetrieveRelevantTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse       *apicommon.OperateResponse      `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
	RelevantTagSet        []*RetrieveTagInfo              `protobuf:"bytes,2,rep,name=RelevantTagSet,proto3" json:"RelevantTagSet,omitempty"`                                                             // 检索返回的标签集合(地标)
	TotalCount            uint32                          `protobuf:"varint,3,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`                                                                    // 检索返回的标签个数
	RetrieveHitSourceType apicommon.RetrieveHitSourceType `protobuf:"varint,4,opt,name=RetrieveHitSourceType,proto3,enum=trpc.media.common.RetrieveHitSourceType" json:"RetrieveHitSourceType,omitempty"` // 检索结果的来源，检索引擎还是兜底逻辑
}

func (x *RetrieveRelevantTagsResponse) Reset() {
	*x = RetrieveRelevantTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRelevantTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRelevantTagsResponse) ProtoMessage() {}

func (x *RetrieveRelevantTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRelevantTagsResponse.ProtoReflect.Descriptor instead.
func (*RetrieveRelevantTagsResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{40}
}

func (x *RetrieveRelevantTagsResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

func (x *RetrieveRelevantTagsResponse) GetRelevantTagSet() []*RetrieveTagInfo {
	if x != nil {
		return x.RelevantTagSet
	}
	return nil
}

func (x *RetrieveRelevantTagsResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *RetrieveRelevantTagsResponse) GetRetrieveHitSourceType() apicommon.RetrieveHitSourceType {
	if x != nil {
		return x.RetrieveHitSourceType
	}
	return apicommon.RetrieveHitSourceType_RETRIEVE_HIT_SOURCE_TYPE_DEFAULT
}

type RetrieveLexicalEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetrieveInputType apicommon.RetrieveInputType `protobuf:"varint,1,opt,name=RetrieveInputType,proto3,enum=trpc.media.common.RetrieveInputType" json:"RetrieveInputType,omitempty"` // 检索输入数据类别，这里其实就是关键词
	RetrieveInputData string                      `protobuf:"bytes,2,opt,name=RetrieveInputData,proto3" json:"RetrieveInputData,omitempty"`                                           // 检索输入数据
}

func (x *RetrieveLexicalEntryRequest) Reset() {
	*x = RetrieveLexicalEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveLexicalEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveLexicalEntryRequest) ProtoMessage() {}

func (x *RetrieveLexicalEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveLexicalEntryRequest.ProtoReflect.Descriptor instead.
func (*RetrieveLexicalEntryRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{41}
}

func (x *RetrieveLexicalEntryRequest) GetRetrieveInputType() apicommon.RetrieveInputType {
	if x != nil {
		return x.RetrieveInputType
	}
	return apicommon.RetrieveInputType_RETRIEVE_INPUT_TYPE_TEXT
}

func (x *RetrieveLexicalEntryRequest) GetRetrieveInputData() string {
	if x != nil {
		return x.RetrieveInputData
	}
	return ""
}

type RetrieveLexicalEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse       *apicommon.OperateResponse      `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
	LexicalEntryInfo      *LexicalEntryInfo               `protobuf:"bytes,2,opt,name=LexicalEntryInfo,proto3" json:"LexicalEntryInfo,omitempty"`                                                         // 检索关键词对应的词条信息
	RetrieveHitSourceType apicommon.RetrieveHitSourceType `protobuf:"varint,3,opt,name=RetrieveHitSourceType,proto3,enum=trpc.media.common.RetrieveHitSourceType" json:"RetrieveHitSourceType,omitempty"` // 检索结果的来源，检索引擎还是兜底逻辑
}

func (x *RetrieveLexicalEntryResponse) Reset() {
	*x = RetrieveLexicalEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveLexicalEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveLexicalEntryResponse) ProtoMessage() {}

func (x *RetrieveLexicalEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveLexicalEntryResponse.ProtoReflect.Descriptor instead.
func (*RetrieveLexicalEntryResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{42}
}

func (x *RetrieveLexicalEntryResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

func (x *RetrieveLexicalEntryResponse) GetLexicalEntryInfo() *LexicalEntryInfo {
	if x != nil {
		return x.LexicalEntryInfo
	}
	return nil
}

func (x *RetrieveLexicalEntryResponse) GetRetrieveHitSourceType() apicommon.RetrieveHitSourceType {
	if x != nil {
		return x.RetrieveHitSourceType
	}
	return apicommon.RetrieveHitSourceType_RETRIEVE_HIT_SOURCE_TYPE_DEFAULT
}

type RetrieveMediasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetrieveInputType apicommon.RetrieveInputType `protobuf:"varint,1,opt,name=RetrieveInputType,proto3,enum=trpc.media.common.RetrieveInputType" json:"RetrieveInputType,omitempty"` // 检索输入数据类别
	RetrieveInputData string                      `protobuf:"bytes,2,opt,name=RetrieveInputData,proto3" json:"RetrieveInputData,omitempty"`                                           // 检索输入数据
	FilterSet         []*apicommon.Filter         `protobuf:"bytes,3,rep,name=FilterSet,proto3" json:"FilterSet,omitempty"`                                                           // 检索结果的过滤信息
	SorterSet         []*apicommon.Sorter         `protobuf:"bytes,5,rep,name=SorterSet,proto3" json:"SorterSet,omitempty"`                                                           // 检索结果的排序信息
	PageNumber        uint32                      `protobuf:"varint,6,opt,name=PageNumber,proto3" json:"PageNumber,omitempty"`                                                        // 分页Id
	PageSize          uint32                      `protobuf:"varint,7,opt,name=PageSize,proto3" json:"PageSize,omitempty"`                                                            // 分页的大小
}

func (x *RetrieveMediasRequest) Reset() {
	*x = RetrieveMediasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveMediasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveMediasRequest) ProtoMessage() {}

func (x *RetrieveMediasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveMediasRequest.ProtoReflect.Descriptor instead.
func (*RetrieveMediasRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{43}
}

func (x *RetrieveMediasRequest) GetRetrieveInputType() apicommon.RetrieveInputType {
	if x != nil {
		return x.RetrieveInputType
	}
	return apicommon.RetrieveInputType_RETRIEVE_INPUT_TYPE_TEXT
}

func (x *RetrieveMediasRequest) GetRetrieveInputData() string {
	if x != nil {
		return x.RetrieveInputData
	}
	return ""
}

func (x *RetrieveMediasRequest) GetFilterSet() []*apicommon.Filter {
	if x != nil {
		return x.FilterSet
	}
	return nil
}

func (x *RetrieveMediasRequest) GetSorterSet() []*apicommon.Sorter {
	if x != nil {
		return x.SorterSet
	}
	return nil
}

func (x *RetrieveMediasRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *RetrieveMediasRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type RetrieveMediasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse       *apicommon.OperateResponse      `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
	RetrieveHitInfoSet    []*RetrieveHitInfo              `protobuf:"bytes,2,rep,name=RetrieveHitInfoSet,proto3" json:"RetrieveHitInfoSet,omitempty"`
	TotalCount            uint32                          `protobuf:"varint,3,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	RetrieveHitSourceType apicommon.RetrieveHitSourceType `protobuf:"varint,4,opt,name=RetrieveHitSourceType,proto3,enum=trpc.media.common.RetrieveHitSourceType" json:"RetrieveHitSourceType,omitempty"` // 检索结果的来源，检索引擎还是兜底逻辑
}

func (x *RetrieveMediasResponse) Reset() {
	*x = RetrieveMediasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveMediasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveMediasResponse) ProtoMessage() {}

func (x *RetrieveMediasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveMediasResponse.ProtoReflect.Descriptor instead.
func (*RetrieveMediasResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{44}
}

func (x *RetrieveMediasResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

func (x *RetrieveMediasResponse) GetRetrieveHitInfoSet() []*RetrieveHitInfo {
	if x != nil {
		return x.RetrieveHitInfoSet
	}
	return nil
}

func (x *RetrieveMediasResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *RetrieveMediasResponse) GetRetrieveHitSourceType() apicommon.RetrieveHitSourceType {
	if x != nil {
		return x.RetrieveHitSourceType
	}
	return apicommon.RetrieveHitSourceType_RETRIEVE_HIT_SOURCE_TYPE_DEFAULT
}

type RetrieveFacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount uint32             `protobuf:"varint,1,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	HitFaceSet []*RetrieveHitFace `protobuf:"bytes,3,rep,name=HitFaceSet,proto3" json:"HitFaceSet,omitempty"`
}

func (x *RetrieveFacesResponse) Reset() {
	*x = RetrieveFacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveFacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveFacesResponse) ProtoMessage() {}

func (x *RetrieveFacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveFacesResponse.ProtoReflect.Descriptor instead.
func (*RetrieveFacesResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{45}
}

func (x *RetrieveFacesResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *RetrieveFacesResponse) GetHitFaceSet() []*RetrieveHitFace {
	if x != nil {
		return x.HitFaceSet
	}
	return nil
}

type RetrieveConsistentMediasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId   string  `protobuf:"bytes,1,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	TopN      int32   `protobuf:"varint,2,opt,name=TopN,proto3" json:"TopN,omitempty"`
	Threshold float32 `protobuf:"fixed32,3,opt,name=Threshold,proto3" json:"Threshold,omitempty"`
}

func (x *RetrieveConsistentMediasRequest) Reset() {
	*x = RetrieveConsistentMediasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveConsistentMediasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveConsistentMediasRequest) ProtoMessage() {}

func (x *RetrieveConsistentMediasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveConsistentMediasRequest.ProtoReflect.Descriptor instead.
func (*RetrieveConsistentMediasRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{46}
}

func (x *RetrieveConsistentMediasRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *RetrieveConsistentMediasRequest) GetTopN() int32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

func (x *RetrieveConsistentMediasRequest) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type RetrieveConsistentMediasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HitMediaIdSet []string `protobuf:"bytes,1,rep,name=HitMediaIdSet,proto3" json:"HitMediaIdSet,omitempty"`
}

func (x *RetrieveConsistentMediasResponse) Reset() {
	*x = RetrieveConsistentMediasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveConsistentMediasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveConsistentMediasResponse) ProtoMessage() {}

func (x *RetrieveConsistentMediasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveConsistentMediasResponse.ProtoReflect.Descriptor instead.
func (*RetrieveConsistentMediasResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{47}
}

func (x *RetrieveConsistentMediasResponse) GetHitMediaIdSet() []string {
	if x != nil {
		return x.HitMediaIdSet
	}
	return nil
}

type AssociateWordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"` // 待联想的关键字
}

func (x *AssociateWordsRequest) Reset() {
	*x = AssociateWordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociateWordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociateWordsRequest) ProtoMessage() {}

func (x *AssociateWordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociateWordsRequest.ProtoReflect.Descriptor instead.
func (*AssociateWordsRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{48}
}

func (x *AssociateWordsRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type AssociateWordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse *apicommon.OperateResponse `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
	WordSet         []string                   `protobuf:"bytes,2,rep,name=WordSet,proto3" json:"WordSet,omitempty"`        // 返回的联想词信息
	TotalCount      uint32                     `protobuf:"varint,3,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"` // 联想词的个数，当前最多支持8个联想词
}

func (x *AssociateWordsResponse) Reset() {
	*x = AssociateWordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociateWordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociateWordsResponse) ProtoMessage() {}

func (x *AssociateWordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociateWordsResponse.ProtoReflect.Descriptor instead.
func (*AssociateWordsResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{49}
}

func (x *AssociateWordsResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

func (x *AssociateWordsResponse) GetWordSet() []string {
	if x != nil {
		return x.WordSet
	}
	return nil
}

func (x *AssociateWordsResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type ExtractImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameIndexSet         []uint32                   `protobuf:"varint,1,rep,packed,name=FrameIndexSet,proto3" json:"FrameIndexSet,omitempty"`                                        // 待提取的帧号
	ExtractImageType      apicommon.ExtractImageType `protobuf:"varint,2,opt,name=ExtractImageType,proto3,enum=trpc.media.common.ExtractImageType" json:"ExtractImageType,omitempty"` // 提取图片后返回的类别
	IsSetTargetCover      bool                       `protobuf:"varint,3,opt,name=IsSetTargetCover,proto3" json:"IsSetTargetCover,omitempty"`                                         // 是否需要设置封面
	TargetCoverFrameIndex uint32                     `protobuf:"varint,4,opt,name=TargetCoverFrameIndex,proto3" json:"TargetCoverFrameIndex,omitempty"`                               // 需要设置为封面的帧号
	MediaId               string                     `protobuf:"bytes,5,opt,name=MediaId,proto3" json:"MediaId,omitempty"`                                                            // 当前素材的MediaId
}

func (x *ExtractImagesRequest) Reset() {
	*x = ExtractImagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractImagesRequest) ProtoMessage() {}

func (x *ExtractImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractImagesRequest.ProtoReflect.Descriptor instead.
func (*ExtractImagesRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{50}
}

func (x *ExtractImagesRequest) GetFrameIndexSet() []uint32 {
	if x != nil {
		return x.FrameIndexSet
	}
	return nil
}

func (x *ExtractImagesRequest) GetExtractImageType() apicommon.ExtractImageType {
	if x != nil {
		return x.ExtractImageType
	}
	return apicommon.ExtractImageType_EXTRACT_IMAGE_TYPE_BASE64
}

func (x *ExtractImagesRequest) GetIsSetTargetCover() bool {
	if x != nil {
		return x.IsSetTargetCover
	}
	return false
}

func (x *ExtractImagesRequest) GetTargetCoverFrameIndex() uint32 {
	if x != nil {
		return x.TargetCoverFrameIndex
	}
	return 0
}

func (x *ExtractImagesRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

type ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameIndex       uint32                     `protobuf:"varint,1,opt,name=FrameIndex,proto3" json:"FrameIndex,omitempty"`                                                     // 帧号
	Image            string                     `protobuf:"bytes,2,opt,name=Image,proto3" json:"Image,omitempty"`                                                                // 图片数据
	ExtractImageType apicommon.ExtractImageType `protobuf:"varint,3,opt,name=ExtractImageType,proto3,enum=trpc.media.common.ExtractImageType" json:"ExtractImageType,omitempty"` // 提取图片后返回的类别
}

func (x *ImageInfo) Reset() {
	*x = ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfo) ProtoMessage() {}

func (x *ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfo.ProtoReflect.Descriptor instead.
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{51}
}

func (x *ImageInfo) GetFrameIndex() uint32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

func (x *ImageInfo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ImageInfo) GetExtractImageType() apicommon.ExtractImageType {
	if x != nil {
		return x.ExtractImageType
	}
	return apicommon.ExtractImageType_EXTRACT_IMAGE_TYPE_BASE64
}

type ExtractImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse *apicommon.OperateResponse `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
	ImageInfoSet    []*ImageInfo               `protobuf:"bytes,2,rep,name=ImageInfoSet,proto3" json:"ImageInfoSet,omitempty"` // 返回的图片信息
	TotalCount      uint32                     `protobuf:"varint,3,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`    // 返回的图片个数
}

func (x *ExtractImagesResponse) Reset() {
	*x = ExtractImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractImagesResponse) ProtoMessage() {}

func (x *ExtractImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractImagesResponse.ProtoReflect.Descriptor instead.
func (*ExtractImagesResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{52}
}

func (x *ExtractImagesResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

func (x *ExtractImagesResponse) GetImageInfoSet() []*ImageInfo {
	if x != nil {
		return x.ImageInfoSet
	}
	return nil
}

func (x *ExtractImagesResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type Binder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindType         apicommon.BindType `protobuf:"varint,1,opt,name=BindType,proto3,enum=trpc.media.common.BindType" json:"BindType,omitempty"` // 绑定资源的类型，目前只有“封面图”这种类型
	BinderMediaIdSet []string           `protobuf:"bytes,2,rep,name=BinderMediaIdSet,proto3" json:"BinderMediaIdSet,omitempty"`                  // 绑定的资源Id集合，比如封面图集合
	BindeeMediaIdSet []string           `protobuf:"bytes,3,rep,name=BindeeMediaIdSet,proto3" json:"BindeeMediaIdSet,omitempty"`                  // 被绑定的资源Id集合，比如封面图对应的原始资源
}

func (x *Binder) Reset() {
	*x = Binder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binder) ProtoMessage() {}

func (x *Binder) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binder.ProtoReflect.Descriptor instead.
func (*Binder) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{53}
}

func (x *Binder) GetBindType() apicommon.BindType {
	if x != nil {
		return x.BindType
	}
	return apicommon.BindType_BIND_TYPE_COVER
}

func (x *Binder) GetBinderMediaIdSet() []string {
	if x != nil {
		return x.BinderMediaIdSet
	}
	return nil
}

func (x *Binder) GetBindeeMediaIdSet() []string {
	if x != nil {
		return x.BindeeMediaIdSet
	}
	return nil
}

type BindMediasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BinderSet []*Binder `protobuf:"bytes,1,rep,name=BinderSet,proto3" json:"BinderSet,omitempty"` // 绑定信息
}

func (x *BindMediasRequest) Reset() {
	*x = BindMediasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindMediasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindMediasRequest) ProtoMessage() {}

func (x *BindMediasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindMediasRequest.ProtoReflect.Descriptor instead.
func (*BindMediasRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{54}
}

func (x *BindMediasRequest) GetBinderSet() []*Binder {
	if x != nil {
		return x.BinderSet
	}
	return nil
}

type BindMediasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse *apicommon.OperateResponse `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
}

func (x *BindMediasResponse) Reset() {
	*x = BindMediasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindMediasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindMediasResponse) ProtoMessage() {}

func (x *BindMediasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindMediasResponse.ProtoReflect.Descriptor instead.
func (*BindMediasResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{55}
}

func (x *BindMediasResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

// 检索引擎使用
type DescribeMediaDetailsInnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaStartTime string              `protobuf:"bytes,1,opt,name=MediaStartTime,proto3" json:"MediaStartTime,omitempty"` // 拉取的起始时间,media表的更新时间
	TaskStartTime  string              `protobuf:"bytes,2,opt,name=TaskStartTime,proto3" json:"TaskStartTime,omitempty"`   // 拉取的起始时间，task表的标签更新时间
	Count          uint32              `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`                  // 拉取资源的数目
	FilterSet      []*apicommon.Filter `protobuf:"bytes,4,rep,name=FilterSet,proto3" json:"FilterSet,omitempty"`           // 检索结果的过滤信息
}

func (x *DescribeMediaDetailsInnerRequest) Reset() {
	*x = DescribeMediaDetailsInnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMediaDetailsInnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMediaDetailsInnerRequest) ProtoMessage() {}

func (x *DescribeMediaDetailsInnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMediaDetailsInnerRequest.ProtoReflect.Descriptor instead.
func (*DescribeMediaDetailsInnerRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{56}
}

func (x *DescribeMediaDetailsInnerRequest) GetMediaStartTime() string {
	if x != nil {
		return x.MediaStartTime
	}
	return ""
}

func (x *DescribeMediaDetailsInnerRequest) GetTaskStartTime() string {
	if x != nil {
		return x.TaskStartTime
	}
	return ""
}

func (x *DescribeMediaDetailsInnerRequest) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DescribeMediaDetailsInnerRequest) GetFilterSet() []*apicommon.Filter {
	if x != nil {
		return x.FilterSet
	}
	return nil
}

type DescribeMediaDetailsInnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse *apicommon.OperateResponse `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
	MediaObjectSet  []*MediaObject             `protobuf:"bytes,2,rep,name=MediaObjectSet,proto3" json:"MediaObjectSet,omitempty"` // 返回的资源信息
	TotalCount      uint32                     `protobuf:"varint,3,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`        // 返回的资源个数
	TaskUpdateTime  string                     `protobuf:"bytes,4,opt,name=TaskUpdateTime,proto3" json:"TaskUpdateTime,omitempty"`
}

func (x *DescribeMediaDetailsInnerResponse) Reset() {
	*x = DescribeMediaDetailsInnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeMediaDetailsInnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeMediaDetailsInnerResponse) ProtoMessage() {}

func (x *DescribeMediaDetailsInnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeMediaDetailsInnerResponse.ProtoReflect.Descriptor instead.
func (*DescribeMediaDetailsInnerResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{57}
}

func (x *DescribeMediaDetailsInnerResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

func (x *DescribeMediaDetailsInnerResponse) GetMediaObjectSet() []*MediaObject {
	if x != nil {
		return x.MediaObjectSet
	}
	return nil
}

func (x *DescribeMediaDetailsInnerResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *DescribeMediaDetailsInnerResponse) GetTaskUpdateTime() string {
	if x != nil {
		return x.TaskUpdateTime
	}
	return ""
}

// 数据中心-获取下载路径
type DataCenterCreateDownloadURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin     string   `protobuf:"bytes,1,opt,name=Uin,proto3" json:"Uin,omitempty"`
	Keys    []string `protobuf:"bytes,2,rep,name=Keys,proto3" json:"Keys,omitempty"`
	Boolean bool     `protobuf:"varint,3,opt,name=Boolean,json=IsTemp,proto3" json:"Boolean,omitempty"`
	MaxAge  int32    `protobuf:"varint,4,opt,name=MaxAge,proto3" json:"MaxAge,omitempty"`
}

func (x *DataCenterCreateDownloadURLRequest) Reset() {
	*x = DataCenterCreateDownloadURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCenterCreateDownloadURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCenterCreateDownloadURLRequest) ProtoMessage() {}

func (x *DataCenterCreateDownloadURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCenterCreateDownloadURLRequest.ProtoReflect.Descriptor instead.
func (*DataCenterCreateDownloadURLRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{58}
}

func (x *DataCenterCreateDownloadURLRequest) GetUin() string {
	if x != nil {
		return x.Uin
	}
	return ""
}

func (x *DataCenterCreateDownloadURLRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DataCenterCreateDownloadURLRequest) GetBoolean() bool {
	if x != nil {
		return x.Boolean
	}
	return false
}

func (x *DataCenterCreateDownloadURLRequest) GetMaxAge() int32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

type DataCenterError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *DataCenterError) Reset() {
	*x = DataCenterError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCenterError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCenterError) ProtoMessage() {}

func (x *DataCenterError) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCenterError.ProtoReflect.Descriptor instead.
func (*DataCenterError) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{59}
}

func (x *DataCenterError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DataCenterError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DataCenterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  string           `protobuf:"bytes,1,opt,name=RequestId,proto3" json:"RequestId,omitempty"`
	Error      *DataCenterError `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	URLs       []string         `protobuf:"bytes,3,rep,name=URLs,proto3" json:"URLs,omitempty"`
	ExpireTime string           `protobuf:"bytes,4,opt,name=ExpireTime,proto3" json:"ExpireTime,omitempty"`
}

func (x *DataCenterResponse) Reset() {
	*x = DataCenterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCenterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCenterResponse) ProtoMessage() {}

func (x *DataCenterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCenterResponse.ProtoReflect.Descriptor instead.
func (*DataCenterResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{60}
}

func (x *DataCenterResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DataCenterResponse) GetError() *DataCenterError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DataCenterResponse) GetURLs() []string {
	if x != nil {
		return x.URLs
	}
	return nil
}

func (x *DataCenterResponse) GetExpireTime() string {
	if x != nil {
		return x.ExpireTime
	}
	return ""
}

type DataCenterCreateDownloadURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *DataCenterResponse `protobuf:"bytes,1,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *DataCenterCreateDownloadURLResponse) Reset() {
	*x = DataCenterCreateDownloadURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCenterCreateDownloadURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCenterCreateDownloadURLResponse) ProtoMessage() {}

func (x *DataCenterCreateDownloadURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCenterCreateDownloadURLResponse.ProtoReflect.Descriptor instead.
func (*DataCenterCreateDownloadURLResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{61}
}

func (x *DataCenterCreateDownloadURLResponse) GetResponse() *DataCenterResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// 数据中心-删除文件
type DataCenterCreateDeleteFileTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileKeys []string `protobuf:"bytes,1,rep,name=FileKeys,proto3" json:"FileKeys,omitempty"`
	Async    bool     `protobuf:"varint,2,opt,name=Async,proto3" json:"Async,omitempty"`
}

func (x *DataCenterCreateDeleteFileTaskRequest) Reset() {
	*x = DataCenterCreateDeleteFileTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCenterCreateDeleteFileTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCenterCreateDeleteFileTaskRequest) ProtoMessage() {}

func (x *DataCenterCreateDeleteFileTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCenterCreateDeleteFileTaskRequest.ProtoReflect.Descriptor instead.
func (*DataCenterCreateDeleteFileTaskRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{62}
}

func (x *DataCenterCreateDeleteFileTaskRequest) GetFileKeys() []string {
	if x != nil {
		return x.FileKeys
	}
	return nil
}

func (x *DataCenterCreateDeleteFileTaskRequest) GetAsync() bool {
	if x != nil {
		return x.Async
	}
	return false
}

// 检索文本
type QueryText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=Text,json=text,proto3" json:"Text,omitempty"`
}

func (x *QueryText) Reset() {
	*x = QueryText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryText) ProtoMessage() {}

func (x *QueryText) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryText.ProtoReflect.Descriptor instead.
func (*QueryText) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{63}
}

func (x *QueryText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// 检索图像
type QueryImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId        string `protobuf:"bytes,1,opt,name=MediaId,json=media_id,proto3" json:"MediaId,omitempty"`
	LocalImagePath string `protobuf:"bytes,2,opt,name=LocalImagePath,json=local_image_path,proto3" json:"LocalImagePath,omitempty"`
	Image          []byte `protobuf:"bytes,3,opt,name=Image,json=image,proto3" json:"Image,omitempty"`
}

func (x *QueryImage) Reset() {
	*x = QueryImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryImage) ProtoMessage() {}

func (x *QueryImage) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryImage.ProtoReflect.Descriptor instead.
func (*QueryImage) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{64}
}

func (x *QueryImage) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *QueryImage) GetLocalImagePath() string {
	if x != nil {
		return x.LocalImagePath
	}
	return ""
}

func (x *QueryImage) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

// 搜索意图
type RetrieveTagItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntentType IntentType `protobuf:"varint,1,opt,name=IntentType,json=type,proto3,enum=trpc.media.media.IntentType" json:"IntentType,omitempty"`
	TagName    string     `protobuf:"bytes,2,opt,name=TagName,json=tag_name,proto3" json:"TagName,omitempty"`
}

func (x *RetrieveTagItem) Reset() {
	*x = RetrieveTagItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveTagItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveTagItem) ProtoMessage() {}

func (x *RetrieveTagItem) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveTagItem.ProtoReflect.Descriptor instead.
func (*RetrieveTagItem) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{65}
}

func (x *RetrieveTagItem) GetIntentType() IntentType {
	if x != nil {
		return x.IntentType
	}
	return IntentType_INTENT_TYPE_NONE
}

func (x *RetrieveTagItem) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

// 知识库
type LexicalEntryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string `protobuf:"bytes,1,opt,name=Title,json=title,proto3" json:"Title,omitempty"`             // 知识库标题
	SubTitle  string `protobuf:"bytes,2,opt,name=SubTitle,json=title_sub,proto3" json:"SubTitle,omitempty"`   // 知识库子标题
	Content   string `protobuf:"bytes,3,opt,name=Content,json=content,proto3" json:"Content,omitempty"`       // 知识库内容
	Thumbnail []byte `protobuf:"bytes,4,opt,name=Thumbnail,json=thumbnail,proto3" json:"Thumbnail,omitempty"` // 知识库缩略图
}

func (x *LexicalEntryData) Reset() {
	*x = LexicalEntryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LexicalEntryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LexicalEntryData) ProtoMessage() {}

func (x *LexicalEntryData) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LexicalEntryData.ProtoReflect.Descriptor instead.
func (*LexicalEntryData) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{66}
}

func (x *LexicalEntryData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *LexicalEntryData) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *LexicalEntryData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *LexicalEntryData) GetThumbnail() []byte {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

type RetrievalMediaTagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId string   `protobuf:"bytes,1,opt,name=MediaId,json=media_id,proto3" json:"MediaId,omitempty"`
	TagSet  []string `protobuf:"bytes,2,rep,name=TagSet,json=tag_set,proto3" json:"TagSet,omitempty"`
}

func (x *RetrievalMediaTagInfo) Reset() {
	*x = RetrievalMediaTagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrievalMediaTagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrievalMediaTagInfo) ProtoMessage() {}

func (x *RetrievalMediaTagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrievalMediaTagInfo.ProtoReflect.Descriptor instead.
func (*RetrievalMediaTagInfo) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{67}
}

func (x *RetrievalMediaTagInfo) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *RetrievalMediaTagInfo) GetTagSet() []string {
	if x != nil {
		return x.TagSet
	}
	return nil
}

type RetrieveEngineMediaSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  float32 `protobuf:"fixed32,1,opt,name=StartTime,json=start_time,proto3" json:"StartTime,omitempty"`   // 片段开始时间
	EndTime    float32 `protobuf:"fixed32,2,opt,name=EndTime,json=end_time,proto3" json:"EndTime,omitempty"`         // 片段结束时间
	Confidence float32 `protobuf:"fixed32,3,opt,name=Confidence,json=confidence,proto3" json:"Confidence,omitempty"` // 置信度
}

func (x *RetrieveEngineMediaSegment) Reset() {
	*x = RetrieveEngineMediaSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveEngineMediaSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveEngineMediaSegment) ProtoMessage() {}

func (x *RetrieveEngineMediaSegment) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveEngineMediaSegment.ProtoReflect.Descriptor instead.
func (*RetrieveEngineMediaSegment) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{68}
}

func (x *RetrieveEngineMediaSegment) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RetrieveEngineMediaSegment) GetEndTime() float32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RetrieveEngineMediaSegment) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

// 匹配结果
type RetrieveEngineRetrieveHitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId    string                        `protobuf:"bytes,1,opt,name=MediaId,json=media_id,proto3" json:"MediaId,omitempty"`                                                // 匹配中的媒资id
	MediaType  apicommon.MediaType           `protobuf:"varint,2,opt,name=MediaType,json=media_type,proto3,enum=trpc.media.common.MediaType" json:"MediaType,omitempty"`        // 媒资类型
	AlgoType   AlgoType                      `protobuf:"varint,3,opt,name=AlgoType,json=algo_type,proto3,enum=trpc.media.media.AlgoType" json:"AlgoType,omitempty"`             // 匹配的算法类型
	SourceType SourceType                    `protobuf:"varint,4,opt,name=SourceType,json=source_type,proto3,enum=trpc.media.media.SourceType" json:"SourceType,omitempty"`     // 匹配的数据类型
	HitTagSet  []string                      `protobuf:"bytes,5,rep,name=HitTagSet,json=hit_tag_set,proto3" json:"HitTagSet,omitempty"`                                         // 高亮的标签列表
	SegmentSet []*RetrieveEngineMediaSegment `protobuf:"bytes,6,rep,name=SegmentSet,json=segment_set,proto3" json:"SegmentSet,omitempty"`                                       // 媒体片段列表
	MediaTag   apicommon.CategoryTagType     `protobuf:"varint,7,opt,name=MediaTag,json=media_tag,proto3,enum=trpc.media.common.CategoryTagType" json:"MediaTag,omitempty"`     // 媒资标签
	MatchLevel MatchLevelType                `protobuf:"varint,8,opt,name=MatchLevel,json=match_level,proto3,enum=trpc.media.media.MatchLevelType" json:"MatchLevel,omitempty"` // 匹配级别
	Key        string                        `protobuf:"bytes,9,opt,name=Key,json=key,proto3" json:"Key,omitempty"`                                                             // 匹配到的自定义消息的 key
}

func (x *RetrieveEngineRetrieveHitInfo) Reset() {
	*x = RetrieveEngineRetrieveHitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveEngineRetrieveHitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveEngineRetrieveHitInfo) ProtoMessage() {}

func (x *RetrieveEngineRetrieveHitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveEngineRetrieveHitInfo.ProtoReflect.Descriptor instead.
func (*RetrieveEngineRetrieveHitInfo) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{69}
}

func (x *RetrieveEngineRetrieveHitInfo) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *RetrieveEngineRetrieveHitInfo) GetMediaType() apicommon.MediaType {
	if x != nil {
		return x.MediaType
	}
	return apicommon.MediaType_MEDIA_TYPE_OTHER
}

func (x *RetrieveEngineRetrieveHitInfo) GetAlgoType() AlgoType {
	if x != nil {
		return x.AlgoType
	}
	return AlgoType_ALGO_TYPE_NONE
}

func (x *RetrieveEngineRetrieveHitInfo) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_NONE
}

func (x *RetrieveEngineRetrieveHitInfo) GetHitTagSet() []string {
	if x != nil {
		return x.HitTagSet
	}
	return nil
}

func (x *RetrieveEngineRetrieveHitInfo) GetSegmentSet() []*RetrieveEngineMediaSegment {
	if x != nil {
		return x.SegmentSet
	}
	return nil
}

func (x *RetrieveEngineRetrieveHitInfo) GetMediaTag() apicommon.CategoryTagType {
	if x != nil {
		return x.MediaTag
	}
	return apicommon.CategoryTagType_CATEGORY_TAG_TYPE_OTHER
}

func (x *RetrieveEngineRetrieveHitInfo) GetMatchLevel() MatchLevelType {
	if x != nil {
		return x.MatchLevel
	}
	return MatchLevelType_MATCH_LEVEL_TYPE_NONE
}

func (x *RetrieveEngineRetrieveHitInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type FilterBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaType   apicommon.MediaType         `protobuf:"varint,1,opt,name=MediaType,json=media_type,proto3,enum=trpc.media.common.MediaType" json:"MediaType,omitempty"`
	MediaTagSet []apicommon.CategoryTagType `protobuf:"varint,2,rep,packed,name=MediaTagSet,json=media_tag_set,proto3,enum=trpc.media.common.CategoryTagType" json:"MediaTagSet,omitempty"`
}

func (x *FilterBy) Reset() {
	*x = FilterBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterBy) ProtoMessage() {}

func (x *FilterBy) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterBy.ProtoReflect.Descriptor instead.
func (*FilterBy) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{70}
}

func (x *FilterBy) GetMediaType() apicommon.MediaType {
	if x != nil {
		return x.MediaType
	}
	return apicommon.MediaType_MEDIA_TYPE_OTHER
}

func (x *FilterBy) GetMediaTagSet() []apicommon.CategoryTagType {
	if x != nil {
		return x.MediaTagSet
	}
	return nil
}

type RetrieveEngineRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId          string                       `protobuf:"bytes,1,opt,name=SessionId,json=session_id,proto3" json:"SessionId,omitempty"`
	Uin                string                       `protobuf:"bytes,2,opt,name=Uin,json=uin,proto3" json:"Uin,omitempty"`
	SubAccountUin      string                       `protobuf:"bytes,3,opt,name=SubAccountUin,json=sub_account_uin,proto3" json:"SubAccountUin,omitempty"`
	DomainGroupInfoSet []*apicommon.DomainGroupInfo `protobuf:"bytes,4,rep,name=DomainGroupInfoSet,json=domain_groups,proto3" json:"DomainGroupInfoSet,omitempty"`
	QueryText          *QueryText                   `protobuf:"bytes,5,opt,name=QueryText,json=query_text,proto3" json:"QueryText,omitempty"`
	QueryImage         *QueryImage                  `protobuf:"bytes,6,opt,name=QueryImage,json=query_image,proto3" json:"QueryImage,omitempty"`
	PageNumber         uint32                       `protobuf:"varint,7,opt,name=PageNumber,json=page_no,proto3" json:"PageNumber,omitempty"`
	PageSize           uint32                       `protobuf:"varint,8,opt,name=PageSize,json=page_size,proto3" json:"PageSize,omitempty"`
	FilterBy           *FilterBy                    `protobuf:"bytes,9,opt,name=FilterBy,json=filter_by,proto3" json:"FilterBy,omitempty"`
}

func (x *RetrieveEngineRetrieveRequest) Reset() {
	*x = RetrieveEngineRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveEngineRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveEngineRetrieveRequest) ProtoMessage() {}

func (x *RetrieveEngineRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveEngineRetrieveRequest.ProtoReflect.Descriptor instead.
func (*RetrieveEngineRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{71}
}

func (x *RetrieveEngineRetrieveRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RetrieveEngineRetrieveRequest) GetUin() string {
	if x != nil {
		return x.Uin
	}
	return ""
}

func (x *RetrieveEngineRetrieveRequest) GetSubAccountUin() string {
	if x != nil {
		return x.SubAccountUin
	}
	return ""
}

func (x *RetrieveEngineRetrieveRequest) GetDomainGroupInfoSet() []*apicommon.DomainGroupInfo {
	if x != nil {
		return x.DomainGroupInfoSet
	}
	return nil
}

func (x *RetrieveEngineRetrieveRequest) GetQueryText() *QueryText {
	if x != nil {
		return x.QueryText
	}
	return nil
}

func (x *RetrieveEngineRetrieveRequest) GetQueryImage() *QueryImage {
	if x != nil {
		return x.QueryImage
	}
	return nil
}

func (x *RetrieveEngineRetrieveRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *RetrieveEngineRetrieveRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RetrieveEngineRetrieveRequest) GetFilterBy() *FilterBy {
	if x != nil {
		return x.FilterBy
	}
	return nil
}

type RetrieveEngineRetrieveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId             string                           `protobuf:"bytes,1,opt,name=SessionId,json=session_id,proto3" json:"SessionId,omitempty"`
	ErrorCode             int32                            `protobuf:"varint,2,opt,name=ErrorCode,json=errorcode,proto3" json:"ErrorCode,omitempty"`
	ErrorMsg              string                           `protobuf:"bytes,3,opt,name=ErrorMsg,json=errormsg,proto3" json:"ErrorMsg,omitempty"`
	RetrieveIntentSet     []*RetrieveTagItem               `protobuf:"bytes,4,rep,name=RetrieveIntentSet,json=tag_set,proto3" json:"RetrieveIntentSet,omitempty"`
	LexicalEntryDataSet   []*LexicalEntryData              `protobuf:"bytes,5,rep,name=LexicalEntryDataSet,json=lexical_entry_set,proto3" json:"LexicalEntryDataSet,omitempty"`
	RetrieveHitInfoSet    []*RetrieveEngineRetrieveHitInfo `protobuf:"bytes,6,rep,name=RetrieveHitInfoSet,json=hit_info_set,proto3" json:"RetrieveHitInfoSet,omitempty"`
	RetrieveHitTotalCount int32                            `protobuf:"varint,7,opt,name=RetrieveHitTotalCount,json=hit_total_count,proto3" json:"RetrieveHitTotalCount,omitempty"`
}

func (x *RetrieveEngineRetrieveResponse) Reset() {
	*x = RetrieveEngineRetrieveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveEngineRetrieveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveEngineRetrieveResponse) ProtoMessage() {}

func (x *RetrieveEngineRetrieveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveEngineRetrieveResponse.ProtoReflect.Descriptor instead.
func (*RetrieveEngineRetrieveResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{72}
}

func (x *RetrieveEngineRetrieveResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RetrieveEngineRetrieveResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *RetrieveEngineRetrieveResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RetrieveEngineRetrieveResponse) GetRetrieveIntentSet() []*RetrieveTagItem {
	if x != nil {
		return x.RetrieveIntentSet
	}
	return nil
}

func (x *RetrieveEngineRetrieveResponse) GetLexicalEntryDataSet() []*LexicalEntryData {
	if x != nil {
		return x.LexicalEntryDataSet
	}
	return nil
}

func (x *RetrieveEngineRetrieveResponse) GetRetrieveHitInfoSet() []*RetrieveEngineRetrieveHitInfo {
	if x != nil {
		return x.RetrieveHitInfoSet
	}
	return nil
}

func (x *RetrieveEngineRetrieveResponse) GetRetrieveHitTotalCount() int32 {
	if x != nil {
		return x.RetrieveHitTotalCount
	}
	return 0
}

// 检索引擎-联想词
type RetrieveEngineAssociateWordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId     string `protobuf:"bytes,1,opt,name=SessionId,json=session_id,proto3" json:"SessionId,omitempty"`
	Uin           string `protobuf:"bytes,3,opt,name=Uin,json=uin,proto3" json:"Uin,omitempty"`
	SubAccountUin string `protobuf:"bytes,4,opt,name=SubAccountUin,json=sub_account_uin,proto3" json:"SubAccountUin,omitempty"`
	Count         int32  `protobuf:"varint,5,opt,name=Count,json=count,proto3" json:"Count,omitempty"`
	Text          string `protobuf:"bytes,6,opt,name=Text,json=text,proto3" json:"Text,omitempty"`
}

func (x *RetrieveEngineAssociateWordsRequest) Reset() {
	*x = RetrieveEngineAssociateWordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveEngineAssociateWordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveEngineAssociateWordsRequest) ProtoMessage() {}

func (x *RetrieveEngineAssociateWordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveEngineAssociateWordsRequest.ProtoReflect.Descriptor instead.
func (*RetrieveEngineAssociateWordsRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{73}
}

func (x *RetrieveEngineAssociateWordsRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RetrieveEngineAssociateWordsRequest) GetUin() string {
	if x != nil {
		return x.Uin
	}
	return ""
}

func (x *RetrieveEngineAssociateWordsRequest) GetSubAccountUin() string {
	if x != nil {
		return x.SubAccountUin
	}
	return ""
}

func (x *RetrieveEngineAssociateWordsRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RetrieveEngineAssociateWordsRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type RetrieveEngineAssociateWordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string   `protobuf:"bytes,1,opt,name=SessionId,json=session_id,proto3" json:"SessionId,omitempty"`
	ErrorCode int32    `protobuf:"varint,2,opt,name=ErrorCode,json=errorcode,proto3" json:"ErrorCode,omitempty"`
	ErrorMsg  string   `protobuf:"bytes,3,opt,name=ErrorMsg,json=errormsg,proto3" json:"ErrorMsg,omitempty"`
	Words     []string `protobuf:"bytes,4,rep,name=Words,json=texts,proto3" json:"Words,omitempty"`
}

func (x *RetrieveEngineAssociateWordsResponse) Reset() {
	*x = RetrieveEngineAssociateWordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveEngineAssociateWordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveEngineAssociateWordsResponse) ProtoMessage() {}

func (x *RetrieveEngineAssociateWordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveEngineAssociateWordsResponse.ProtoReflect.Descriptor instead.
func (*RetrieveEngineAssociateWordsResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{74}
}

func (x *RetrieveEngineAssociateWordsResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RetrieveEngineAssociateWordsResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *RetrieveEngineAssociateWordsResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *RetrieveEngineAssociateWordsResponse) GetWords() []string {
	if x != nil {
		return x.Words
	}
	return nil
}

// 抽帧引擎-抽取图片
type FrameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frame      []byte `protobuf:"bytes,1,opt,name=Frame,json=frame,proto3" json:"Frame,omitempty"`
	FrameIndex uint32 `protobuf:"varint,2,opt,name=FrameIndex,json=frame_index,proto3" json:"FrameIndex,omitempty"`
}

func (x *FrameData) Reset() {
	*x = FrameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameData) ProtoMessage() {}

func (x *FrameData) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameData.ProtoReflect.Descriptor instead.
func (*FrameData) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{75}
}

func (x *FrameData) GetFrame() []byte {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *FrameData) GetFrameIndex() uint32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

type ExtractImageEngineExtractFramesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId      string  `protobuf:"bytes,1,opt,name=SessionId,json=session_id,proto3" json:"SessionId,omitempty"`
	AppID          string  `protobuf:"bytes,2,opt,name=AppID,json=app_id,proto3" json:"AppID,omitempty"`
	LocalVideoPath string  `protobuf:"bytes,3,opt,name=LocalVideoPath,json=local_video_path,proto3" json:"LocalVideoPath,omitempty"`
	FrameIndexs    []int32 `protobuf:"varint,4,rep,packed,name=FrameIndexs,json=frame_indexs,proto3" json:"FrameIndexs,omitempty"`
}

func (x *ExtractImageEngineExtractFramesRequest) Reset() {
	*x = ExtractImageEngineExtractFramesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractImageEngineExtractFramesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractImageEngineExtractFramesRequest) ProtoMessage() {}

func (x *ExtractImageEngineExtractFramesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractImageEngineExtractFramesRequest.ProtoReflect.Descriptor instead.
func (*ExtractImageEngineExtractFramesRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{76}
}

func (x *ExtractImageEngineExtractFramesRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ExtractImageEngineExtractFramesRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *ExtractImageEngineExtractFramesRequest) GetLocalVideoPath() string {
	if x != nil {
		return x.LocalVideoPath
	}
	return ""
}

func (x *ExtractImageEngineExtractFramesRequest) GetFrameIndexs() []int32 {
	if x != nil {
		return x.FrameIndexs
	}
	return nil
}

type ExtractImageEngineExtractFramesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string       `protobuf:"bytes,1,opt,name=SessionId,json=session_id,proto3" json:"SessionId,omitempty"`
	ErrorCode int32        `protobuf:"varint,2,opt,name=ErrorCode,json=errorcode,proto3" json:"ErrorCode,omitempty"`
	ErrorMsg  string       `protobuf:"bytes,3,opt,name=ErrorMsg,json=errormsg,proto3" json:"ErrorMsg,omitempty"`
	FrameData []*FrameData `protobuf:"bytes,4,rep,name=FrameData,json=frame_data,proto3" json:"FrameData,omitempty"`
}

func (x *ExtractImageEngineExtractFramesResponse) Reset() {
	*x = ExtractImageEngineExtractFramesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractImageEngineExtractFramesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractImageEngineExtractFramesResponse) ProtoMessage() {}

func (x *ExtractImageEngineExtractFramesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractImageEngineExtractFramesResponse.ProtoReflect.Descriptor instead.
func (*ExtractImageEngineExtractFramesResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{77}
}

func (x *ExtractImageEngineExtractFramesResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ExtractImageEngineExtractFramesResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ExtractImageEngineExtractFramesResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *ExtractImageEngineExtractFramesResponse) GetFrameData() []*FrameData {
	if x != nil {
		return x.FrameData
	}
	return nil
}

//创建资源包请求
type CreateResourcePackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string            `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	MediaIdSet []string          `protobuf:"bytes,2,rep,name=MediaIdSet,json=media_id_set,proto3" json:"MediaIdSet,omitempty"`
	MediaSet   []*MediaUnionInfo `protobuf:"bytes,3,rep,name=MediaSet,json=media_set,proto3" json:"MediaSet,omitempty"`
}

func (x *CreateResourcePackageRequest) Reset() {
	*x = CreateResourcePackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourcePackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourcePackageRequest) ProtoMessage() {}

func (x *CreateResourcePackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourcePackageRequest.ProtoReflect.Descriptor instead.
func (*CreateResourcePackageRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{78}
}

func (x *CreateResourcePackageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateResourcePackageRequest) GetMediaIdSet() []string {
	if x != nil {
		return x.MediaIdSet
	}
	return nil
}

func (x *CreateResourcePackageRequest) GetMediaSet() []*MediaUnionInfo {
	if x != nil {
		return x.MediaSet
	}
	return nil
}

type CreateResourcePackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageOperateResponse *PackageOperateResponse `protobuf:"bytes,1,opt,name=PackageOperateResponse,json=package_operate_response,proto3" json:"PackageOperateResponse,omitempty"`
}

func (x *CreateResourcePackageResponse) Reset() {
	*x = CreateResourcePackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourcePackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourcePackageResponse) ProtoMessage() {}

func (x *CreateResourcePackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourcePackageResponse.ProtoReflect.Descriptor instead.
func (*CreateResourcePackageResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{79}
}

func (x *CreateResourcePackageResponse) GetPackageOperateResponse() *PackageOperateResponse {
	if x != nil {
		return x.PackageOperateResponse
	}
	return nil
}

type PackageOperateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourcePackageId             string                         `protobuf:"bytes,1,opt,name=ResourcePackageId,json=resource_package_id,proto3" json:"ResourcePackageId,omitempty"`
	OperateResponse               *apicommon.OperateResponse     `protobuf:"bytes,2,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
	MediaIdSet                    []string                       `protobuf:"bytes,3,rep,name=MediaIdSet,json=media_id_set,proto3" json:"MediaIdSet,omitempty"`
	CreateMediaOperateResponseSet []*CreateMediasOperateResponse `protobuf:"bytes,4,rep,name=CreateMediaOperateResponseSet,proto3" json:"CreateMediaOperateResponseSet,omitempty"`
}

func (x *PackageOperateResponse) Reset() {
	*x = PackageOperateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageOperateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageOperateResponse) ProtoMessage() {}

func (x *PackageOperateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageOperateResponse.ProtoReflect.Descriptor instead.
func (*PackageOperateResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{80}
}

func (x *PackageOperateResponse) GetResourcePackageId() string {
	if x != nil {
		return x.ResourcePackageId
	}
	return ""
}

func (x *PackageOperateResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

func (x *PackageOperateResponse) GetMediaIdSet() []string {
	if x != nil {
		return x.MediaIdSet
	}
	return nil
}

func (x *PackageOperateResponse) GetCreateMediaOperateResponseSet() []*CreateMediasOperateResponse {
	if x != nil {
		return x.CreateMediaOperateResponseSet
	}
	return nil
}

type DeleteResourcePackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId string `protobuf:"bytes,1,opt,name=PackageId,json=package_id,proto3" json:"PackageId,omitempty"`
}

func (x *DeleteResourcePackageRequest) Reset() {
	*x = DeleteResourcePackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourcePackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourcePackageRequest) ProtoMessage() {}

func (x *DeleteResourcePackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourcePackageRequest.ProtoReflect.Descriptor instead.
func (*DeleteResourcePackageRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{81}
}

func (x *DeleteResourcePackageRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

type ResourcePackageOperateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperateResponse *apicommon.OperateResponse `protobuf:"bytes,1,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
}

func (x *ResourcePackageOperateResponse) Reset() {
	*x = ResourcePackageOperateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePackageOperateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePackageOperateResponse) ProtoMessage() {}

func (x *ResourcePackageOperateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePackageOperateResponse.ProtoReflect.Descriptor instead.
func (*ResourcePackageOperateResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{82}
}

func (x *ResourcePackageOperateResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

type UpdateResourcePackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId   string `protobuf:"bytes,1,opt,name=PackageId,json=package_id,proto3" json:"PackageId,omitempty"`
	PackageName string `protobuf:"bytes,2,opt,name=PackageName,json=package_Name,proto3" json:"PackageName,omitempty"`
}

func (x *UpdateResourcePackageRequest) Reset() {
	*x = UpdateResourcePackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourcePackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourcePackageRequest) ProtoMessage() {}

func (x *UpdateResourcePackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourcePackageRequest.ProtoReflect.Descriptor instead.
func (*UpdateResourcePackageRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{83}
}

func (x *UpdateResourcePackageRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *UpdateResourcePackageRequest) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

type DescribeResourcePackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber uint32              `protobuf:"varint,1,opt,name=PageNumber,proto3" json:"PageNumber,omitempty"`
	PageSize   uint32              `protobuf:"varint,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	Offset     uint32              `protobuf:"varint,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit      uint32              `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	FilterSet  []*apicommon.Filter `protobuf:"bytes,5,rep,name=FilterSet,proto3" json:"FilterSet,omitempty"`
	SorterSet  []*apicommon.Sorter `protobuf:"bytes,6,rep,name=SorterSet,proto3" json:"SorterSet,omitempty"`
	IsDeleted  bool                `protobuf:"varint,7,opt,name=IsDeleted,proto3" json:"IsDeleted,omitempty"`
}

func (x *DescribeResourcePackageRequest) Reset() {
	*x = DescribeResourcePackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeResourcePackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeResourcePackageRequest) ProtoMessage() {}

func (x *DescribeResourcePackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeResourcePackageRequest.ProtoReflect.Descriptor instead.
func (*DescribeResourcePackageRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{84}
}

func (x *DescribeResourcePackageRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *DescribeResourcePackageRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DescribeResourcePackageRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DescribeResourcePackageRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DescribeResourcePackageRequest) GetFilterSet() []*apicommon.Filter {
	if x != nil {
		return x.FilterSet
	}
	return nil
}

func (x *DescribeResourcePackageRequest) GetSorterSet() []*apicommon.Sorter {
	if x != nil {
		return x.SorterSet
	}
	return nil
}

func (x *DescribeResourcePackageRequest) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

type DescribePackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourcePackages []*ResourcePackage         `protobuf:"bytes,1,rep,name=ResourcePackages,proto3" json:"ResourcePackages,omitempty"`
	Count            int32                      `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	OperateResponse  *apicommon.OperateResponse `protobuf:"bytes,3,opt,name=OperateResponse,proto3" json:"OperateResponse,omitempty"`
}

func (x *DescribePackageResponse) Reset() {
	*x = DescribePackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePackageResponse) ProtoMessage() {}

func (x *DescribePackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePackageResponse.ProtoReflect.Descriptor instead.
func (*DescribePackageResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{85}
}

func (x *DescribePackageResponse) GetResourcePackages() []*ResourcePackage {
	if x != nil {
		return x.ResourcePackages
	}
	return nil
}

func (x *DescribePackageResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DescribePackageResponse) GetOperateResponse() *apicommon.OperateResponse {
	if x != nil {
		return x.OperateResponse
	}
	return nil
}

type ResourcePackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name              string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	MediaIdSet        []string `protobuf:"bytes,3,rep,name=MediaIdSet,proto3" json:"MediaIdSet,omitempty"`
	DeletedMediaIdSet []string `protobuf:"bytes,4,rep,name=DeletedMediaIdSet,proto3" json:"DeletedMediaIdSet,omitempty"`
}

func (x *ResourcePackage) Reset() {
	*x = ResourcePackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePackage) ProtoMessage() {}

func (x *ResourcePackage) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePackage.ProtoReflect.Descriptor instead.
func (*ResourcePackage) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{86}
}

func (x *ResourcePackage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourcePackage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourcePackage) GetMediaIdSet() []string {
	if x != nil {
		return x.MediaIdSet
	}
	return nil
}

func (x *ResourcePackage) GetDeletedMediaIdSet() []string {
	if x != nil {
		return x.DeletedMediaIdSet
	}
	return nil
}

type AddResourceToPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId  string            `protobuf:"bytes,1,opt,name=PackageId,proto3" json:"PackageId,omitempty"`
	MediaIdSet []string          `protobuf:"bytes,2,rep,name=MediaIdSet,proto3" json:"MediaIdSet,omitempty"`
	MediaSet   []*MediaUnionInfo `protobuf:"bytes,3,rep,name=MediaSet,proto3" json:"MediaSet,omitempty"`
}

func (x *AddResourceToPackageRequest) Reset() {
	*x = AddResourceToPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddResourceToPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResourceToPackageRequest) ProtoMessage() {}

func (x *AddResourceToPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResourceToPackageRequest.ProtoReflect.Descriptor instead.
func (*AddResourceToPackageRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{87}
}

func (x *AddResourceToPackageRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *AddResourceToPackageRequest) GetMediaIdSet() []string {
	if x != nil {
		return x.MediaIdSet
	}
	return nil
}

func (x *AddResourceToPackageRequest) GetMediaSet() []*MediaUnionInfo {
	if x != nil {
		return x.MediaSet
	}
	return nil
}

type AddResourceToPackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageOperateResponse *PackageOperateResponse `protobuf:"bytes,1,opt,name=PackageOperateResponse,proto3" json:"PackageOperateResponse,omitempty"`
}

func (x *AddResourceToPackageResponse) Reset() {
	*x = AddResourceToPackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddResourceToPackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResourceToPackageResponse) ProtoMessage() {}

func (x *AddResourceToPackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResourceToPackageResponse.ProtoReflect.Descriptor instead.
func (*AddResourceToPackageResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{88}
}

func (x *AddResourceToPackageResponse) GetPackageOperateResponse() *PackageOperateResponse {
	if x != nil {
		return x.PackageOperateResponse
	}
	return nil
}

type DeleteResourceFromPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId  string   `protobuf:"bytes,1,opt,name=PackageId,proto3" json:"PackageId,omitempty"`
	MediaIdSet []string `protobuf:"bytes,2,rep,name=MediaIdSet,proto3" json:"MediaIdSet,omitempty"`
}

func (x *DeleteResourceFromPackageRequest) Reset() {
	*x = DeleteResourceFromPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourceFromPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourceFromPackageRequest) ProtoMessage() {}

func (x *DeleteResourceFromPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourceFromPackageRequest.ProtoReflect.Descriptor instead.
func (*DeleteResourceFromPackageRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{89}
}

func (x *DeleteResourceFromPackageRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *DeleteResourceFromPackageRequest) GetMediaIdSet() []string {
	if x != nil {
		return x.MediaIdSet
	}
	return nil
}

type UndeleteResourceFromPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId  string   `protobuf:"bytes,1,opt,name=PackageId,proto3" json:"PackageId,omitempty"`
	MediaIdSet []string `protobuf:"bytes,2,rep,name=MediaIdSet,proto3" json:"MediaIdSet,omitempty"`
}

func (x *UndeleteResourceFromPackageRequest) Reset() {
	*x = UndeleteResourceFromPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndeleteResourceFromPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeleteResourceFromPackageRequest) ProtoMessage() {}

func (x *UndeleteResourceFromPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeleteResourceFromPackageRequest.ProtoReflect.Descriptor instead.
func (*UndeleteResourceFromPackageRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{90}
}

func (x *UndeleteResourceFromPackageRequest) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *UndeleteResourceFromPackageRequest) GetMediaIdSet() []string {
	if x != nil {
		return x.MediaIdSet
	}
	return nil
}

var File_media_proto protoreflect.FileDescriptor

var file_media_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee,
	0x03, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e,
	0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x61, 0x67, 0x12, 0x26,
	0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x61, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4c,
	0x61, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x61, 0x6e,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x22,
	0xb7, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x44, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x44, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x52,
	0x4c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c,
	0x22, 0xbe, 0x01, 0x0a, 0x19, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x41, 0x75, 0x74, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x22, 0x76, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x52, 0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc7, 0x03, 0x0a, 0x0e, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x09,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c,
	0x0a, 0x0f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x69, 0x0a, 0x19, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x19, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x42, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x65, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x52, 0x4c, 0x22, 0x7f,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x17, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x22,
	0x9d, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x68, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x22, 0x7e, 0x0a, 0x14, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x0a, 0x14, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x60, 0x0a, 0x17, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x17, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x65, 0x74, 0x22, 0x95, 0x03, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x46,
	0x50, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x46, 0x50, 0x53, 0x12, 0x18, 0x0a,
	0x07, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x65, 0x0a, 0x09, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53,
	0x65, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x64, 0x22, 0xc0, 0x02, 0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x12, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x49, 0x56, 0x4c, 0x44, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x49, 0x56, 0x4c, 0x44, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x14, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x97, 0x0a, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x39, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0f, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x69, 0x0a, 0x19, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x19, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x09, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x09, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x75, 0x62,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x53, 0x75, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x14, 0x53, 0x75, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x14, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x14, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x53, 0x65, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x53, 0x65, 0x74, 0x22,
	0x86, 0x03, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x37,
	0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x09, 0x53, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73, 0x53, 0x75, 0x62,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x49, 0x73, 0x53, 0x75, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x79,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x44, 0x61, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x64, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x75, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x65, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x74, 0x22, 0x78, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x60, 0x0a, 0x17, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x17, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x65, 0x74, 0x22, 0x4b, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x22,
	0x80, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x60, 0x0a, 0x17, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x17, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x65, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x54, 0x72, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x12, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1b, 0x0a,
	0x19, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x22,
	0xa8, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x22, 0xc5, 0x03, 0x0a, 0x12, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x09, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x69, 0x0a, 0x19, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x19, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x42,
	0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x63, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x00, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x02, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x48, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0b, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0b,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x48, 0x69, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x48, 0x69, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x0d, 0x48, 0x69, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0d, 0x48, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x12,
	0x40, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x36, 0x0a, 0x08, 0x41, 0x6c, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x41, 0x6c, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x10,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x48, 0x69, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x3f, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x44, 0x0a, 0x0d, 0x48, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x48, 0x69, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x22, 0x82, 0x04, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x48, 0x69, 0x74, 0x46, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4a, 0x6f,
	0x62, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x49, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x50,
	0x75, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x50, 0x75, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x48, 0x69, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x48, 0x69, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x0b, 0x48, 0x69, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x52, 0x65, 0x63, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x04,
	0x52, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x53, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x53, 0x65, 0x74, 0x22, 0xa8, 0x01, 0x0a,
	0x10, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x65,
	0x78, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4c, 0x65,
	0x78, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x15, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x22, 0x9f, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x0f, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0f,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x54, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xb7, 0x02, 0x0a, 0x1c, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x52, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x61, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x54, 0x61,
	0x67, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x48, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x48, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x48, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x02, 0x0a, 0x1c, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x10, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x48, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x48, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x48, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x11, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x37, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x53, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xb9, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x48, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x48, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x48, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x15, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x48, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x48, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x48, 0x69,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x15, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x46, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x48, 0x69, 0x74, 0x46, 0x61, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x48, 0x69, 0x74, 0x46, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x48, 0x69, 0x74,
	0x46, 0x61, 0x63, 0x65, 0x53, 0x65, 0x74, 0x22, 0x6d, 0x0a, 0x1f, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x6f, 0x70, 0x4e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x54, 0x6f, 0x70, 0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x48, 0x0a, 0x20, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x69,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x48, 0x69, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74,
	0x22, 0x2b, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x22, 0xa0, 0x01,
	0x0a, 0x16, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x57, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x89, 0x02, 0x0a, 0x14, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x12,
	0x4f, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x49, 0x73, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x49, 0x73, 0x53, 0x65,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x15,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a,
	0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x4f, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xc6, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x06, 0x42,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x69,
	0x6e, 0x64, 0x65, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x22, 0x4b, 0x0a, 0x11, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x42,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x09, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x22, 0x62, 0x0a, 0x12, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x37, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x21, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x0e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x61,
	0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x22,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x55, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x0f, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x52, 0x4c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x23,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x25, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x22, 0x1f, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x67, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x64, 0x0a, 0x0f, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a,
	0x0a, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x7d, 0x0a, 0x10, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x53, 0x75,
	0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x22,
	0x4b, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x06, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x22, 0x76, 0x0a, 0x1a,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x22, 0xf4, 0x03, 0x0a, 0x1d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x48,
	0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69,
	0x64, 0x12, 0x3b, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37,
	0x0a, 0x08, 0x41, 0x6c, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x48, 0x69, 0x74, 0x54, 0x61, 0x67,
	0x53, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x69, 0x74, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x61,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x74, 0x61, 0x67, 0x12, 0x41, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x61,
	0x67, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x22, 0xb5, 0x03,
	0x0a, 0x1d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x6e,
	0x12, 0x26, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x12,
	0x1b, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x22, 0x9f, 0x03, 0x0a, 0x1e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73,
	0x67, 0x12, 0x45, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x07, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x13, 0x4c, 0x65, 0x78, 0x69,
	0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x6c, 0x65, 0x78, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x59, 0x0a, 0x12,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x48, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x48, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x68, 0x69, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x48, 0x69, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x68, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x6e,
	0x12, 0x26, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x22, 0x42, 0x0a, 0x09, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xab,
	0x01, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0b, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x73, 0x22, 0xbe, 0x01, 0x0a,
	0x27, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6d, 0x73,
	0x67, 0x12, 0x3a, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x93, 0x01,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x73, 0x65, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x16, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x18, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x16, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x74, 0x12, 0x73, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x22, 0x3d, 0x0a, 0x1c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x1e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x12, 0x37, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x09,
	0x53, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64,
	0x53, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x22, 0x99, 0x01, 0x0a,
	0x1b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x16, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x16, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x20, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x22, 0x62, 0x0a,
	0x22, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x53, 0x65,
	0x74, 0x2a, 0x3c, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x01, 0x2a,
	0xd3, 0x01, 0x0a, 0x08, 0x41, 0x6c, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x4c, 0x47, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x4c, 0x47, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x47, 0x4f,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x32, 0x49, 0x4d, 0x41, 0x47,
	0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x47, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x32, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x4c, 0x47, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54,
	0x32, 0x54, 0x45, 0x58, 0x54, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x4c, 0x47, 0x4f, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x32, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10,
	0x05, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x4c, 0x47, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x32, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x4c, 0x47, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4d, 0x4f,
	0x44, 0x41, 0x4c, 0x10, 0x07, 0x2a, 0x8b, 0x03, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x56, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x04, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x52, 0x10, 0x06, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45, 0x59,
	0x57, 0x4f, 0x52, 0x44, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x52, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x43, 0x52, 0x5f, 0x43,
	0x41, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x54, 0x45, 0x58, 0x54, 0x10, 0x0b, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4d, 0x4f, 0x44, 0x41,
	0x4c, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x0e, 0x2a, 0x7d, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x03, 0x32, 0xac, 0x19, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x5d, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x25, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x25, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x27, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x75, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x25, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x2d, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x54, 0x72, 0x61, 0x73, 0x68, 0x12, 0x23, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x24, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x75, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2d, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x14, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x65, 0x78,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4c, 0x65, 0x78, 0x69,
	0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x1c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x61, 0x6c,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x1c, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x15,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x46, 0x61, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x46, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x18,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x31, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x63, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x79, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x30, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x1b, 0x55, 0x6e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x34, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x55, 0x6e, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x57, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12,
	0x23, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x19, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x5b, 0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x54, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x73, 0x64,
	0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73, 0x70,
	0x65, 0x63, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_media_proto_rawDescOnce sync.Once
	file_media_proto_rawDescData = file_media_proto_rawDesc
)

func file_media_proto_rawDescGZIP() []byte {
	file_media_proto_rawDescOnce.Do(func() {
		file_media_proto_rawDescData = protoimpl.X.CompressGZIP(file_media_proto_rawDescData)
	})
	return file_media_proto_rawDescData
}

var file_media_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_media_proto_msgTypes = make([]protoimpl.MessageInfo, 91)
var file_media_proto_goTypes = []interface{}{
	(IntentType)(0),                                 // 0: trpc.media.media.IntentType
	(AlgoType)(0),                                   // 1: trpc.media.media.AlgoType
	(SourceType)(0),                                 // 2: trpc.media.media.SourceType
	(MatchLevelType)(0),                             // 3: trpc.media.media.MatchLevelType
	(*MediaInfo)(nil),                               // 4: trpc.media.media.MediaInfo
	(*TranscodeInfo)(nil),                           // 5: trpc.media.media.TranscodeInfo
	(*FileInfo)(nil),                                // 6: trpc.media.media.FileInfo
	(*MediaWorkflowTemplateInfo)(nil),               // 7: trpc.media.media.MediaWorkflowTemplateInfo
	(*OptionalInfo)(nil),                            // 8: trpc.media.media.OptionalInfo
	(*MediaUnionInfo)(nil),                          // 9: trpc.media.media.MediaUnionInfo
	(*CreateMediasRequest)(nil),                     // 10: trpc.media.media.CreateMediasRequest
	(*CreateMediasOperateResponse)(nil),             // 11: trpc.media.media.CreateMediasOperateResponse
	(*CreateMediasResponse)(nil),                    // 12: trpc.media.media.CreateMediasResponse
	(*MediaCommitInfo)(nil),                         // 13: trpc.media.media.MediaCommitInfo
	(*CommitMediasRequest)(nil),                     // 14: trpc.media.media.CommitMediasRequest
	(*MediaOperateResponse)(nil),                    // 15: trpc.media.media.MediaOperateResponse
	(*CommitMediasResponse)(nil),                    // 16: trpc.media.media.CommitMediasResponse
	(*MediaMeta)(nil),                               // 17: trpc.media.media.MediaMeta
	(*CoverInfo)(nil),                               // 18: trpc.media.media.CoverInfo
	(*MediaStorageProgress)(nil),                    // 19: trpc.media.media.MediaStorageProgress
	(*MediaObject)(nil),                             // 20: trpc.media.media.MediaObject
	(*DescribeMediasRequest)(nil),                   // 21: trpc.media.media.DescribeMediasRequest
	(*DescribeMediasResponse)(nil),                  // 22: trpc.media.media.DescribeMediasResponse
	(*DescribeMediaDetailsRequest)(nil),             // 23: trpc.media.media.DescribeMediaDetailsRequest
	(*DescribeMediaDetailsResponse)(nil),            // 24: trpc.media.media.DescribeMediaDetailsResponse
	(*DeleteMedia)(nil),                             // 25: trpc.media.media.DeleteMedia
	(*DeleteMediasRequest)(nil),                     // 26: trpc.media.media.DeleteMediasRequest
	(*DeleteMediasResponse)(nil),                    // 27: trpc.media.media.DeleteMediasResponse
	(*RestoreDeletedMediasRequest)(nil),             // 28: trpc.media.media.RestoreDeletedMediasRequest
	(*RestoreDeletedMediasResponse)(nil),            // 29: trpc.media.media.RestoreDeletedMediasResponse
	(*EmptyTrashRequest)(nil),                       // 30: trpc.media.media.EmptyTrashRequest
	(*EmptyTrashResponse)(nil),                      // 31: trpc.media.media.EmptyTrashResponse
	(*DescribeCategoriesRequest)(nil),               // 32: trpc.media.media.DescribeCategoriesRequest
	(*Category)(nil),                                // 33: trpc.media.media.Category
	(*DescribeCategoriesResponse)(nil),              // 34: trpc.media.media.DescribeCategoriesResponse
	(*ModifyMediaRequest)(nil),                      // 35: trpc.media.media.ModifyMediaRequest
	(*ModifyMediaResponse)(nil),                     // 36: trpc.media.media.ModifyMediaResponse
	(*MediaSegment)(nil),                            // 37: trpc.media.media.MediaSegment
	(*RetrieveHitInfo)(nil),                         // 38: trpc.media.media.RetrieveHitInfo
	(*RetrieveHitMedia)(nil),                        // 39: trpc.media.media.RetrieveHitMedia
	(*RetrieveHitFace)(nil),                         // 40: trpc.media.media.RetrieveHitFace
	(*LexicalEntryInfo)(nil),                        // 41: trpc.media.media.LexicalEntryInfo
	(*RetrieveRelevantTagsRequest)(nil),             // 42: trpc.media.media.RetrieveRelevantTagsRequest
	(*RetrieveTagInfo)(nil),                         // 43: trpc.media.media.RetrieveTagInfo
	(*RetrieveRelevantTagsResponse)(nil),            // 44: trpc.media.media.RetrieveRelevantTagsResponse
	(*RetrieveLexicalEntryRequest)(nil),             // 45: trpc.media.media.RetrieveLexicalEntryRequest
	(*RetrieveLexicalEntryResponse)(nil),            // 46: trpc.media.media.RetrieveLexicalEntryResponse
	(*RetrieveMediasRequest)(nil),                   // 47: trpc.media.media.RetrieveMediasRequest
	(*RetrieveMediasResponse)(nil),                  // 48: trpc.media.media.RetrieveMediasResponse
	(*RetrieveFacesResponse)(nil),                   // 49: trpc.media.media.RetrieveFacesResponse
	(*RetrieveConsistentMediasRequest)(nil),         // 50: trpc.media.media.RetrieveConsistentMediasRequest
	(*RetrieveConsistentMediasResponse)(nil),        // 51: trpc.media.media.RetrieveConsistentMediasResponse
	(*AssociateWordsRequest)(nil),                   // 52: trpc.media.media.AssociateWordsRequest
	(*AssociateWordsResponse)(nil),                  // 53: trpc.media.media.AssociateWordsResponse
	(*ExtractImagesRequest)(nil),                    // 54: trpc.media.media.ExtractImagesRequest
	(*ImageInfo)(nil),                               // 55: trpc.media.media.ImageInfo
	(*ExtractImagesResponse)(nil),                   // 56: trpc.media.media.ExtractImagesResponse
	(*Binder)(nil),                                  // 57: trpc.media.media.Binder
	(*BindMediasRequest)(nil),                       // 58: trpc.media.media.BindMediasRequest
	(*BindMediasResponse)(nil),                      // 59: trpc.media.media.BindMediasResponse
	(*DescribeMediaDetailsInnerRequest)(nil),        // 60: trpc.media.media.DescribeMediaDetailsInnerRequest
	(*DescribeMediaDetailsInnerResponse)(nil),       // 61: trpc.media.media.DescribeMediaDetailsInnerResponse
	(*DataCenterCreateDownloadURLRequest)(nil),      // 62: trpc.media.media.DataCenterCreateDownloadURLRequest
	(*DataCenterError)(nil),                         // 63: trpc.media.media.DataCenterError
	(*DataCenterResponse)(nil),                      // 64: trpc.media.media.DataCenterResponse
	(*DataCenterCreateDownloadURLResponse)(nil),     // 65: trpc.media.media.DataCenterCreateDownloadURLResponse
	(*DataCenterCreateDeleteFileTaskRequest)(nil),   // 66: trpc.media.media.DataCenterCreateDeleteFileTaskRequest
	(*QueryText)(nil),                               // 67: trpc.media.media.QueryText
	(*QueryImage)(nil),                              // 68: trpc.media.media.QueryImage
	(*RetrieveTagItem)(nil),                         // 69: trpc.media.media.RetrieveTagItem
	(*LexicalEntryData)(nil),                        // 70: trpc.media.media.LexicalEntryData
	(*RetrievalMediaTagInfo)(nil),                   // 71: trpc.media.media.RetrievalMediaTagInfo
	(*RetrieveEngineMediaSegment)(nil),              // 72: trpc.media.media.RetrieveEngineMediaSegment
	(*RetrieveEngineRetrieveHitInfo)(nil),           // 73: trpc.media.media.RetrieveEngineRetrieveHitInfo
	(*FilterBy)(nil),                                // 74: trpc.media.media.FilterBy
	(*RetrieveEngineRetrieveRequest)(nil),           // 75: trpc.media.media.RetrieveEngineRetrieveRequest
	(*RetrieveEngineRetrieveResponse)(nil),          // 76: trpc.media.media.RetrieveEngineRetrieveResponse
	(*RetrieveEngineAssociateWordsRequest)(nil),     // 77: trpc.media.media.RetrieveEngineAssociateWordsRequest
	(*RetrieveEngineAssociateWordsResponse)(nil),    // 78: trpc.media.media.RetrieveEngineAssociateWordsResponse
	(*FrameData)(nil),                               // 79: trpc.media.media.FrameData
	(*ExtractImageEngineExtractFramesRequest)(nil),  // 80: trpc.media.media.ExtractImageEngineExtractFramesRequest
	(*ExtractImageEngineExtractFramesResponse)(nil), // 81: trpc.media.media.ExtractImageEngineExtractFramesResponse
	(*CreateResourcePackageRequest)(nil),            // 82: trpc.media.media.CreateResourcePackageRequest
	(*CreateResourcePackageResponse)(nil),           // 83: trpc.media.media.CreateResourcePackageResponse
	(*PackageOperateResponse)(nil),                  // 84: trpc.media.media.PackageOperateResponse
	(*DeleteResourcePackageRequest)(nil),            // 85: trpc.media.media.DeleteResourcePackageRequest
	(*ResourcePackageOperateResponse)(nil),          // 86: trpc.media.media.ResourcePackageOperateResponse
	(*UpdateResourcePackageRequest)(nil),            // 87: trpc.media.media.UpdateResourcePackageRequest
	(*DescribeResourcePackageRequest)(nil),          // 88: trpc.media.media.DescribeResourcePackageRequest
	(*DescribePackageResponse)(nil),                 // 89: trpc.media.media.DescribePackageResponse
	(*ResourcePackage)(nil),                         // 90: trpc.media.media.ResourcePackage
	(*AddResourceToPackageRequest)(nil),             // 91: trpc.media.media.AddResourceToPackageRequest
	(*AddResourceToPackageResponse)(nil),            // 92: trpc.media.media.AddResourceToPackageResponse
	(*DeleteResourceFromPackageRequest)(nil),        // 93: trpc.media.media.DeleteResourceFromPackageRequest
	(*UndeleteResourceFromPackageRequest)(nil),      // 94: trpc.media.media.UndeleteResourceFromPackageRequest
	(apicommon.MediaType)(0),                        // 95: trpc.media.common.MediaType
	(apicommon.MediaSourceType)(0),                  // 96: trpc.media.common.MediaSourceType
	(apicommon.CategoryTagType)(0),                  // 97: trpc.media.common.CategoryTagType
	(apicommon.LangType)(0),                         // 98: trpc.media.common.LangType
	(apicommon.WorkflowMode)(0),                     // 99: trpc.media.common.WorkflowMode
	(*apicommon.DomainGroupInfo)(nil),               // 100: trpc.media.common.DomainGroupInfo
	(*apicommon.OperateResponse)(nil),               // 101: trpc.media.common.OperateResponse
	(apicommon.TaskStatus)(0),                       // 102: trpc.media.common.TaskStatus
	(apicommon.MediaStatus)(0),                      // 103: trpc.media.common.MediaStatus
	(*apicommon.UserInfo)(nil),                      // 104: trpc.media.common.UserInfo
	(*taskdata.AllTaskData)(nil),                    // 105: trpc.media.taskdata.AllTaskData
	(*apicommon.Filter)(nil),                        // 106: trpc.media.common.Filter
	(*apicommon.Sorter)(nil),                        // 107: trpc.media.common.Sorter
	(*apicommon.DayRange)(nil),                      // 108: trpc.media.common.DayRange
	(apicommon.DeleteType)(0),                       // 109: trpc.media.common.DeleteType
	(*apicommon.Rect)(nil),                          // 110: trpc.media.common.Rect
	(apicommon.RetrieveInputType)(0),                // 111: trpc.media.common.RetrieveInputType
	(apicommon.RetrieveTagType)(0),                  // 112: trpc.media.common.RetrieveTagType
	(apicommon.RetrieveHitSourceType)(0),            // 113: trpc.media.common.RetrieveHitSourceType
	(apicommon.ExtractImageType)(0),                 // 114: trpc.media.common.ExtractImageType
	(apicommon.BindType)(0),                         // 115: trpc.media.common.BindType
}
var file_media_proto_depIdxs = []int32{
	95,  // 0: trpc.media.media.MediaInfo.MediaType:type_name -> trpc.media.common.MediaType
	96,  // 1: trpc.media.media.MediaInfo.MediaSource:type_name -> trpc.media.common.MediaSourceType
	97,  // 2: trpc.media.media.MediaInfo.MediaTag:type_name -> trpc.media.common.CategoryTagType
	98,  // 3: trpc.media.media.MediaInfo.MediaLang:type_name -> trpc.media.common.LangType
	99,  // 4: trpc.media.media.MediaWorkflowTemplateInfo.WorkflowMode:type_name -> trpc.media.common.WorkflowMode
	4,   // 5: trpc.media.media.MediaUnionInfo.MediaInfo:type_name -> trpc.media.media.MediaInfo
	5,   // 6: trpc.media.media.MediaUnionInfo.TranscodeInfo:type_name -> trpc.media.media.TranscodeInfo
	100, // 7: trpc.media.media.MediaUnionInfo.DomainGroupInfo:type_name -> trpc.media.common.DomainGroupInfo
	6,   // 8: trpc.media.media.MediaUnionInfo.FileInfo:type_name -> trpc.media.media.FileInfo
	7,   // 9: trpc.media.media.MediaUnionInfo.MediaWorkflowTemplateInfo:type_name -> trpc.media.media.MediaWorkflowTemplateInfo
	8,   // 10: trpc.media.media.MediaUnionInfo.OptionalInfo:type_name -> trpc.media.media.OptionalInfo
	9,   // 11: trpc.media.media.CreateMediasRequest.MediaUnionInfoSet:type_name -> trpc.media.media.MediaUnionInfo
	101, // 12: trpc.media.media.CreateMediasOperateResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	11,  // 13: trpc.media.media.CreateMediasResponse.MediaOperateResponseSet:type_name -> trpc.media.media.CreateMediasOperateResponse
	13,  // 14: trpc.media.media.CommitMediasRequest.MediaCommitInfoSet:type_name -> trpc.media.media.MediaCommitInfo
	101, // 15: trpc.media.media.MediaOperateResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	15,  // 16: trpc.media.media.CommitMediasResponse.MediaOperateResponseSet:type_name -> trpc.media.media.MediaOperateResponse
	102, // 17: trpc.media.media.MediaStorageProgress.TranscodeStatus:type_name -> trpc.media.common.TaskStatus
	102, // 18: trpc.media.media.MediaStorageProgress.CoverExtractStatus:type_name -> trpc.media.common.TaskStatus
	102, // 19: trpc.media.media.MediaStorageProgress.IVLDStatus:type_name -> trpc.media.common.TaskStatus
	102, // 20: trpc.media.media.MediaStorageProgress.FeatureStorageStatus:type_name -> trpc.media.common.TaskStatus
	103, // 21: trpc.media.media.MediaObject.MediaStatus:type_name -> trpc.media.common.MediaStatus
	104, // 22: trpc.media.media.MediaObject.CreateUserInfo:type_name -> trpc.media.common.UserInfo
	104, // 23: trpc.media.media.MediaObject.ModifyUserInfo:type_name -> trpc.media.common.UserInfo
	4,   // 24: trpc.media.media.MediaObject.MediaInfo:type_name -> trpc.media.media.MediaInfo
	100, // 25: trpc.media.media.MediaObject.DomainGroupInfo:type_name -> trpc.media.common.DomainGroupInfo
	6,   // 26: trpc.media.media.MediaObject.FileInfo:type_name -> trpc.media.media.FileInfo
	7,   // 27: trpc.media.media.MediaObject.MediaWorkflowTemplateInfo:type_name -> trpc.media.media.MediaWorkflowTemplateInfo
	17,  // 28: trpc.media.media.MediaObject.MediaMeta:type_name -> trpc.media.media.MediaMeta
	18,  // 29: trpc.media.media.MediaObject.CoverInfo:type_name -> trpc.media.media.CoverInfo
	105, // 30: trpc.media.media.MediaObject.TaskData:type_name -> trpc.media.taskdata.AllTaskData
	19,  // 31: trpc.media.media.MediaObject.MediaStorageProgress:type_name -> trpc.media.media.MediaStorageProgress
	8,   // 32: trpc.media.media.MediaObject.OptionalInfo:type_name -> trpc.media.media.OptionalInfo
	106, // 33: trpc.media.media.DescribeMediasRequest.FilterSet:type_name -> trpc.media.common.Filter
	107, // 34: trpc.media.media.DescribeMediasRequest.SorterSet:type_name -> trpc.media.common.Sorter
	108, // 35: trpc.media.media.DescribeMediasRequest.CreateDayRange:type_name -> trpc.media.common.DayRange
	101, // 36: trpc.media.media.DescribeMediasResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	20,  // 37: trpc.media.media.DescribeMediasResponse.MediaObjectSet:type_name -> trpc.media.media.MediaObject
	101, // 38: trpc.media.media.DescribeMediaDetailsResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	20,  // 39: trpc.media.media.DescribeMediaDetailsResponse.MediaObjectSet:type_name -> trpc.media.media.MediaObject
	109, // 40: trpc.media.media.DeleteMediasRequest.DeleteType:type_name -> trpc.media.common.DeleteType
	25,  // 41: trpc.media.media.DeleteMediasRequest.DeleteSet:type_name -> trpc.media.media.DeleteMedia
	15,  // 42: trpc.media.media.DeleteMediasResponse.MediaOperateResponseSet:type_name -> trpc.media.media.MediaOperateResponse
	15,  // 43: trpc.media.media.RestoreDeletedMediasResponse.MediaOperateResponseSet:type_name -> trpc.media.media.MediaOperateResponse
	95,  // 44: trpc.media.media.Category.MediaType:type_name -> trpc.media.common.MediaType
	97,  // 45: trpc.media.media.Category.TagSet:type_name -> trpc.media.common.CategoryTagType
	101, // 46: trpc.media.media.DescribeCategoriesResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	33,  // 47: trpc.media.media.DescribeCategoriesResponse.CategorySet:type_name -> trpc.media.media.Category
	4,   // 48: trpc.media.media.ModifyMediaRequest.MediaInfo:type_name -> trpc.media.media.MediaInfo
	100, // 49: trpc.media.media.ModifyMediaRequest.DomainGroupInfo:type_name -> trpc.media.common.DomainGroupInfo
	18,  // 50: trpc.media.media.ModifyMediaRequest.CoverInfo:type_name -> trpc.media.media.CoverInfo
	7,   // 51: trpc.media.media.ModifyMediaRequest.MediaWorkflowTemplateInfo:type_name -> trpc.media.media.MediaWorkflowTemplateInfo
	8,   // 52: trpc.media.media.ModifyMediaRequest.OptionalInfo:type_name -> trpc.media.media.OptionalInfo
	101, // 53: trpc.media.media.ModifyMediaResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	20,  // 54: trpc.media.media.RetrieveHitInfo.MediaObject:type_name -> trpc.media.media.MediaObject
	37,  // 55: trpc.media.media.RetrieveHitInfo.HitSegmentSet:type_name -> trpc.media.media.MediaSegment
	3,   // 56: trpc.media.media.RetrieveHitInfo.MatchLevel:type_name -> trpc.media.media.MatchLevelType
	1,   // 57: trpc.media.media.RetrieveHitInfo.AlgoType:type_name -> trpc.media.media.AlgoType
	20,  // 58: trpc.media.media.RetrieveHitMedia.MediaObject:type_name -> trpc.media.media.MediaObject
	37,  // 59: trpc.media.media.RetrieveHitMedia.HitSegmentSet:type_name -> trpc.media.media.MediaSegment
	39,  // 60: trpc.media.media.RetrieveHitFace.HitMediaSet:type_name -> trpc.media.media.RetrieveHitMedia
	110, // 61: trpc.media.media.RetrieveHitFace.Rect:type_name -> trpc.media.common.Rect
	111, // 62: trpc.media.media.RetrieveRelevantTagsRequest.RetrieveInputType:type_name -> trpc.media.common.RetrieveInputType
	112, // 63: trpc.media.media.RetrieveTagInfo.RetrieveTagType:type_name -> trpc.media.common.RetrieveTagType
	101, // 64: trpc.media.media.RetrieveRelevantTagsResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	43,  // 65: trpc.media.media.RetrieveRelevantTagsResponse.RelevantTagSet:type_name -> trpc.media.media.RetrieveTagInfo
	113, // 66: trpc.media.media.RetrieveRelevantTagsResponse.RetrieveHitSourceType:type_name -> trpc.media.common.RetrieveHitSourceType
	111, // 67: trpc.media.media.RetrieveLexicalEntryRequest.RetrieveInputType:type_name -> trpc.media.common.RetrieveInputType
	101, // 68: trpc.media.media.RetrieveLexicalEntryResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	41,  // 69: trpc.media.media.RetrieveLexicalEntryResponse.LexicalEntryInfo:type_name -> trpc.media.media.LexicalEntryInfo
	113, // 70: trpc.media.media.RetrieveLexicalEntryResponse.RetrieveHitSourceType:type_name -> trpc.media.common.RetrieveHitSourceType
	111, // 71: trpc.media.media.RetrieveMediasRequest.RetrieveInputType:type_name -> trpc.media.common.RetrieveInputType
	106, // 72: trpc.media.media.RetrieveMediasRequest.FilterSet:type_name -> trpc.media.common.Filter
	107, // 73: trpc.media.media.RetrieveMediasRequest.SorterSet:type_name -> trpc.media.common.Sorter
	101, // 74: trpc.media.media.RetrieveMediasResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	38,  // 75: trpc.media.media.RetrieveMediasResponse.RetrieveHitInfoSet:type_name -> trpc.media.media.RetrieveHitInfo
	113, // 76: trpc.media.media.RetrieveMediasResponse.RetrieveHitSourceType:type_name -> trpc.media.common.RetrieveHitSourceType
	40,  // 77: trpc.media.media.RetrieveFacesResponse.HitFaceSet:type_name -> trpc.media.media.RetrieveHitFace
	101, // 78: trpc.media.media.AssociateWordsResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	114, // 79: trpc.media.media.ExtractImagesRequest.ExtractImageType:type_name -> trpc.media.common.ExtractImageType
	114, // 80: trpc.media.media.ImageInfo.ExtractImageType:type_name -> trpc.media.common.ExtractImageType
	101, // 81: trpc.media.media.ExtractImagesResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	55,  // 82: trpc.media.media.ExtractImagesResponse.ImageInfoSet:type_name -> trpc.media.media.ImageInfo
	115, // 83: trpc.media.media.Binder.BindType:type_name -> trpc.media.common.BindType
	57,  // 84: trpc.media.media.BindMediasRequest.BinderSet:type_name -> trpc.media.media.Binder
	101, // 85: trpc.media.media.BindMediasResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	106, // 86: trpc.media.media.DescribeMediaDetailsInnerRequest.FilterSet:type_name -> trpc.media.common.Filter
	101, // 87: trpc.media.media.DescribeMediaDetailsInnerResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	20,  // 88: trpc.media.media.DescribeMediaDetailsInnerResponse.MediaObjectSet:type_name -> trpc.media.media.MediaObject
	63,  // 89: trpc.media.media.DataCenterResponse.Error:type_name -> trpc.media.media.DataCenterError
	64,  // 90: trpc.media.media.DataCenterCreateDownloadURLResponse.Response:type_name -> trpc.media.media.DataCenterResponse
	0,   // 91: trpc.media.media.RetrieveTagItem.IntentType:type_name -> trpc.media.media.IntentType
	95,  // 92: trpc.media.media.RetrieveEngineRetrieveHitInfo.MediaType:type_name -> trpc.media.common.MediaType
	1,   // 93: trpc.media.media.RetrieveEngineRetrieveHitInfo.AlgoType:type_name -> trpc.media.media.AlgoType
	2,   // 94: trpc.media.media.RetrieveEngineRetrieveHitInfo.SourceType:type_name -> trpc.media.media.SourceType
	72,  // 95: trpc.media.media.RetrieveEngineRetrieveHitInfo.SegmentSet:type_name -> trpc.media.media.RetrieveEngineMediaSegment
	97,  // 96: trpc.media.media.RetrieveEngineRetrieveHitInfo.MediaTag:type_name -> trpc.media.common.CategoryTagType
	3,   // 97: trpc.media.media.RetrieveEngineRetrieveHitInfo.MatchLevel:type_name -> trpc.media.media.MatchLevelType
	95,  // 98: trpc.media.media.FilterBy.MediaType:type_name -> trpc.media.common.MediaType
	97,  // 99: trpc.media.media.FilterBy.MediaTagSet:type_name -> trpc.media.common.CategoryTagType
	100, // 100: trpc.media.media.RetrieveEngineRetrieveRequest.DomainGroupInfoSet:type_name -> trpc.media.common.DomainGroupInfo
	67,  // 101: trpc.media.media.RetrieveEngineRetrieveRequest.QueryText:type_name -> trpc.media.media.QueryText
	68,  // 102: trpc.media.media.RetrieveEngineRetrieveRequest.QueryImage:type_name -> trpc.media.media.QueryImage
	74,  // 103: trpc.media.media.RetrieveEngineRetrieveRequest.FilterBy:type_name -> trpc.media.media.FilterBy
	69,  // 104: trpc.media.media.RetrieveEngineRetrieveResponse.RetrieveIntentSet:type_name -> trpc.media.media.RetrieveTagItem
	70,  // 105: trpc.media.media.RetrieveEngineRetrieveResponse.LexicalEntryDataSet:type_name -> trpc.media.media.LexicalEntryData
	73,  // 106: trpc.media.media.RetrieveEngineRetrieveResponse.RetrieveHitInfoSet:type_name -> trpc.media.media.RetrieveEngineRetrieveHitInfo
	79,  // 107: trpc.media.media.ExtractImageEngineExtractFramesResponse.FrameData:type_name -> trpc.media.media.FrameData
	9,   // 108: trpc.media.media.CreateResourcePackageRequest.MediaSet:type_name -> trpc.media.media.MediaUnionInfo
	84,  // 109: trpc.media.media.CreateResourcePackageResponse.PackageOperateResponse:type_name -> trpc.media.media.PackageOperateResponse
	101, // 110: trpc.media.media.PackageOperateResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	11,  // 111: trpc.media.media.PackageOperateResponse.CreateMediaOperateResponseSet:type_name -> trpc.media.media.CreateMediasOperateResponse
	101, // 112: trpc.media.media.ResourcePackageOperateResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	106, // 113: trpc.media.media.DescribeResourcePackageRequest.FilterSet:type_name -> trpc.media.common.Filter
	107, // 114: trpc.media.media.DescribeResourcePackageRequest.SorterSet:type_name -> trpc.media.common.Sorter
	90,  // 115: trpc.media.media.DescribePackageResponse.ResourcePackages:type_name -> trpc.media.media.ResourcePackage
	101, // 116: trpc.media.media.DescribePackageResponse.OperateResponse:type_name -> trpc.media.common.OperateResponse
	9,   // 117: trpc.media.media.AddResourceToPackageRequest.MediaSet:type_name -> trpc.media.media.MediaUnionInfo
	84,  // 118: trpc.media.media.AddResourceToPackageResponse.PackageOperateResponse:type_name -> trpc.media.media.PackageOperateResponse
	10,  // 119: trpc.media.media.Media.CreateMedias:input_type -> trpc.media.media.CreateMediasRequest
	14,  // 120: trpc.media.media.Media.CommitMedias:input_type -> trpc.media.media.CommitMediasRequest
	21,  // 121: trpc.media.media.Media.DescribeMedias:input_type -> trpc.media.media.DescribeMediasRequest
	23,  // 122: trpc.media.media.Media.DescribeMediaDetails:input_type -> trpc.media.media.DescribeMediaDetailsRequest
	26,  // 123: trpc.media.media.Media.DeleteMedias:input_type -> trpc.media.media.DeleteMediasRequest
	28,  // 124: trpc.media.media.Media.RestoreDeletedMedias:input_type -> trpc.media.media.RestoreDeletedMediasRequest
	30,  // 125: trpc.media.media.Media.EmptyTrash:input_type -> trpc.media.media.EmptyTrashRequest
	32,  // 126: trpc.media.media.Media.DescribeCategories:input_type -> trpc.media.media.DescribeCategoriesRequest
	35,  // 127: trpc.media.media.Media.ModifyMedia:input_type -> trpc.media.media.ModifyMediaRequest
	42,  // 128: trpc.media.media.Media.RetrieveRelevantTags:input_type -> trpc.media.media.RetrieveRelevantTagsRequest
	45,  // 129: trpc.media.media.Media.RetrieveLexicalEntry:input_type -> trpc.media.media.RetrieveLexicalEntryRequest
	47,  // 130: trpc.media.media.Media.RetrieveTitleMedias:input_type -> trpc.media.media.RetrieveMediasRequest
	47,  // 131: trpc.media.media.Media.RetrieveContentMedias:input_type -> trpc.media.media.RetrieveMediasRequest
	47,  // 132: trpc.media.media.Media.RetrieveTextMultiModalMedias:input_type -> trpc.media.media.RetrieveMediasRequest
	47,  // 133: trpc.media.media.Media.RetrieveTextCrossModalMedias:input_type -> trpc.media.media.RetrieveMediasRequest
	47,  // 134: trpc.media.media.Media.RetrieveSimilarMedias:input_type -> trpc.media.media.RetrieveMediasRequest
	47,  // 135: trpc.media.media.Media.RetrieveFaces:input_type -> trpc.media.media.RetrieveMediasRequest
	50,  // 136: trpc.media.media.Media.RetrieveConsistentMedias:input_type -> trpc.media.media.RetrieveConsistentMediasRequest
	52,  // 137: trpc.media.media.Media.AssociateWords:input_type -> trpc.media.media.AssociateWordsRequest
	54,  // 138: trpc.media.media.Media.ExtractImages:input_type -> trpc.media.media.ExtractImagesRequest
	82,  // 139: trpc.media.media.Media.CreateResourcePackage:input_type -> trpc.media.media.CreateResourcePackageRequest
	85,  // 140: trpc.media.media.Media.DeleteResourcePackage:input_type -> trpc.media.media.DeleteResourcePackageRequest
	87,  // 141: trpc.media.media.Media.UpdateResourcePackage:input_type -> trpc.media.media.UpdateResourcePackageRequest
	88,  // 142: trpc.media.media.Media.DescribeResourcePackage:input_type -> trpc.media.media.DescribeResourcePackageRequest
	91,  // 143: trpc.media.media.Media.AddResourceToPackage:input_type -> trpc.media.media.AddResourceToPackageRequest
	93,  // 144: trpc.media.media.Media.DeleteResourceFromPackage:input_type -> trpc.media.media.DeleteResourceFromPackageRequest
	94,  // 145: trpc.media.media.Media.UndeleteResourceFromPackage:input_type -> trpc.media.media.UndeleteResourceFromPackageRequest
	58,  // 146: trpc.media.media.Media.BindMedias:input_type -> trpc.media.media.BindMediasRequest
	60,  // 147: trpc.media.media.Media.DescribeMediaDetailsInner:input_type -> trpc.media.media.DescribeMediaDetailsInnerRequest
	12,  // 148: trpc.media.media.Media.CreateMedias:output_type -> trpc.media.media.CreateMediasResponse
	16,  // 149: trpc.media.media.Media.CommitMedias:output_type -> trpc.media.media.CommitMediasResponse
	22,  // 150: trpc.media.media.Media.DescribeMedias:output_type -> trpc.media.media.DescribeMediasResponse
	24,  // 151: trpc.media.media.Media.DescribeMediaDetails:output_type -> trpc.media.media.DescribeMediaDetailsResponse
	27,  // 152: trpc.media.media.Media.DeleteMedias:output_type -> trpc.media.media.DeleteMediasResponse
	29,  // 153: trpc.media.media.Media.RestoreDeletedMedias:output_type -> trpc.media.media.RestoreDeletedMediasResponse
	31,  // 154: trpc.media.media.Media.EmptyTrash:output_type -> trpc.media.media.EmptyTrashResponse
	34,  // 155: trpc.media.media.Media.DescribeCategories:output_type -> trpc.media.media.DescribeCategoriesResponse
	36,  // 156: trpc.media.media.Media.ModifyMedia:output_type -> trpc.media.media.ModifyMediaResponse
	44,  // 157: trpc.media.media.Media.RetrieveRelevantTags:output_type -> trpc.media.media.RetrieveRelevantTagsResponse
	46,  // 158: trpc.media.media.Media.RetrieveLexicalEntry:output_type -> trpc.media.media.RetrieveLexicalEntryResponse
	48,  // 159: trpc.media.media.Media.RetrieveTitleMedias:output_type -> trpc.media.media.RetrieveMediasResponse
	48,  // 160: trpc.media.media.Media.RetrieveContentMedias:output_type -> trpc.media.media.RetrieveMediasResponse
	48,  // 161: trpc.media.media.Media.RetrieveTextMultiModalMedias:output_type -> trpc.media.media.RetrieveMediasResponse
	48,  // 162: trpc.media.media.Media.RetrieveTextCrossModalMedias:output_type -> trpc.media.media.RetrieveMediasResponse
	48,  // 163: trpc.media.media.Media.RetrieveSimilarMedias:output_type -> trpc.media.media.RetrieveMediasResponse
	49,  // 164: trpc.media.media.Media.RetrieveFaces:output_type -> trpc.media.media.RetrieveFacesResponse
	51,  // 165: trpc.media.media.Media.RetrieveConsistentMedias:output_type -> trpc.media.media.RetrieveConsistentMediasResponse
	53,  // 166: trpc.media.media.Media.AssociateWords:output_type -> trpc.media.media.AssociateWordsResponse
	56,  // 167: trpc.media.media.Media.ExtractImages:output_type -> trpc.media.media.ExtractImagesResponse
	83,  // 168: trpc.media.media.Media.CreateResourcePackage:output_type -> trpc.media.media.CreateResourcePackageResponse
	86,  // 169: trpc.media.media.Media.DeleteResourcePackage:output_type -> trpc.media.media.ResourcePackageOperateResponse
	86,  // 170: trpc.media.media.Media.UpdateResourcePackage:output_type -> trpc.media.media.ResourcePackageOperateResponse
	89,  // 171: trpc.media.media.Media.DescribeResourcePackage:output_type -> trpc.media.media.DescribePackageResponse
	92,  // 172: trpc.media.media.Media.AddResourceToPackage:output_type -> trpc.media.media.AddResourceToPackageResponse
	86,  // 173: trpc.media.media.Media.DeleteResourceFromPackage:output_type -> trpc.media.media.ResourcePackageOperateResponse
	86,  // 174: trpc.media.media.Media.UndeleteResourceFromPackage:output_type -> trpc.media.media.ResourcePackageOperateResponse
	59,  // 175: trpc.media.media.Media.BindMedias:output_type -> trpc.media.media.BindMediasResponse
	61,  // 176: trpc.media.media.Media.DescribeMediaDetailsInner:output_type -> trpc.media.media.DescribeMediaDetailsInnerResponse
	148, // [148:177] is the sub-list for method output_type
	119, // [119:148] is the sub-list for method input_type
	119, // [119:119] is the sub-list for extension type_name
	119, // [119:119] is the sub-list for extension extendee
	0,   // [0:119] is the sub-list for field type_name
}

func init() { file_media_proto_init() }
func file_media_proto_init() {
	if File_media_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_media_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaWorkflowTemplateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaUnionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMediasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMediasOperateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMediasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaCommitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMediasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaOperateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitMediasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaStorageProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMediasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMediasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMediaDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMediaDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMediasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMediasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreDeletedMediasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreDeletedMediasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyTrashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyTrashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCategoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeCategoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyMediaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveHitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveHitMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveHitFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LexicalEntryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRelevantTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveTagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRelevantTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveLexicalEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveLexicalEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveMediasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveMediasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveFacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveConsistentMediasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveConsistentMediasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociateWordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociateWordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractImagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Binder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindMediasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindMediasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMediaDetailsInnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeMediaDetailsInnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCenterCreateDownloadURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCenterError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCenterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCenterCreateDownloadURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCenterCreateDeleteFileTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveTagItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LexicalEntryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrievalMediaTagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveEngineMediaSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveEngineRetrieveHitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveEngineRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveEngineRetrieveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveEngineAssociateWordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveEngineAssociateWordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractImageEngineExtractFramesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractImageEngineExtractFramesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourcePackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourcePackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageOperateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourcePackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePackageOperateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourcePackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeResourcePackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddResourceToPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddResourceToPackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourceFromPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndeleteResourceFromPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_media_proto_msgTypes[33].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_media_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   91,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_media_proto_goTypes,
		DependencyIndexes: file_media_proto_depIdxs,
		EnumInfos:         file_media_proto_enumTypes,
		MessageInfos:      file_media_proto_msgTypes,
	}.Build()
	File_media_proto = out.File
	file_media_proto_rawDesc = nil
	file_media_proto_goTypes = nil
	file_media_proto_depIdxs = nil
}
