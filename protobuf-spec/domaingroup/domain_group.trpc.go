// Code generated by trpc-go/trpc-go-cmdline v2.4.0. DO NOT EDIT.
// source: domain_group.proto

package domaingroup

import (
	"context"
	"errors"
	"fmt"

	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/client"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/codec"
	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/http"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/server"
)

// START ======================================= Server Service Definition ======================================= START

// DomainGroupService defines service.
type DomainGroupService interface {
	// CreateDomainGroup 群组管理
	CreateDomainGroup(ctx context.Context, req *CreateDomainGroupRequest, rsp *CreateDomainGroupResponse) (err error) // @alias=/CreateDomainGroup

	DescribeDomainGroups(ctx context.Context, req *DescribeDomainGroupsRequest, rsp *DescribeDomainGroupsResponse) (err error) // @alias=/DescribeDomainGroups

	DescribeDomainGroupDetails(ctx context.Context, req *DescribeDomainGroupDetailsRequest, rsp *DescribeDomainGroupDetailsResponse) (err error) // @alias=/DescribeDomainGroupDetails

	AddMediasToDomainGroups(ctx context.Context, req *AddMediasToDomainGroupsRequest, rsp *AddMediasToDomainGroupsResponse) (err error) // @alias=/AddMediasToDomainGroups

	RemoveMediasFromDomainGroups(ctx context.Context, req *RemoveMediasFromDomainGroupsRequest, rsp *RemoveMediasFromDomainGroupsResponse) (err error) // @alias=/RemoveMediasFromDomainGroups

	DeleteDomainGroups(ctx context.Context, req *DeleteDomainGroupsRequest, rsp *DeleteDomainGroupsResponse) (err error) // @alias=/DeleteDomainGroups

	ModifyDomainGroup(ctx context.Context, req *ModifyDomainGroupRequest, rsp *ModifyDomainGroupResponse) (err error) // @alias=/ModifyDomainGroup
}

func DomainGroupService_CreateDomainGroup_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateDomainGroupRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(DomainGroupService).CreateDomainGroup(ctx, reqbody.(*CreateDomainGroupRequest), rspbody.(*CreateDomainGroupResponse))
	}

	rsp := &CreateDomainGroupResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func DomainGroupService_DescribeDomainGroups_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeDomainGroupsRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(DomainGroupService).DescribeDomainGroups(ctx, reqbody.(*DescribeDomainGroupsRequest), rspbody.(*DescribeDomainGroupsResponse))
	}

	rsp := &DescribeDomainGroupsResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func DomainGroupService_DescribeDomainGroupDetails_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeDomainGroupDetailsRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(DomainGroupService).DescribeDomainGroupDetails(ctx, reqbody.(*DescribeDomainGroupDetailsRequest), rspbody.(*DescribeDomainGroupDetailsResponse))
	}

	rsp := &DescribeDomainGroupDetailsResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func DomainGroupService_AddMediasToDomainGroups_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &AddMediasToDomainGroupsRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(DomainGroupService).AddMediasToDomainGroups(ctx, reqbody.(*AddMediasToDomainGroupsRequest), rspbody.(*AddMediasToDomainGroupsResponse))
	}

	rsp := &AddMediasToDomainGroupsResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func DomainGroupService_RemoveMediasFromDomainGroups_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &RemoveMediasFromDomainGroupsRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(DomainGroupService).RemoveMediasFromDomainGroups(ctx, reqbody.(*RemoveMediasFromDomainGroupsRequest), rspbody.(*RemoveMediasFromDomainGroupsResponse))
	}

	rsp := &RemoveMediasFromDomainGroupsResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func DomainGroupService_DeleteDomainGroups_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DeleteDomainGroupsRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(DomainGroupService).DeleteDomainGroups(ctx, reqbody.(*DeleteDomainGroupsRequest), rspbody.(*DeleteDomainGroupsResponse))
	}

	rsp := &DeleteDomainGroupsResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func DomainGroupService_ModifyDomainGroup_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ModifyDomainGroupRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(DomainGroupService).ModifyDomainGroup(ctx, reqbody.(*ModifyDomainGroupRequest), rspbody.(*ModifyDomainGroupResponse))
	}

	rsp := &ModifyDomainGroupResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// DomainGroupServer_ServiceDesc descriptor for server.RegisterService.
var DomainGroupServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.domaingroup.DomainGroup",
	HandlerType: ((*DomainGroupService)(nil)),
	Methods: []server.Method{
		{
			Name: "/CreateDomainGroup",
			Func: DomainGroupService_CreateDomainGroup_Handler,
		},
		{
			Name: "/DescribeDomainGroups",
			Func: DomainGroupService_DescribeDomainGroups_Handler,
		},
		{
			Name: "/DescribeDomainGroupDetails",
			Func: DomainGroupService_DescribeDomainGroupDetails_Handler,
		},
		{
			Name: "/AddMediasToDomainGroups",
			Func: DomainGroupService_AddMediasToDomainGroups_Handler,
		},
		{
			Name: "/RemoveMediasFromDomainGroups",
			Func: DomainGroupService_RemoveMediasFromDomainGroups_Handler,
		},
		{
			Name: "/DeleteDomainGroups",
			Func: DomainGroupService_DeleteDomainGroups_Handler,
		},
		{
			Name: "/ModifyDomainGroup",
			Func: DomainGroupService_ModifyDomainGroup_Handler,
		},
		{
			Name: "/trpc.media.domaingroup.DomainGroup/CreateDomainGroup",
			Func: DomainGroupService_CreateDomainGroup_Handler,
		},
		{
			Name: "/trpc.media.domaingroup.DomainGroup/DescribeDomainGroups",
			Func: DomainGroupService_DescribeDomainGroups_Handler,
		},
		{
			Name: "/trpc.media.domaingroup.DomainGroup/DescribeDomainGroupDetails",
			Func: DomainGroupService_DescribeDomainGroupDetails_Handler,
		},
		{
			Name: "/trpc.media.domaingroup.DomainGroup/AddMediasToDomainGroups",
			Func: DomainGroupService_AddMediasToDomainGroups_Handler,
		},
		{
			Name: "/trpc.media.domaingroup.DomainGroup/RemoveMediasFromDomainGroups",
			Func: DomainGroupService_RemoveMediasFromDomainGroups_Handler,
		},
		{
			Name: "/trpc.media.domaingroup.DomainGroup/DeleteDomainGroups",
			Func: DomainGroupService_DeleteDomainGroups_Handler,
		},
		{
			Name: "/trpc.media.domaingroup.DomainGroup/ModifyDomainGroup",
			Func: DomainGroupService_ModifyDomainGroup_Handler,
		},
	},
}

// RegisterDomainGroupService registers service.
func RegisterDomainGroupService(s server.Service, svr DomainGroupService) {
	if err := s.Register(&DomainGroupServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("DomainGroup register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedDomainGroup struct{}

// CreateDomainGroup 群组管理
func (s *UnimplementedDomainGroup) CreateDomainGroup(ctx context.Context, req *CreateDomainGroupRequest, rsp *CreateDomainGroupResponse) error {
	return errors.New("rpc CreateDomainGroup of service DomainGroup is not implemented")
}
func (s *UnimplementedDomainGroup) DescribeDomainGroups(ctx context.Context, req *DescribeDomainGroupsRequest, rsp *DescribeDomainGroupsResponse) error {
	return errors.New("rpc DescribeDomainGroups of service DomainGroup is not implemented")
}
func (s *UnimplementedDomainGroup) DescribeDomainGroupDetails(ctx context.Context, req *DescribeDomainGroupDetailsRequest, rsp *DescribeDomainGroupDetailsResponse) error {
	return errors.New("rpc DescribeDomainGroupDetails of service DomainGroup is not implemented")
}
func (s *UnimplementedDomainGroup) AddMediasToDomainGroups(ctx context.Context, req *AddMediasToDomainGroupsRequest, rsp *AddMediasToDomainGroupsResponse) error {
	return errors.New("rpc AddMediasToDomainGroups of service DomainGroup is not implemented")
}
func (s *UnimplementedDomainGroup) RemoveMediasFromDomainGroups(ctx context.Context, req *RemoveMediasFromDomainGroupsRequest, rsp *RemoveMediasFromDomainGroupsResponse) error {
	return errors.New("rpc RemoveMediasFromDomainGroups of service DomainGroup is not implemented")
}
func (s *UnimplementedDomainGroup) DeleteDomainGroups(ctx context.Context, req *DeleteDomainGroupsRequest, rsp *DeleteDomainGroupsResponse) error {
	return errors.New("rpc DeleteDomainGroups of service DomainGroup is not implemented")
}
func (s *UnimplementedDomainGroup) ModifyDomainGroup(ctx context.Context, req *ModifyDomainGroupRequest, rsp *ModifyDomainGroupResponse) error {
	return errors.New("rpc ModifyDomainGroup of service DomainGroup is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// DomainGroupClientProxy defines service client proxy
type DomainGroupClientProxy interface {
	// CreateDomainGroup 群组管理
	CreateDomainGroup(ctx context.Context, req *CreateDomainGroupRequest, opts ...client.Option) (rsp *CreateDomainGroupResponse, err error) // @alias=/CreateDomainGroup

	DescribeDomainGroups(ctx context.Context, req *DescribeDomainGroupsRequest, opts ...client.Option) (rsp *DescribeDomainGroupsResponse, err error) // @alias=/DescribeDomainGroups

	DescribeDomainGroupDetails(ctx context.Context, req *DescribeDomainGroupDetailsRequest, opts ...client.Option) (rsp *DescribeDomainGroupDetailsResponse, err error) // @alias=/DescribeDomainGroupDetails

	AddMediasToDomainGroups(ctx context.Context, req *AddMediasToDomainGroupsRequest, opts ...client.Option) (rsp *AddMediasToDomainGroupsResponse, err error) // @alias=/AddMediasToDomainGroups

	RemoveMediasFromDomainGroups(ctx context.Context, req *RemoveMediasFromDomainGroupsRequest, opts ...client.Option) (rsp *RemoveMediasFromDomainGroupsResponse, err error) // @alias=/RemoveMediasFromDomainGroups

	DeleteDomainGroups(ctx context.Context, req *DeleteDomainGroupsRequest, opts ...client.Option) (rsp *DeleteDomainGroupsResponse, err error) // @alias=/DeleteDomainGroups

	ModifyDomainGroup(ctx context.Context, req *ModifyDomainGroupRequest, opts ...client.Option) (rsp *ModifyDomainGroupResponse, err error) // @alias=/ModifyDomainGroup
}

type DomainGroupClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewDomainGroupClientProxy = func(opts ...client.Option) DomainGroupClientProxy {
	return &DomainGroupClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *DomainGroupClientProxyImpl) CreateDomainGroup(ctx context.Context, req *CreateDomainGroupRequest, opts ...client.Option) (*CreateDomainGroupResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/CreateDomainGroup")
	msg.WithCalleeServiceName(DomainGroupServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("domaingroup")
	msg.WithCalleeService("DomainGroup")
	msg.WithCalleeMethod("CreateDomainGroup")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateDomainGroupResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *DomainGroupClientProxyImpl) DescribeDomainGroups(ctx context.Context, req *DescribeDomainGroupsRequest, opts ...client.Option) (*DescribeDomainGroupsResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeDomainGroups")
	msg.WithCalleeServiceName(DomainGroupServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("domaingroup")
	msg.WithCalleeService("DomainGroup")
	msg.WithCalleeMethod("DescribeDomainGroups")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeDomainGroupsResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *DomainGroupClientProxyImpl) DescribeDomainGroupDetails(ctx context.Context, req *DescribeDomainGroupDetailsRequest, opts ...client.Option) (*DescribeDomainGroupDetailsResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeDomainGroupDetails")
	msg.WithCalleeServiceName(DomainGroupServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("domaingroup")
	msg.WithCalleeService("DomainGroup")
	msg.WithCalleeMethod("DescribeDomainGroupDetails")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeDomainGroupDetailsResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *DomainGroupClientProxyImpl) AddMediasToDomainGroups(ctx context.Context, req *AddMediasToDomainGroupsRequest, opts ...client.Option) (*AddMediasToDomainGroupsResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/AddMediasToDomainGroups")
	msg.WithCalleeServiceName(DomainGroupServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("domaingroup")
	msg.WithCalleeService("DomainGroup")
	msg.WithCalleeMethod("AddMediasToDomainGroups")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &AddMediasToDomainGroupsResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *DomainGroupClientProxyImpl) RemoveMediasFromDomainGroups(ctx context.Context, req *RemoveMediasFromDomainGroupsRequest, opts ...client.Option) (*RemoveMediasFromDomainGroupsResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/RemoveMediasFromDomainGroups")
	msg.WithCalleeServiceName(DomainGroupServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("domaingroup")
	msg.WithCalleeService("DomainGroup")
	msg.WithCalleeMethod("RemoveMediasFromDomainGroups")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &RemoveMediasFromDomainGroupsResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *DomainGroupClientProxyImpl) DeleteDomainGroups(ctx context.Context, req *DeleteDomainGroupsRequest, opts ...client.Option) (*DeleteDomainGroupsResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DeleteDomainGroups")
	msg.WithCalleeServiceName(DomainGroupServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("domaingroup")
	msg.WithCalleeService("DomainGroup")
	msg.WithCalleeMethod("DeleteDomainGroups")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DeleteDomainGroupsResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *DomainGroupClientProxyImpl) ModifyDomainGroup(ctx context.Context, req *ModifyDomainGroupRequest, opts ...client.Option) (*ModifyDomainGroupResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/ModifyDomainGroup")
	msg.WithCalleeServiceName(DomainGroupServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("domaingroup")
	msg.WithCalleeService("DomainGroup")
	msg.WithCalleeMethod("ModifyDomainGroup")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ModifyDomainGroupResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
