// Code generated by trpc-go/trpc-go-cmdline v2.2.18. DO NOT EDIT.
// source: yt_video_process.proto

package ytvideoprocess

import (
	"context"
	"errors"
	"fmt"

	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/client"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/codec"
	_ "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/http"
	"github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/trpc_mock/server"
)

// START ======================================= Server Service Definition ======================================= START

// YTVideoProcessService defines service.
type YTVideoProcessService interface {
	// CreateVideoProcessTask 创建视频处理任务
	CreateVideoProcessTask(ctx context.Context, req *CreateVideoProcessTaskRequest, rsp *CreateVideoProcessResponse) (err error) // @alias=/CreateVideoProcessTask
	// DescribeVideoProcessDetail 获取视频处理详情
	DescribeVideoProcessDetail(ctx context.Context, req *DescribeVideoProcessDetailRequest, rsp *DescribeVideoProcessDetailResponse) (err error) // @alias=/DescribeVideoProcessDetail
	// UpdateVideoProcessTask 更新视频处理任务
	UpdateVideoProcessTask(ctx context.Context, req *UpdateVideoProcessTaskRequest, rsp *UpdateVideoProcessResponse) (err error) // @alias=/UpdateVideoProcessTask
	// StopVideoProcessTask 停止任务，内部使用对外不暴露
	StopVideoProcessTask(ctx context.Context, req *StopVideoProcessTaskRequest, rsp *StopVideoProcessTaskResponse) (err error) // @alias=/StopVideoProcessTask
}

func YTVideoProcessService_CreateVideoProcessTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateVideoProcessTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(YTVideoProcessService).CreateVideoProcessTask(ctx, reqbody.(*CreateVideoProcessTaskRequest), rspbody.(*CreateVideoProcessResponse))
	}

	rsp := &CreateVideoProcessResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func YTVideoProcessService_DescribeVideoProcessDetail_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeVideoProcessDetailRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(YTVideoProcessService).DescribeVideoProcessDetail(ctx, reqbody.(*DescribeVideoProcessDetailRequest), rspbody.(*DescribeVideoProcessDetailResponse))
	}

	rsp := &DescribeVideoProcessDetailResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func YTVideoProcessService_UpdateVideoProcessTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateVideoProcessTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(YTVideoProcessService).UpdateVideoProcessTask(ctx, reqbody.(*UpdateVideoProcessTaskRequest), rspbody.(*UpdateVideoProcessResponse))
	}

	rsp := &UpdateVideoProcessResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func YTVideoProcessService_StopVideoProcessTask_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &StopVideoProcessTaskRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
		return svr.(YTVideoProcessService).StopVideoProcessTask(ctx, reqbody.(*StopVideoProcessTaskRequest), rspbody.(*StopVideoProcessTaskResponse))
	}

	rsp := &StopVideoProcessTaskResponse{}
	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// YTVideoProcessServer_ServiceDesc descriptor for server.RegisterService.
var YTVideoProcessServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.media.ytvideoprocess.YTVideoProcess",
	HandlerType: ((*YTVideoProcessService)(nil)),
	Methods: []server.Method{
		{
			Name: "/CreateVideoProcessTask",
			Func: YTVideoProcessService_CreateVideoProcessTask_Handler,
		},
		{
			Name: "/DescribeVideoProcessDetail",
			Func: YTVideoProcessService_DescribeVideoProcessDetail_Handler,
		},
		{
			Name: "/UpdateVideoProcessTask",
			Func: YTVideoProcessService_UpdateVideoProcessTask_Handler,
		},
		{
			Name: "/StopVideoProcessTask",
			Func: YTVideoProcessService_StopVideoProcessTask_Handler,
		},
		{
			Name: "/trpc.media.ytvideoprocess.YTVideoProcess/CreateVideoProcessTask",
			Func: YTVideoProcessService_CreateVideoProcessTask_Handler,
		},
		{
			Name: "/trpc.media.ytvideoprocess.YTVideoProcess/DescribeVideoProcessDetail",
			Func: YTVideoProcessService_DescribeVideoProcessDetail_Handler,
		},
		{
			Name: "/trpc.media.ytvideoprocess.YTVideoProcess/UpdateVideoProcessTask",
			Func: YTVideoProcessService_UpdateVideoProcessTask_Handler,
		},
		{
			Name: "/trpc.media.ytvideoprocess.YTVideoProcess/StopVideoProcessTask",
			Func: YTVideoProcessService_StopVideoProcessTask_Handler,
		},
	},
}

// RegisterYTVideoProcessService registers service.
func RegisterYTVideoProcessService(s server.Service, svr YTVideoProcessService) {
	if err := s.Register(&YTVideoProcessServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("YTVideoProcess register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedYTVideoProcess struct{}

// CreateVideoProcessTask 创建视频处理任务
func (s *UnimplementedYTVideoProcess) CreateVideoProcessTask(ctx context.Context, req *CreateVideoProcessTaskRequest, rsp *CreateVideoProcessResponse) error {
	return errors.New("rpc CreateVideoProcessTask of service YTVideoProcess is not implemented")
}

// DescribeVideoProcessDetail 获取视频处理详情
func (s *UnimplementedYTVideoProcess) DescribeVideoProcessDetail(ctx context.Context, req *DescribeVideoProcessDetailRequest, rsp *DescribeVideoProcessDetailResponse) error {
	return errors.New("rpc DescribeVideoProcessDetail of service YTVideoProcess is not implemented")
}

// UpdateVideoProcessTask 更新视频处理任务
func (s *UnimplementedYTVideoProcess) UpdateVideoProcessTask(ctx context.Context, req *UpdateVideoProcessTaskRequest, rsp *UpdateVideoProcessResponse) error {
	return errors.New("rpc UpdateVideoProcessTask of service YTVideoProcess is not implemented")
}

// StopVideoProcessTask 停止任务，内部使用对外不暴露
func (s *UnimplementedYTVideoProcess) StopVideoProcessTask(ctx context.Context, req *StopVideoProcessTaskRequest, rsp *StopVideoProcessTaskResponse) error {
	return errors.New("rpc StopVideoProcessTask of service YTVideoProcess is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// YTVideoProcessClientProxy defines service client proxy
type YTVideoProcessClientProxy interface {
	// CreateVideoProcessTask 创建视频处理任务
	CreateVideoProcessTask(ctx context.Context, req *CreateVideoProcessTaskRequest, opts ...client.Option) (rsp *CreateVideoProcessResponse, err error) // @alias=/CreateVideoProcessTask
	// DescribeVideoProcessDetail 获取视频处理详情
	DescribeVideoProcessDetail(ctx context.Context, req *DescribeVideoProcessDetailRequest, opts ...client.Option) (rsp *DescribeVideoProcessDetailResponse, err error) // @alias=/DescribeVideoProcessDetail
	// UpdateVideoProcessTask 更新视频处理任务
	UpdateVideoProcessTask(ctx context.Context, req *UpdateVideoProcessTaskRequest, opts ...client.Option) (rsp *UpdateVideoProcessResponse, err error) // @alias=/UpdateVideoProcessTask
	// StopVideoProcessTask 停止任务，内部使用对外不暴露
	StopVideoProcessTask(ctx context.Context, req *StopVideoProcessTaskRequest, opts ...client.Option) (rsp *StopVideoProcessTaskResponse, err error) // @alias=/StopVideoProcessTask
}

type YTVideoProcessClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewYTVideoProcessClientProxy = func(opts ...client.Option) YTVideoProcessClientProxy {
	return &YTVideoProcessClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *YTVideoProcessClientProxyImpl) CreateVideoProcessTask(ctx context.Context, req *CreateVideoProcessTaskRequest, opts ...client.Option) (*CreateVideoProcessResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/CreateVideoProcessTask")
	msg.WithCalleeServiceName(YTVideoProcessServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("ytvideoprocess")
	msg.WithCalleeService("YTVideoProcess")
	msg.WithCalleeMethod("CreateVideoProcessTask")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateVideoProcessResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *YTVideoProcessClientProxyImpl) DescribeVideoProcessDetail(ctx context.Context, req *DescribeVideoProcessDetailRequest, opts ...client.Option) (*DescribeVideoProcessDetailResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/DescribeVideoProcessDetail")
	msg.WithCalleeServiceName(YTVideoProcessServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("ytvideoprocess")
	msg.WithCalleeService("YTVideoProcess")
	msg.WithCalleeMethod("DescribeVideoProcessDetail")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeVideoProcessDetailResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *YTVideoProcessClientProxyImpl) UpdateVideoProcessTask(ctx context.Context, req *UpdateVideoProcessTaskRequest, opts ...client.Option) (*UpdateVideoProcessResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/UpdateVideoProcessTask")
	msg.WithCalleeServiceName(YTVideoProcessServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("ytvideoprocess")
	msg.WithCalleeService("YTVideoProcess")
	msg.WithCalleeMethod("UpdateVideoProcessTask")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &UpdateVideoProcessResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *YTVideoProcessClientProxyImpl) StopVideoProcessTask(ctx context.Context, req *StopVideoProcessTaskRequest, opts ...client.Option) (*StopVideoProcessTaskResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/StopVideoProcessTask")
	msg.WithCalleeServiceName(YTVideoProcessServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("media")
	msg.WithCalleeServer("ytvideoprocess")
	msg.WithCalleeService("YTVideoProcess")
	msg.WithCalleeMethod("StopVideoProcessTask")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &StopVideoProcessTaskResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
