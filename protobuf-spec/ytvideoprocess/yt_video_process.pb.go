// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: yt_video_process.proto

package ytvideoprocess

import (
	reflect "reflect"
	sync "sync"

	apicommon "github.com/Tencent-media-asset-system-sdk/media-platform-sdk-go/protobuf-spec/apicommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreateVideoProcessTask defines
type VideoProcessType int32

const (
	VideoProcessType_YTProcessUnknown  VideoProcessType = 0
	VideoProcessType_YTSuperResolution VideoProcessType = 2001 // 视频超分
	VideoProcessType_YTVideoRepair     VideoProcessType = 2002 // 老片修复
	VideoProcessType_YTVideoTranscode  VideoProcessType = 2003 // 暂未支持
	VideoProcessType_YTVideoCrop       VideoProcessType = 2004 // 暂未支持
)

// Enum value maps for VideoProcessType.
var (
	VideoProcessType_name = map[int32]string{
		0:    "YTProcessUnknown",
		2001: "YTSuperResolution",
		2002: "YTVideoRepair",
		2003: "YTVideoTranscode",
		2004: "YTVideoCrop",
	}
	VideoProcessType_value = map[string]int32{
		"YTProcessUnknown":  0,
		"YTSuperResolution": 2001,
		"YTVideoRepair":     2002,
		"YTVideoTranscode":  2003,
		"YTVideoCrop":       2004,
	}
)

func (x VideoProcessType) Enum() *VideoProcessType {
	p := new(VideoProcessType)
	*p = x
	return p
}

func (x VideoProcessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoProcessType) Descriptor() protoreflect.EnumDescriptor {
	return file_yt_video_process_proto_enumTypes[0].Descriptor()
}

func (VideoProcessType) Type() protoreflect.EnumType {
	return &file_yt_video_process_proto_enumTypes[0]
}

func (x VideoProcessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoProcessType.Descriptor instead.
func (VideoProcessType) EnumDescriptor() ([]byte, []int) {
	return file_yt_video_process_proto_rawDescGZIP(), []int{0}
}

type VideoProcessOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputVideoCodec       string `protobuf:"bytes,1,opt,name=OutputVideoCodec,proto3" json:"OutputVideoCodec,omitempty"`              // 输出视频的格式，可选项{h264,h265,vp9,prores}，默认值为h264
	OutputVideoPeakBitrate int32  `protobuf:"varint,2,opt,name=OutputVideoPeakBitrate,proto3" json:"OutputVideoPeakBitrate,omitempty"` // 峰值码率设置，单位Kbps，默认值为0，表示不开启该设置
	OutputWidth            int32  `protobuf:"varint,3,opt,name=OutputWidth,proto3" json:"OutputWidth,omitempty"`                       // 输出视频的高度值，默认值为0，表示不指定输出高度值，需同时指定output_height与output_width才能开启该功能
	OutputHeight           int32  `protobuf:"varint,4,opt,name=OutputHeight,proto3" json:"OutputHeight,omitempty"`                     // 输出视频的宽度值，默认值为0，表示不指定输出宽度值
	SR                     int32  `protobuf:"varint,5,opt,name=SR,proto3" json:"SR,omitempty"`                                         // 是否开启超分辨率功能，0表示关闭，1表示开启性能模式，2表示开启超分效果模式，3表示开启老片修复效果模式，默认值为0
	Interp                 int32  `protobuf:"varint,6,opt,name=Interp,proto3" json:"Interp,omitempty"`                                 // 倍帧帧率（整数），0或1表示维持原始视频帧率
	OutputFps              int32  `protobuf:"varint,7,opt,name=OutputFps,proto3" json:"OutputFps,omitempty"`                           // 指定输出的帧率（整数或者浮点数），0表示使用原视频帧率，output_fps与interp同时开启时，output_fps值无效
	ColorEnhanceLevel      int32  `protobuf:"varint,8,opt,name=ColorEnhanceLevel,proto3" json:"ColorEnhanceLevel,omitempty"`           // 是否开启色彩增强功能，0表示关闭，增强等级可选值（整数）[1-10]
	//int32 Descratch = 21; // [deprecated] 是否开启去划痕功能，0表示关闭，1表示开启，默认值为0
	DescratchGray  int32   `protobuf:"varint,22,opt,name=DescratchGray,proto3" json:"DescratchGray,omitempty"`   // 是否开启亮度去划痕功能，0表示关闭，1表示开启，默认值为0
	DescratchColor int32   `protobuf:"varint,23,opt,name=DescratchColor,proto3" json:"DescratchColor,omitempty"` // 是否开启色度去划痕功能，0表示关闭，1表示开启，默认值为0
	FaceEnhance    int32   `protobuf:"varint,24,opt,name=FaceEnhance,proto3" json:"FaceEnhance,omitempty"`       // 是否开启人像增强功能，0表示关闭，1表示开启，默认值为0
	LargeFaceMode  int32   `protobuf:"varint,25,opt,name=LargeFaceMode,proto3" json:"LargeFaceMode,omitempty"`   // 是否对大人脸做增强，0表示关闭，1表示开启，默认值为0
	SmallFaceMode  int32   `protobuf:"varint,26,opt,name=SmallFaceMode,proto3" json:"SmallFaceMode,omitempty"`   // 是否对小人脸做增强，0表示关闭，1表示开启，默认值为0
	RefColorize    int32   `protobuf:"varint,27,opt,name=RefColorize,proto3" json:"RefColorize,omitempty"`       // 是否开启视频参考帧上色功能，0表示关闭，1表示开启，默认值为0
	RefColorizeImg string  `protobuf:"bytes,28,opt,name=RefColorizeImg,proto3" json:"RefColorizeImg,omitempty"`  // [reserved] 开启视频上色时，参考帧的文件位置，需指定文件位置才能开启上色功能
	DehazeLevel    float32 `protobuf:"fixed32,29,opt,name=DehazeLevel,proto3" json:"DehazeLevel,omitempty"`      // 视频去雾强度，取值为0-1之间的浮点数，0为关闭视频去雾功能
	SDR2HDR        int32   `protobuf:"varint,41,opt,name=SDR2HDR,proto3" json:"SDR2HDR,omitempty"`               // 是否开启SDR2HDR功能，0表示关闭，1表示开启，默认值为0
	HDRType        string  `protobuf:"bytes,42,opt,name=HDRType,proto3" json:"HDRType,omitempty"`                // SDR2HDR功能开启时，选择的HDR类型，可选项{pq,hlg}，默认值为pq
}

func (x *VideoProcessOption) Reset() {
	*x = VideoProcessOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_video_process_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoProcessOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoProcessOption) ProtoMessage() {}

func (x *VideoProcessOption) ProtoReflect() protoreflect.Message {
	mi := &file_yt_video_process_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoProcessOption.ProtoReflect.Descriptor instead.
func (*VideoProcessOption) Descriptor() ([]byte, []int) {
	return file_yt_video_process_proto_rawDescGZIP(), []int{0}
}

func (x *VideoProcessOption) GetOutputVideoCodec() string {
	if x != nil {
		return x.OutputVideoCodec
	}
	return ""
}

func (x *VideoProcessOption) GetOutputVideoPeakBitrate() int32 {
	if x != nil {
		return x.OutputVideoPeakBitrate
	}
	return 0
}

func (x *VideoProcessOption) GetOutputWidth() int32 {
	if x != nil {
		return x.OutputWidth
	}
	return 0
}

func (x *VideoProcessOption) GetOutputHeight() int32 {
	if x != nil {
		return x.OutputHeight
	}
	return 0
}

func (x *VideoProcessOption) GetSR() int32 {
	if x != nil {
		return x.SR
	}
	return 0
}

func (x *VideoProcessOption) GetInterp() int32 {
	if x != nil {
		return x.Interp
	}
	return 0
}

func (x *VideoProcessOption) GetOutputFps() int32 {
	if x != nil {
		return x.OutputFps
	}
	return 0
}

func (x *VideoProcessOption) GetColorEnhanceLevel() int32 {
	if x != nil {
		return x.ColorEnhanceLevel
	}
	return 0
}

func (x *VideoProcessOption) GetDescratchGray() int32 {
	if x != nil {
		return x.DescratchGray
	}
	return 0
}

func (x *VideoProcessOption) GetDescratchColor() int32 {
	if x != nil {
		return x.DescratchColor
	}
	return 0
}

func (x *VideoProcessOption) GetFaceEnhance() int32 {
	if x != nil {
		return x.FaceEnhance
	}
	return 0
}

func (x *VideoProcessOption) GetLargeFaceMode() int32 {
	if x != nil {
		return x.LargeFaceMode
	}
	return 0
}

func (x *VideoProcessOption) GetSmallFaceMode() int32 {
	if x != nil {
		return x.SmallFaceMode
	}
	return 0
}

func (x *VideoProcessOption) GetRefColorize() int32 {
	if x != nil {
		return x.RefColorize
	}
	return 0
}

func (x *VideoProcessOption) GetRefColorizeImg() string {
	if x != nil {
		return x.RefColorizeImg
	}
	return ""
}

func (x *VideoProcessOption) GetDehazeLevel() float32 {
	if x != nil {
		return x.DehazeLevel
	}
	return 0
}

func (x *VideoProcessOption) GetSDR2HDR() int32 {
	if x != nil {
		return x.SDR2HDR
	}
	return 0
}

func (x *VideoProcessOption) GetHDRType() string {
	if x != nil {
		return x.HDRType
	}
	return ""
}

type CreateVideoProcessTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId       string              `protobuf:"bytes,2,opt,name=MediaId,proto3" json:"MediaId,omitempty"` // POC环境仅使用MediaId, MediaURL/LocalMediaPath未使用
	TaskName      string              `protobuf:"bytes,5,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	CallbackURL   string              `protobuf:"bytes,6,opt,name=CallbackURL,proto3" json:"CallbackURL,omitempty"`
	ProcessType   VideoProcessType    `protobuf:"varint,11,opt,name=ProcessType,proto3,enum=trpc.media.ytvideoprocess.VideoProcessType" json:"ProcessType,omitempty"`
	ProcessOption *VideoProcessOption `protobuf:"bytes,12,opt,name=ProcessOption,proto3" json:"ProcessOption,omitempty"` // 视频处理选项
}

func (x *CreateVideoProcessTaskRequest) Reset() {
	*x = CreateVideoProcessTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_video_process_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVideoProcessTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoProcessTaskRequest) ProtoMessage() {}

func (x *CreateVideoProcessTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yt_video_process_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoProcessTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateVideoProcessTaskRequest) Descriptor() ([]byte, []int) {
	return file_yt_video_process_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVideoProcessTaskRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *CreateVideoProcessTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *CreateVideoProcessTaskRequest) GetCallbackURL() string {
	if x != nil {
		return x.CallbackURL
	}
	return ""
}

func (x *CreateVideoProcessTaskRequest) GetProcessType() VideoProcessType {
	if x != nil {
		return x.ProcessType
	}
	return VideoProcessType_YTProcessUnknown
}

func (x *CreateVideoProcessTaskRequest) GetProcessOption() *VideoProcessOption {
	if x != nil {
		return x.ProcessOption
	}
	return nil
}

type CreateVideoProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *CreateVideoProcessResponse) Reset() {
	*x = CreateVideoProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_video_process_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVideoProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoProcessResponse) ProtoMessage() {}

func (x *CreateVideoProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yt_video_process_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoProcessResponse.ProtoReflect.Descriptor instead.
func (*CreateVideoProcessResponse) Descriptor() ([]byte, []int) {
	return file_yt_video_process_proto_rawDescGZIP(), []int{2}
}

func (x *CreateVideoProcessResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// DescribeVideoProcessDetail defines
type VideoDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoID     int32   `protobuf:"varint,1,opt,name=VideoID,proto3" json:"VideoID,omitempty"`        // 原视频ID
	VideoURL    string  `protobuf:"bytes,2,opt,name=VideoURL,proto3" json:"VideoURL,omitempty"`       // 原视频URL地址
	VideoWebURL string  `protobuf:"bytes,3,opt,name=VideoWebURL,proto3" json:"VideoWebURL,omitempty"` // 原视频Web预览地址
	Height      int32   `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`          // 纵向分辨率
	Width       int32   `protobuf:"varint,5,opt,name=Width,proto3" json:"Width,omitempty"`            // 横向分辨率
	FPS         float32 `protobuf:"fixed32,6,opt,name=FPS,proto3" json:"FPS,omitempty"`               // fps
	BitRate     float32 `protobuf:"fixed32,7,opt,name=BitRate,proto3" json:"BitRate,omitempty"`       // 码率bps, bit per second
	Size        float32 `protobuf:"fixed32,8,opt,name=Size,proto3" json:"Size,omitempty"`             // 大小，单位MB
	VMAF        float32 `protobuf:"fixed32,9,opt,name=VMAF,proto3" json:"VMAF,omitempty"`             // VMAF
	PSNR        float32 `protobuf:"fixed32,10,opt,name=PSNR,proto3" json:"PSNR,omitempty"`            // PSNR
	SSIM        float32 `protobuf:"fixed32,11,opt,name=SSIM,proto3" json:"SSIM,omitempty"`            // SSIM
	LPIPS       float32 `protobuf:"fixed32,12,opt,name=LPIPS,proto3" json:"LPIPS,omitempty"`          // LPIPS
	ImageUrl    string  `protobuf:"bytes,13,opt,name=ImageUrl,proto3" json:"ImageUrl,omitempty"`      // 视频封面图片地址
	BandWidth   int32   `protobuf:"varint,15,opt,name=BandWidth,proto3" json:"BandWidth,omitempty"`
	VideoCodec  string  `protobuf:"bytes,16,opt,name=VideoCodec,proto3" json:"VideoCodec,omitempty"`
}

func (x *VideoDetail) Reset() {
	*x = VideoDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_video_process_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoDetail) ProtoMessage() {}

func (x *VideoDetail) ProtoReflect() protoreflect.Message {
	mi := &file_yt_video_process_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoDetail.ProtoReflect.Descriptor instead.
func (*VideoDetail) Descriptor() ([]byte, []int) {
	return file_yt_video_process_proto_rawDescGZIP(), []int{3}
}

func (x *VideoDetail) GetVideoID() int32 {
	if x != nil {
		return x.VideoID
	}
	return 0
}

func (x *VideoDetail) GetVideoURL() string {
	if x != nil {
		return x.VideoURL
	}
	return ""
}

func (x *VideoDetail) GetVideoWebURL() string {
	if x != nil {
		return x.VideoWebURL
	}
	return ""
}

func (x *VideoDetail) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VideoDetail) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoDetail) GetFPS() float32 {
	if x != nil {
		return x.FPS
	}
	return 0
}

func (x *VideoDetail) GetBitRate() float32 {
	if x != nil {
		return x.BitRate
	}
	return 0
}

func (x *VideoDetail) GetSize() float32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VideoDetail) GetVMAF() float32 {
	if x != nil {
		return x.VMAF
	}
	return 0
}

func (x *VideoDetail) GetPSNR() float32 {
	if x != nil {
		return x.PSNR
	}
	return 0
}

func (x *VideoDetail) GetSSIM() float32 {
	if x != nil {
		return x.SSIM
	}
	return 0
}

func (x *VideoDetail) GetLPIPS() float32 {
	if x != nil {
		return x.LPIPS
	}
	return 0
}

func (x *VideoDetail) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *VideoDetail) GetBandWidth() int32 {
	if x != nil {
		return x.BandWidth
	}
	return 0
}

func (x *VideoDetail) GetVideoCodec() string {
	if x != nil {
		return x.VideoCodec
	}
	return ""
}

type VideoProcessTaskDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//VideoDetail SourceVideoDetail = 1; // [deprecated] 原视频详细结果
	//VideoDetail TargetVideoDetail = 2; // [deprecated] 结果视频详细结果
	SourceMediaId string `protobuf:"bytes,3,opt,name=SourceMediaId,proto3" json:"SourceMediaId,omitempty"` // 原视频媒体ID
	TargetMediaId string `protobuf:"bytes,4,opt,name=TargetMediaId,proto3" json:"TargetMediaId,omitempty"` // 结果视频媒体ID
}

func (x *VideoProcessTaskDetail) Reset() {
	*x = VideoProcessTaskDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_video_process_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoProcessTaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoProcessTaskDetail) ProtoMessage() {}

func (x *VideoProcessTaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_yt_video_process_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoProcessTaskDetail.ProtoReflect.Descriptor instead.
func (*VideoProcessTaskDetail) Descriptor() ([]byte, []int) {
	return file_yt_video_process_proto_rawDescGZIP(), []int{4}
}

func (x *VideoProcessTaskDetail) GetSourceMediaId() string {
	if x != nil {
		return x.SourceMediaId
	}
	return ""
}

func (x *VideoProcessTaskDetail) GetTargetMediaId() string {
	if x != nil {
		return x.TargetMediaId
	}
	return ""
}

type DescribeVideoProcessDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,2,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *DescribeVideoProcessDetailRequest) Reset() {
	*x = DescribeVideoProcessDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_video_process_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVideoProcessDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVideoProcessDetailRequest) ProtoMessage() {}

func (x *DescribeVideoProcessDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yt_video_process_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVideoProcessDetailRequest.ProtoReflect.Descriptor instead.
func (*DescribeVideoProcessDetailRequest) Descriptor() ([]byte, []int) {
	return file_yt_video_process_proto_rawDescGZIP(), []int{5}
}

func (x *DescribeVideoProcessDetailRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type DescribeVideoProcessDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskInfo      *apicommon.TaskInfo     `protobuf:"bytes,3,opt,name=TaskInfo,proto3" json:"TaskInfo,omitempty"`
	TaskDetail    *VideoProcessTaskDetail `protobuf:"bytes,4,opt,name=TaskDetail,proto3" json:"TaskDetail,omitempty"`
	ProcessOption *VideoProcessOption     `protobuf:"bytes,5,opt,name=ProcessOption,proto3" json:"ProcessOption,omitempty"`
}

func (x *DescribeVideoProcessDetailResponse) Reset() {
	*x = DescribeVideoProcessDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_video_process_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeVideoProcessDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeVideoProcessDetailResponse) ProtoMessage() {}

func (x *DescribeVideoProcessDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yt_video_process_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeVideoProcessDetailResponse.ProtoReflect.Descriptor instead.
func (*DescribeVideoProcessDetailResponse) Descriptor() ([]byte, []int) {
	return file_yt_video_process_proto_rawDescGZIP(), []int{6}
}

func (x *DescribeVideoProcessDetailResponse) GetTaskInfo() *apicommon.TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

func (x *DescribeVideoProcessDetailResponse) GetTaskDetail() *VideoProcessTaskDetail {
	if x != nil {
		return x.TaskDetail
	}
	return nil
}

func (x *DescribeVideoProcessDetailResponse) GetProcessOption() *VideoProcessOption {
	if x != nil {
		return x.ProcessOption
	}
	return nil
}

// StopVideoProcessTask defines
type StopVideoProcessTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,2,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *StopVideoProcessTaskRequest) Reset() {
	*x = StopVideoProcessTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_video_process_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopVideoProcessTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVideoProcessTaskRequest) ProtoMessage() {}

func (x *StopVideoProcessTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yt_video_process_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVideoProcessTaskRequest.ProtoReflect.Descriptor instead.
func (*StopVideoProcessTaskRequest) Descriptor() ([]byte, []int) {
	return file_yt_video_process_proto_rawDescGZIP(), []int{7}
}

func (x *StopVideoProcessTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type StopVideoProcessTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *StopVideoProcessTaskResponse) Reset() {
	*x = StopVideoProcessTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_video_process_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopVideoProcessTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVideoProcessTaskResponse) ProtoMessage() {}

func (x *StopVideoProcessTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yt_video_process_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVideoProcessTaskResponse.ProtoReflect.Descriptor instead.
func (*StopVideoProcessTaskResponse) Descriptor() ([]byte, []int) {
	return file_yt_video_process_proto_rawDescGZIP(), []int{8}
}

func (x *StopVideoProcessTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// UpdateVideoProcessTask defines
type UpdateVideoProcessTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId       string              `protobuf:"bytes,2,opt,name=MediaId,proto3" json:"MediaId,omitempty"`
	TaskId        string              `protobuf:"bytes,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	ProcessOption *VideoProcessOption `protobuf:"bytes,11,opt,name=ProcessOption,proto3" json:"ProcessOption,omitempty"` // 视频处理选项
	AutoStart     bool                `protobuf:"varint,12,opt,name=AutoStart,proto3" json:"AutoStart,omitempty"`
	ImageId       string              `protobuf:"bytes,13,opt,name=ImageId,proto3" json:"ImageId,omitempty"` // 图片ID
}

func (x *UpdateVideoProcessTaskRequest) Reset() {
	*x = UpdateVideoProcessTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_video_process_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVideoProcessTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVideoProcessTaskRequest) ProtoMessage() {}

func (x *UpdateVideoProcessTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yt_video_process_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVideoProcessTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateVideoProcessTaskRequest) Descriptor() ([]byte, []int) {
	return file_yt_video_process_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateVideoProcessTaskRequest) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *UpdateVideoProcessTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *UpdateVideoProcessTaskRequest) GetProcessOption() *VideoProcessOption {
	if x != nil {
		return x.ProcessOption
	}
	return nil
}

func (x *UpdateVideoProcessTaskRequest) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

func (x *UpdateVideoProcessTaskRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type UpdateVideoProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *UpdateVideoProcessResponse) Reset() {
	*x = UpdateVideoProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_video_process_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVideoProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVideoProcessResponse) ProtoMessage() {}

func (x *UpdateVideoProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yt_video_process_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVideoProcessResponse.ProtoReflect.Descriptor instead.
func (*UpdateVideoProcessResponse) Descriptor() ([]byte, []int) {
	return file_yt_video_process_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateVideoProcessResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

var File_yt_video_process_proto protoreflect.FileDescriptor

var file_yt_video_process_proto_rawDesc = []byte{
	0x0a, 0x16, 0x79, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x79, 0x74, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x8e, 0x05, 0x0a, 0x12, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x12, 0x36, 0x0a, 0x16, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x65, 0x61, 0x6b, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50,
	0x65, 0x61, 0x6b, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x53, 0x52, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x53, 0x52,
	0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x46, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x46, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x45,
	0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x72, 0x61, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x46, 0x61, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4c, 0x61, 0x72,
	0x67, 0x65, 0x46, 0x61, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x6d,
	0x61, 0x6c, 0x6c, 0x46, 0x61, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x46, 0x61, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x49, 0x6d, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x66, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x68, 0x61, 0x7a, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x44, 0x65, 0x68, 0x61, 0x7a, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x44, 0x52, 0x32, 0x48, 0x44, 0x52, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53,
	0x44, 0x52, 0x32, 0x48, 0x44, 0x52, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x44, 0x52, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x44, 0x52, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x9b, 0x02, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c, 0x12, 0x4d, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x79, 0x74, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x79, 0x74,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x34,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x22, 0xff, 0x02, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x57, 0x65, 0x62, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x57, 0x65, 0x62, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x50,
	0x53, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x46, 0x50, 0x53, 0x12, 0x18, 0x0a, 0x07,
	0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x42,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x4d,
	0x41, 0x46, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x56, 0x4d, 0x41, 0x46, 0x12, 0x12,
	0x0a, 0x04, 0x50, 0x53, 0x4e, 0x52, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x50, 0x53,
	0x4e, 0x52, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x53, 0x49, 0x4d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x53, 0x53, 0x49, 0x4d, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x50, 0x49, 0x50, 0x53, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x4c, 0x50, 0x49, 0x50, 0x53, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x64,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x61, 0x6e,
	0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x22, 0x64, 0x0a, 0x16, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x21,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x85, 0x02, 0x0a, 0x22, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0a, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x79, 0x74, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x53, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x79, 0x74, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x35, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x1c, 0x53, 0x74, 0x6f, 0x70,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0xde, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x79, 0x74, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x22, 0x34, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x2a, 0x7d, 0x0a, 0x10, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x59,
	0x54, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x11, 0x59, 0x54, 0x53, 0x75, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xd1, 0x0f, 0x12, 0x12, 0x0a, 0x0d, 0x59, 0x54, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x10, 0xd2, 0x0f, 0x12, 0x15, 0x0a,
	0x10, 0x59, 0x54, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x10, 0xd3, 0x0f, 0x12, 0x10, 0x0a, 0x0b, 0x59, 0x54, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x72, 0x6f, 0x70, 0x10, 0xd4, 0x0f, 0x32, 0xce, 0x04, 0x0a, 0x0e, 0x59, 0x54, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x79, 0x74, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x79, 0x74, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x3c, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x79, 0x74, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x79, 0x74, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x2e, 0x74,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x79, 0x74, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x79, 0x74, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01,
	0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x36, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x79, 0x74, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x79, 0x74, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x5e, 0x5a, 0x5c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x79, 0x74, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yt_video_process_proto_rawDescOnce sync.Once
	file_yt_video_process_proto_rawDescData = file_yt_video_process_proto_rawDesc
)

func file_yt_video_process_proto_rawDescGZIP() []byte {
	file_yt_video_process_proto_rawDescOnce.Do(func() {
		file_yt_video_process_proto_rawDescData = protoimpl.X.CompressGZIP(file_yt_video_process_proto_rawDescData)
	})
	return file_yt_video_process_proto_rawDescData
}

var file_yt_video_process_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yt_video_process_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_yt_video_process_proto_goTypes = []interface{}{
	(VideoProcessType)(0),                      // 0: trpc.media.ytvideoprocess.VideoProcessType
	(*VideoProcessOption)(nil),                 // 1: trpc.media.ytvideoprocess.VideoProcessOption
	(*CreateVideoProcessTaskRequest)(nil),      // 2: trpc.media.ytvideoprocess.CreateVideoProcessTaskRequest
	(*CreateVideoProcessResponse)(nil),         // 3: trpc.media.ytvideoprocess.CreateVideoProcessResponse
	(*VideoDetail)(nil),                        // 4: trpc.media.ytvideoprocess.VideoDetail
	(*VideoProcessTaskDetail)(nil),             // 5: trpc.media.ytvideoprocess.VideoProcessTaskDetail
	(*DescribeVideoProcessDetailRequest)(nil),  // 6: trpc.media.ytvideoprocess.DescribeVideoProcessDetailRequest
	(*DescribeVideoProcessDetailResponse)(nil), // 7: trpc.media.ytvideoprocess.DescribeVideoProcessDetailResponse
	(*StopVideoProcessTaskRequest)(nil),        // 8: trpc.media.ytvideoprocess.StopVideoProcessTaskRequest
	(*StopVideoProcessTaskResponse)(nil),       // 9: trpc.media.ytvideoprocess.StopVideoProcessTaskResponse
	(*UpdateVideoProcessTaskRequest)(nil),      // 10: trpc.media.ytvideoprocess.UpdateVideoProcessTaskRequest
	(*UpdateVideoProcessResponse)(nil),         // 11: trpc.media.ytvideoprocess.UpdateVideoProcessResponse
	(*apicommon.TaskInfo)(nil),                 // 12: trpc.media.common.TaskInfo
}
var file_yt_video_process_proto_depIdxs = []int32{
	0,  // 0: trpc.media.ytvideoprocess.CreateVideoProcessTaskRequest.ProcessType:type_name -> trpc.media.ytvideoprocess.VideoProcessType
	1,  // 1: trpc.media.ytvideoprocess.CreateVideoProcessTaskRequest.ProcessOption:type_name -> trpc.media.ytvideoprocess.VideoProcessOption
	12, // 2: trpc.media.ytvideoprocess.DescribeVideoProcessDetailResponse.TaskInfo:type_name -> trpc.media.common.TaskInfo
	5,  // 3: trpc.media.ytvideoprocess.DescribeVideoProcessDetailResponse.TaskDetail:type_name -> trpc.media.ytvideoprocess.VideoProcessTaskDetail
	1,  // 4: trpc.media.ytvideoprocess.DescribeVideoProcessDetailResponse.ProcessOption:type_name -> trpc.media.ytvideoprocess.VideoProcessOption
	1,  // 5: trpc.media.ytvideoprocess.UpdateVideoProcessTaskRequest.ProcessOption:type_name -> trpc.media.ytvideoprocess.VideoProcessOption
	2,  // 6: trpc.media.ytvideoprocess.YTVideoProcess.CreateVideoProcessTask:input_type -> trpc.media.ytvideoprocess.CreateVideoProcessTaskRequest
	6,  // 7: trpc.media.ytvideoprocess.YTVideoProcess.DescribeVideoProcessDetail:input_type -> trpc.media.ytvideoprocess.DescribeVideoProcessDetailRequest
	10, // 8: trpc.media.ytvideoprocess.YTVideoProcess.UpdateVideoProcessTask:input_type -> trpc.media.ytvideoprocess.UpdateVideoProcessTaskRequest
	8,  // 9: trpc.media.ytvideoprocess.YTVideoProcess.StopVideoProcessTask:input_type -> trpc.media.ytvideoprocess.StopVideoProcessTaskRequest
	3,  // 10: trpc.media.ytvideoprocess.YTVideoProcess.CreateVideoProcessTask:output_type -> trpc.media.ytvideoprocess.CreateVideoProcessResponse
	7,  // 11: trpc.media.ytvideoprocess.YTVideoProcess.DescribeVideoProcessDetail:output_type -> trpc.media.ytvideoprocess.DescribeVideoProcessDetailResponse
	11, // 12: trpc.media.ytvideoprocess.YTVideoProcess.UpdateVideoProcessTask:output_type -> trpc.media.ytvideoprocess.UpdateVideoProcessResponse
	9,  // 13: trpc.media.ytvideoprocess.YTVideoProcess.StopVideoProcessTask:output_type -> trpc.media.ytvideoprocess.StopVideoProcessTaskResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_yt_video_process_proto_init() }
func file_yt_video_process_proto_init() {
	if File_yt_video_process_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yt_video_process_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoProcessOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_video_process_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVideoProcessTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_video_process_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVideoProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_video_process_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_video_process_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoProcessTaskDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_video_process_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVideoProcessDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_video_process_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeVideoProcessDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_video_process_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopVideoProcessTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_video_process_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopVideoProcessTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_video_process_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVideoProcessTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_video_process_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVideoProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yt_video_process_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yt_video_process_proto_goTypes,
		DependencyIndexes: file_yt_video_process_proto_depIdxs,
		EnumInfos:         file_yt_video_process_proto_enumTypes,
		MessageInfos:      file_yt_video_process_proto_msgTypes,
	}.Build()
	File_yt_video_process_proto = out.File
	file_yt_video_process_proto_rawDesc = nil
	file_yt_video_process_proto_goTypes = nil
	file_yt_video_process_proto_depIdxs = nil
}
